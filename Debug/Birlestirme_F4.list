
Birlestirme_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000148c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001528  08014a68  08014a68  00024a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f90  08015f90  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08015f90  08015f90  00025f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f98  08015f98  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f98  08015f98  00025f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f9c  08015f9c  00025f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08015fa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ef8  20000208  080161a8  00030208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003100  080161a8  00033100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d07a  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e93  00000000  00000000  0004d2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  00051148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00052a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3b6  00000000  00000000  000541b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020dbf  00000000  00000000  0006f56e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098842  00000000  00000000  0009032d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128b6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084a8  00000000  00000000  00128bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014a4c 	.word	0x08014a4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08014a4c 	.word	0x08014a4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2319      	movs	r3, #25
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	463b      	mov	r3, r7
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2288      	movs	r2, #136	; 0x88
 80010c0:	21ec      	movs	r1, #236	; 0xec
 80010c2:	4857      	ldr	r0, [pc, #348]	; (8001220 <TrimRead+0x178>)
 80010c4:	f005 ffec 	bl	80070a0 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010c8:	463b      	mov	r3, r7
 80010ca:	3319      	adds	r3, #25
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	9202      	str	r2, [sp, #8]
 80010d2:	2207      	movs	r2, #7
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	22e1      	movs	r2, #225	; 0xe1
 80010dc:	21ec      	movs	r1, #236	; 0xec
 80010de:	4850      	ldr	r0, [pc, #320]	; (8001220 <TrimRead+0x178>)
 80010e0:	f005 ffde 	bl	80070a0 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <TrimRead+0x17c>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <TrimRead+0x180>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <TrimRead+0x184>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <TrimRead+0x188>)
 800112e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <TrimRead+0x18c>)
 8001140:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <TrimRead+0x190>)
 8001152:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <TrimRead+0x194>)
 8001164:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <TrimRead+0x198>)
 8001176:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001178:	7c7b      	ldrb	r3, [r7, #17]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	7c3b      	ldrb	r3, [r7, #16]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <TrimRead+0x19c>)
 8001188:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <TrimRead+0x1a0>)
 800119a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800119c:	7d7b      	ldrb	r3, [r7, #21]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <TrimRead+0x1a4>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <TrimRead+0x1a8>)
 80011be:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <TrimRead+0x1ac>)
 80011c6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011c8:	7ebb      	ldrb	r3, [r7, #26]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7e7b      	ldrb	r3, [r7, #25]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <TrimRead+0x1b0>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011da:	7efb      	ldrb	r3, [r7, #27]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <TrimRead+0x1b4>)
 80011e0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011e2:	7f3b      	ldrb	r3, [r7, #28]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <TrimRead+0x1b8>)
 80011f8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011fa:	7fbb      	ldrb	r3, [r7, #30]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7f7b      	ldrb	r3, [r7, #29]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <TrimRead+0x1bc>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	b21a      	sxth	r2, r3
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <TrimRead+0x1c0>)
 8001216:	801a      	strh	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002bc 	.word	0x200002bc
 8001224:	20000234 	.word	0x20000234
 8001228:	2000023c 	.word	0x2000023c
 800122c:	2000023e 	.word	0x2000023e
 8001230:	20000236 	.word	0x20000236
 8001234:	20000240 	.word	0x20000240
 8001238:	20000242 	.word	0x20000242
 800123c:	20000244 	.word	0x20000244
 8001240:	20000246 	.word	0x20000246
 8001244:	20000248 	.word	0x20000248
 8001248:	2000024a 	.word	0x2000024a
 800124c:	2000024c 	.word	0x2000024c
 8001250:	2000024e 	.word	0x2000024e
 8001254:	20000238 	.word	0x20000238
 8001258:	20000250 	.word	0x20000250
 800125c:	2000023a 	.word	0x2000023a
 8001260:	20000252 	.word	0x20000252
 8001264:	20000254 	.word	0x20000254
 8001268:	20000256 	.word	0x20000256

0800126c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	4603      	mov	r3, r0
 8001280:	71bb      	strb	r3, [r7, #6]
 8001282:	460b      	mov	r3, r1
 8001284:	717b      	strb	r3, [r7, #5]
 8001286:	4613      	mov	r3, r2
 8001288:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800128a:	f7ff ff0d 	bl	80010a8 <TrimRead>


	uint8_t datatowrite = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001296:	23b6      	movs	r3, #182	; 0xb6
 8001298:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030f 	add.w	r3, r7, #15
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22e0      	movs	r2, #224	; 0xe0
 80012ae:	21ec      	movs	r1, #236	; 0xec
 80012b0:	4858      	ldr	r0, [pc, #352]	; (8001414 <BME280_Config+0x1a8>)
 80012b2:	f005 fdfb 	bl	8006eac <HAL_I2C_Mem_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <BME280_Config+0x56>
	{
		return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e0a3      	b.n	800140a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f004 fe24 	bl	8005f10 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 030f 	add.w	r3, r7, #15
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	22f2      	movs	r2, #242	; 0xf2
 80012e0:	21ec      	movs	r1, #236	; 0xec
 80012e2:	484c      	ldr	r0, [pc, #304]	; (8001414 <BME280_Config+0x1a8>)
 80012e4:	f005 fde2 	bl	8006eac <HAL_I2C_Mem_Write>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <BME280_Config+0x88>
	{
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e08a      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f004 fe0b 	bl	8005f10 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030e 	add.w	r3, r7, #14
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22f2      	movs	r2, #242	; 0xf2
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4840      	ldr	r0, [pc, #256]	; (8001414 <BME280_Config+0x1a8>)
 8001312:	f005 fec5 	bl	80070a0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001316:	7bba      	ldrb	r2, [r7, #14]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	429a      	cmp	r2, r3
 800131c:	d002      	beq.n	8001324 <BME280_Config+0xb8>
	{
		return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e072      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	b25a      	sxtb	r2, r3
 800132c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	b25b      	sxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b25b      	sxtb	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	22f5      	movs	r2, #245	; 0xf5
 8001350:	21ec      	movs	r1, #236	; 0xec
 8001352:	4830      	ldr	r0, [pc, #192]	; (8001414 <BME280_Config+0x1a8>)
 8001354:	f005 fdaa 	bl	8006eac <HAL_I2C_Mem_Write>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <BME280_Config+0xf8>
	{
		return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e052      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f004 fdd3 	bl	8005f10 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	22f5      	movs	r2, #245	; 0xf5
 800137e:	21ec      	movs	r1, #236	; 0xec
 8001380:	4824      	ldr	r0, [pc, #144]	; (8001414 <BME280_Config+0x1a8>)
 8001382:	f005 fe8d 	bl	80070a0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001386:	7bba      	ldrb	r2, [r7, #14]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	429a      	cmp	r2, r3
 800138c:	d002      	beq.n	8001394 <BME280_Config+0x128>
	{
		return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e03a      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f107 030f 	add.w	r3, r7, #15
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	22f4      	movs	r2, #244	; 0xf4
 80013c4:	21ec      	movs	r1, #236	; 0xec
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <BME280_Config+0x1a8>)
 80013c8:	f005 fd70 	bl	8006eac <HAL_I2C_Mem_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <BME280_Config+0x16c>
	{
		return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e018      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013d8:	2064      	movs	r0, #100	; 0x64
 80013da:	f004 fd99 	bl	8005f10 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 030e 	add.w	r3, r7, #14
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	22f4      	movs	r2, #244	; 0xf4
 80013f2:	21ec      	movs	r1, #236	; 0xec
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <BME280_Config+0x1a8>)
 80013f6:	f005 fe53 	bl	80070a0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013fa:	7bba      	ldrb	r2, [r7, #14]
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d002      	beq.n	8001408 <BME280_Config+0x19c>
	{
		return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e000      	b.n	800140a <BME280_Config+0x19e>
	}

	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	200002bc 	.word	0x200002bc

08001418 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <BMEReadRaw+0x8c>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	22d0      	movs	r2, #208	; 0xd0
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	481d      	ldr	r0, [pc, #116]	; (80014a8 <BMEReadRaw+0x90>)
 8001434:	f005 fe34 	bl	80070a0 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <BMEReadRaw+0x8c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d12a      	bne.n	8001496 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2308      	movs	r3, #8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	463b      	mov	r3, r7
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f7      	movs	r2, #247	; 0xf7
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <BMEReadRaw+0x90>)
 8001456:	f005 fe23 	bl	80070a0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800145a:	783b      	ldrb	r3, [r7, #0]
 800145c:	031a      	lsls	r2, r3, #12
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4313      	orrs	r3, r2
 8001464:	78ba      	ldrb	r2, [r7, #2]
 8001466:	0912      	lsrs	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	4313      	orrs	r3, r2
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <BMEReadRaw+0x94>)
 800146e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	031a      	lsls	r2, r3, #12
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4313      	orrs	r3, r2
 800147a:	797a      	ldrb	r2, [r7, #5]
 800147c:	0912      	lsrs	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4313      	orrs	r3, r2
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <BMEReadRaw+0x98>)
 8001484:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	4313      	orrs	r3, r2
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <BMEReadRaw+0x9c>)
 8001490:	6013      	str	r3, [r2, #0]

		return 0;
 8001492:	2300      	movs	r3, #0
 8001494:	e001      	b.n	800149a <BMEReadRaw+0x82>
	}

	else return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000224 	.word	0x20000224
 80014a8:	200002bc 	.word	0x200002bc
 80014ac:	2000022c 	.word	0x2000022c
 80014b0:	20000228 	.word	0x20000228
 80014b4:	20000230 	.word	0x20000230

080014b8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	10da      	asrs	r2, r3, #3
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <BME280_compensate_T_int32+0x78>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	12db      	asrs	r3, r3, #11
 80014d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	111b      	asrs	r3, r3, #4
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	1112      	asrs	r2, r2, #4
 80014e8:	4910      	ldr	r1, [pc, #64]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014ea:	8809      	ldrh	r1, [r1, #0]
 80014ec:	1a52      	subs	r2, r2, r1
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	131b      	asrs	r3, r3, #12
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <BME280_compensate_T_int32+0x7c>)
 80014f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	139b      	asrs	r3, r3, #14
 8001500:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3380      	adds	r3, #128	; 0x80
 8001518:	121b      	asrs	r3, r3, #8
 800151a:	60fb      	str	r3, [r7, #12]
	return T;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000234 	.word	0x20000234
 8001530:	2000023c 	.word	0x2000023c
 8001534:	2000023e 	.word	0x2000023e
 8001538:	20000258 	.word	0x20000258

0800153c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800153c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001540:	b0ca      	sub	sp, #296	; 0x128
 8001542:	af00      	add	r7, sp, #0
 8001544:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001548:	4baf      	ldr	r3, [pc, #700]	; (8001808 <BME280_compensate_P_int64+0x2cc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	17da      	asrs	r2, r3, #31
 800154e:	461c      	mov	r4, r3
 8001550:	4615      	mov	r5, r2
 8001552:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001556:	f145 3bff 	adc.w	fp, r5, #4294967295
 800155a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800155e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001562:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001566:	fb03 f102 	mul.w	r1, r3, r2
 800156a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800156e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	18ca      	adds	r2, r1, r3
 8001578:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157c:	fba3 8903 	umull	r8, r9, r3, r3
 8001580:	eb02 0309 	add.w	r3, r2, r9
 8001584:	4699      	mov	r9, r3
 8001586:	4ba1      	ldr	r3, [pc, #644]	; (800180c <BME280_compensate_P_int64+0x2d0>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b21b      	sxth	r3, r3
 800158e:	17da      	asrs	r2, r3, #31
 8001590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001598:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800159c:	4603      	mov	r3, r0
 800159e:	fb03 f209 	mul.w	r2, r3, r9
 80015a2:	460b      	mov	r3, r1
 80015a4:	fb08 f303 	mul.w	r3, r8, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	4602      	mov	r2, r0
 80015ac:	fba8 1202 	umull	r1, r2, r8, r2
 80015b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015b4:	460a      	mov	r2, r1
 80015b6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015be:	4413      	add	r3, r2
 80015c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015d0:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <BME280_compensate_P_int64+0x2d4>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015de:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015ea:	462a      	mov	r2, r5
 80015ec:	fb02 f203 	mul.w	r2, r2, r3
 80015f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015f4:	4621      	mov	r1, r4
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	441a      	add	r2, r3
 80015fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001600:	4621      	mov	r1, r4
 8001602:	fba3 1301 	umull	r1, r3, r3, r1
 8001606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800160a:	460b      	mov	r3, r1
 800160c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001626:	462b      	mov	r3, r5
 8001628:	0459      	lsls	r1, r3, #17
 800162a:	4623      	mov	r3, r4
 800162c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001630:	4623      	mov	r3, r4
 8001632:	0458      	lsls	r0, r3, #17
 8001634:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001638:	1814      	adds	r4, r2, r0
 800163a:	643c      	str	r4, [r7, #64]	; 0x40
 800163c:	414b      	adcs	r3, r1
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001644:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001648:	4b72      	ldr	r3, [pc, #456]	; (8001814 <BME280_compensate_P_int64+0x2d8>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	b21b      	sxth	r3, r3
 8001650:	17da      	asrs	r2, r3, #31
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001656:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001666:	00d9      	lsls	r1, r3, #3
 8001668:	2000      	movs	r0, #0
 800166a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800166e:	1814      	adds	r4, r2, r0
 8001670:	63bc      	str	r4, [r7, #56]	; 0x38
 8001672:	414b      	adcs	r3, r1
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001676:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800167a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800167e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001682:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001686:	fb03 f102 	mul.w	r1, r3, r2
 800168a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800168e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	18ca      	adds	r2, r1, r3
 8001698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169c:	fba3 1303 	umull	r1, r3, r3, r3
 80016a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016a4:	460b      	mov	r3, r1
 80016a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <BME280_compensate_P_int64+0x2dc>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	17da      	asrs	r2, r3, #31
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ca:	462b      	mov	r3, r5
 80016cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016d0:	4642      	mov	r2, r8
 80016d2:	fb02 f203 	mul.w	r2, r2, r3
 80016d6:	464b      	mov	r3, r9
 80016d8:	4621      	mov	r1, r4
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	4622      	mov	r2, r4
 80016e2:	4641      	mov	r1, r8
 80016e4:	fba2 1201 	umull	r1, r2, r2, r1
 80016e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016ec:	460a      	mov	r2, r1
 80016ee:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016f6:	4413      	add	r3, r2
 80016f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001708:	4623      	mov	r3, r4
 800170a:	0a18      	lsrs	r0, r3, #8
 800170c:	462b      	mov	r3, r5
 800170e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001712:	462b      	mov	r3, r5
 8001714:	1219      	asrs	r1, r3, #8
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <BME280_compensate_P_int64+0x2e0>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	b21b      	sxth	r3, r3
 800171e:	17da      	asrs	r2, r3, #31
 8001720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001724:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001728:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001730:	464a      	mov	r2, r9
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800173a:	4644      	mov	r4, r8
 800173c:	fb04 f303 	mul.w	r3, r4, r3
 8001740:	441a      	add	r2, r3
 8001742:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001746:	4644      	mov	r4, r8
 8001748:	fba3 4304 	umull	r4, r3, r3, r4
 800174c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001750:	4623      	mov	r3, r4
 8001752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800175a:	18d3      	adds	r3, r2, r3
 800175c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800176c:	464c      	mov	r4, r9
 800176e:	0323      	lsls	r3, r4, #12
 8001770:	4644      	mov	r4, r8
 8001772:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001776:	4644      	mov	r4, r8
 8001778:	0322      	lsls	r2, r4, #12
 800177a:	1884      	adds	r4, r0, r2
 800177c:	633c      	str	r4, [r7, #48]	; 0x30
 800177e:	eb41 0303 	adc.w	r3, r1, r3
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
 8001784:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001788:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800178c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001790:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001794:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001798:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <BME280_compensate_P_int64+0x2e4>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017ac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017b0:	462b      	mov	r3, r5
 80017b2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017b6:	4642      	mov	r2, r8
 80017b8:	fb02 f203 	mul.w	r2, r2, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	4621      	mov	r1, r4
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	4622      	mov	r2, r4
 80017c8:	4641      	mov	r1, r8
 80017ca:	fba2 1201 	umull	r1, r2, r2, r1
 80017ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017d2:	460a      	mov	r2, r1
 80017d4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017dc:	4413      	add	r3, r2
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017ee:	4629      	mov	r1, r5
 80017f0:	104a      	asrs	r2, r1, #1
 80017f2:	4629      	mov	r1, r5
 80017f4:	17cb      	asrs	r3, r1, #31
 80017f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017fe:	4313      	orrs	r3, r2
 8001800:	d110      	bne.n	8001824 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001802:	2300      	movs	r3, #0
 8001804:	e154      	b.n	8001ab0 <BME280_compensate_P_int64+0x574>
 8001806:	bf00      	nop
 8001808:	20000258 	.word	0x20000258
 800180c:	20000248 	.word	0x20000248
 8001810:	20000246 	.word	0x20000246
 8001814:	20000244 	.word	0x20000244
 8001818:	20000242 	.word	0x20000242
 800181c:	20000240 	.word	0x20000240
 8001820:	20000236 	.word	0x20000236
	}
	p = 1048576-adc_P;
 8001824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001828:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800182c:	17da      	asrs	r2, r3, #31
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001832:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001836:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800183a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800183e:	105b      	asrs	r3, r3, #1
 8001840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001844:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001848:	07db      	lsls	r3, r3, #31
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800184e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001852:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001856:	4621      	mov	r1, r4
 8001858:	1a89      	subs	r1, r1, r2
 800185a:	67b9      	str	r1, [r7, #120]	; 0x78
 800185c:	4629      	mov	r1, r5
 800185e:	eb61 0303 	sbc.w	r3, r1, r3
 8001862:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001864:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001868:	4622      	mov	r2, r4
 800186a:	462b      	mov	r3, r5
 800186c:	1891      	adds	r1, r2, r2
 800186e:	6239      	str	r1, [r7, #32]
 8001870:	415b      	adcs	r3, r3
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001878:	4621      	mov	r1, r4
 800187a:	1851      	adds	r1, r2, r1
 800187c:	61b9      	str	r1, [r7, #24]
 800187e:	4629      	mov	r1, r5
 8001880:	414b      	adcs	r3, r1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001890:	4649      	mov	r1, r9
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	4641      	mov	r1, r8
 8001896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189a:	4641      	mov	r1, r8
 800189c:	018a      	lsls	r2, r1, #6
 800189e:	4641      	mov	r1, r8
 80018a0:	1889      	adds	r1, r1, r2
 80018a2:	6139      	str	r1, [r7, #16]
 80018a4:	4649      	mov	r1, r9
 80018a6:	eb43 0101 	adc.w	r1, r3, r1
 80018aa:	6179      	str	r1, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018b8:	4649      	mov	r1, r9
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c2:	4641      	mov	r1, r8
 80018c4:	008a      	lsls	r2, r1, #2
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	4622      	mov	r2, r4
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	460b      	mov	r3, r1
 80018d4:	462a      	mov	r2, r5
 80018d6:	eb42 0303 	adc.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018e8:	4649      	mov	r1, r9
 80018ea:	008b      	lsls	r3, r1, #2
 80018ec:	4641      	mov	r1, r8
 80018ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018f2:	4641      	mov	r1, r8
 80018f4:	008a      	lsls	r2, r1, #2
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	4622      	mov	r2, r4
 80018fe:	189b      	adds	r3, r3, r2
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
 8001902:	462b      	mov	r3, r5
 8001904:	460a      	mov	r2, r1
 8001906:	eb42 0303 	adc.w	r3, r2, r3
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
 800190c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001910:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001914:	f7ff f9c0 	bl	8000c98 <__aeabi_ldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <BME280_compensate_P_int64+0x580>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	66bb      	str	r3, [r7, #104]	; 0x68
 800192c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800192e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0b50      	lsrs	r0, r2, #13
 800193c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001940:	1359      	asrs	r1, r3, #13
 8001942:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001946:	462b      	mov	r3, r5
 8001948:	fb00 f203 	mul.w	r2, r0, r3
 800194c:	4623      	mov	r3, r4
 800194e:	fb03 f301 	mul.w	r3, r3, r1
 8001952:	4413      	add	r3, r2
 8001954:	4622      	mov	r2, r4
 8001956:	fba2 1200 	umull	r1, r2, r2, r0
 800195a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800195e:	460a      	mov	r2, r1
 8001960:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800196e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0b50      	lsrs	r0, r2, #13
 800197c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001980:	1359      	asrs	r1, r3, #13
 8001982:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001986:	462b      	mov	r3, r5
 8001988:	fb00 f203 	mul.w	r2, r0, r3
 800198c:	4623      	mov	r3, r4
 800198e:	fb03 f301 	mul.w	r3, r3, r1
 8001992:	4413      	add	r3, r2
 8001994:	4622      	mov	r2, r4
 8001996:	fba2 1200 	umull	r1, r2, r2, r0
 800199a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800199e:	460a      	mov	r2, r1
 80019a0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019a8:	4413      	add	r3, r2
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019ba:	4621      	mov	r1, r4
 80019bc:	0e4a      	lsrs	r2, r1, #25
 80019be:	4629      	mov	r1, r5
 80019c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019c4:	4629      	mov	r1, r5
 80019c6:	164b      	asrs	r3, r1, #25
 80019c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <BME280_compensate_P_int64+0x584>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	17da      	asrs	r2, r3, #31
 80019d6:	663b      	str	r3, [r7, #96]	; 0x60
 80019d8:	667a      	str	r2, [r7, #100]	; 0x64
 80019da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019e2:	462a      	mov	r2, r5
 80019e4:	fb02 f203 	mul.w	r2, r2, r3
 80019e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ec:	4621      	mov	r1, r4
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019f8:	4621      	mov	r1, r4
 80019fa:	fba2 1201 	umull	r1, r2, r2, r1
 80019fe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a02:	460a      	mov	r2, r1
 8001a04:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a1e:	4621      	mov	r1, r4
 8001a20:	0cca      	lsrs	r2, r1, #19
 8001a22:	4629      	mov	r1, r5
 8001a24:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a28:	4629      	mov	r1, r5
 8001a2a:	14cb      	asrs	r3, r1, #19
 8001a2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a38:	1884      	adds	r4, r0, r2
 8001a3a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a3c:	eb41 0303 	adc.w	r3, r1, r3
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	1889      	adds	r1, r1, r2
 8001a4e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a50:	4629      	mov	r1, r5
 8001a52:	eb43 0101 	adc.w	r1, r3, r1
 8001a56:	6579      	str	r1, [r7, #84]	; 0x54
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a64:	4623      	mov	r3, r4
 8001a66:	0a18      	lsrs	r0, r3, #8
 8001a68:	462b      	mov	r3, r5
 8001a6a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a6e:	462b      	mov	r3, r5
 8001a70:	1219      	asrs	r1, r3, #8
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <BME280_compensate_P_int64+0x588>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	17da      	asrs	r2, r3, #31
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a8c:	464c      	mov	r4, r9
 8001a8e:	0123      	lsls	r3, r4, #4
 8001a90:	4644      	mov	r4, r8
 8001a92:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a96:	4644      	mov	r4, r8
 8001a98:	0122      	lsls	r2, r4, #4
 8001a9a:	1884      	adds	r4, r0, r2
 8001a9c:	603c      	str	r4, [r7, #0]
 8001a9e:	eb41 0303 	adc.w	r3, r1, r3
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001aa8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abc:	2000024e 	.word	0x2000024e
 8001ac0:	2000024c 	.word	0x2000024c
 8001ac4:	2000024a 	.word	0x2000024a

08001ac8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <bme280_compensate_H_int32+0xbc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ad8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	039a      	lsls	r2, r3, #14
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <bme280_compensate_H_int32+0xc0>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	051b      	lsls	r3, r3, #20
 8001ae6:	1ad2      	subs	r2, r2, r3
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <bme280_compensate_H_int32+0xc4>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	4619      	mov	r1, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001af8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001afc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001afe:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <bme280_compensate_H_int32+0xc8>)
 8001b00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b04:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b0c:	1292      	asrs	r2, r2, #10
 8001b0e:	4921      	ldr	r1, [pc, #132]	; (8001b94 <bme280_compensate_H_int32+0xcc>)
 8001b10:	8809      	ldrh	r1, [r1, #0]
 8001b12:	4608      	mov	r0, r1
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	fb00 f101 	mul.w	r1, r0, r1
 8001b1a:	12c9      	asrs	r1, r1, #11
 8001b1c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b24:	1292      	asrs	r2, r2, #10
 8001b26:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <bme280_compensate_H_int32+0xd0>)
 8001b2c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b38:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	13db      	asrs	r3, r3, #15
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	13d2      	asrs	r2, r2, #15
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <bme280_compensate_H_int32+0xd4>)
 8001b50:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b56:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b64:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b6c:	bfa8      	it	ge
 8001b6e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b72:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	131b      	asrs	r3, r3, #12
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20000258 	.word	0x20000258
 8001b88:	20000252 	.word	0x20000252
 8001b8c:	20000254 	.word	0x20000254
 8001b90:	20000256 	.word	0x20000256
 8001b94:	2000023a 	.word	0x2000023a
 8001b98:	20000250 	.word	0x20000250
 8001b9c:	20000238 	.word	0x20000238

08001ba0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ba4:	f7ff fc38 	bl	8001418 <BMEReadRaw>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d163      	bne.n	8001c76 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <BME280_Measure+0xf4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bb6:	d104      	bne.n	8001bc2 <BME280_Measure+0x22>
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <BME280_Measure+0xf8>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e016      	b.n	8001bf0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <BME280_Measure+0xf4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc76 	bl	80014b8 <BME280_compensate_T_int32>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcb0 	bl	8000534 <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <BME280_Measure+0xfc>)
 8001bda:	f7fe fe3f 	bl	800085c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f807 	bl	8000bf8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <BME280_Measure+0xf8>)
 8001bee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <BME280_Measure+0x100>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bf8:	d104      	bne.n	8001c04 <BME280_Measure+0x64>
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <BME280_Measure+0x104>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e016      	b.n	8001c32 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <BME280_Measure+0x100>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fc97 	bl	800153c <BME280_compensate_P_int64>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc7f 	bl	8000514 <__aeabi_ui2d>
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <BME280_Measure+0x108>)
 8001c1c:	f7fe fe1e 	bl	800085c <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ffe6 	bl	8000bf8 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <BME280_Measure+0x104>)
 8001c30:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <BME280_Measure+0x10c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3a:	d104      	bne.n	8001c46 <BME280_Measure+0xa6>
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <BME280_Measure+0x110>)
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c44:	e023      	b.n	8001c8e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <BME280_Measure+0x10c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff3c 	bl	8001ac8 <bme280_compensate_H_int32>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc5e 	bl	8000514 <__aeabi_ui2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <BME280_Measure+0x114>)
 8001c5e:	f7fe fdfd 	bl	800085c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffc5 	bl	8000bf8 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <BME280_Measure+0x110>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	e00b      	b.n	8001c8e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <BME280_Measure+0x110>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <BME280_Measure+0x110>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <BME280_Measure+0x104>)
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <BME280_Measure+0x104>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <BME280_Measure+0xf8>)
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000228 	.word	0x20000228
 8001c98:	200009d8 	.word	0x200009d8
 8001c9c:	40590000 	.word	0x40590000
 8001ca0:	2000022c 	.word	0x2000022c
 8001ca4:	200009dc 	.word	0x200009dc
 8001ca8:	40700000 	.word	0x40700000
 8001cac:	20000230 	.word	0x20000230
 8001cb0:	200009e0 	.word	0x200009e0
 8001cb4:	40900000 	.word	0x40900000

08001cb8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <SELECT+0x18>)
 8001cc2:	f004 fc59 	bl	8006578 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f004 f922 	bl	8005f10 <HAL_Delay>
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4803      	ldr	r0, [pc, #12]	; (8001cec <DESELECT+0x18>)
 8001cde:	f004 fc4b 	bl	8006578 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f004 f914 	bl	8005f10 <HAL_Delay>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40020400 	.word	0x40020400

08001cf0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cfa:	bf00      	nop
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <SPI_TxByte+0x30>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d1f8      	bne.n	8001cfc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001d0a:	1df9      	adds	r1, r7, #7
 8001d0c:	2364      	movs	r3, #100	; 0x64
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <SPI_TxByte+0x30>)
 8001d12:	f006 fed8 	bl	8008ac6 <HAL_SPI_Transmit>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000364 	.word	0x20000364

08001d24 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d30:	bf00      	nop
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <SPI_TxBuffer+0x30>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d1f8      	bne.n	8001d32 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001d40:	887a      	ldrh	r2, [r7, #2]
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <SPI_TxBuffer+0x30>)
 8001d48:	f006 febd 	bl	8008ac6 <HAL_SPI_Transmit>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000364 	.word	0x20000364

08001d58 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001d5e:	23ff      	movs	r3, #255	; 0xff
 8001d60:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d62:	bf00      	nop
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <SPI_RxByte+0x34>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d1f8      	bne.n	8001d64 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d72:	1dba      	adds	r2, r7, #6
 8001d74:	1df9      	adds	r1, r7, #7
 8001d76:	2364      	movs	r3, #100	; 0x64
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <SPI_RxByte+0x34>)
 8001d7e:	f006 ffde 	bl	8008d3e <HAL_SPI_TransmitReceive>

	return data;
 8001d82:	79bb      	ldrb	r3, [r7, #6]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000364 	.word	0x20000364

08001d90 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001d98:	f7ff ffde 	bl	8001d58 <SPI_RxByte>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	701a      	strb	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <SD_ReadyWait+0x30>)
 8001db4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001db8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001dba:	f7ff ffcd 	bl	8001d58 <SPI_RxByte>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2bff      	cmp	r3, #255	; 0xff
 8001dc6:	d004      	beq.n	8001dd2 <SD_ReadyWait+0x26>
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SD_ReadyWait+0x30>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f3      	bne.n	8001dba <SD_ReadyWait+0xe>

	return res;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20002eaa 	.word	0x20002eaa

08001de0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001de6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001dea:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001dec:	f7ff ff72 	bl	8001cd4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	e005      	b.n	8001e02 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001df6:	20ff      	movs	r0, #255	; 0xff
 8001df8:	f7ff ff7a 	bl	8001cf0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	ddf6      	ble.n	8001df6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001e08:	f7ff ff56 	bl	8001cb8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001e20:	2395      	movs	r3, #149	; 0x95
 8001e22:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001e24:	463b      	mov	r3, r7
 8001e26:	2106      	movs	r1, #6
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff7b 	bl	8001d24 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001e2e:	e002      	b.n	8001e36 <SD_PowerOn+0x56>
	{
		cnt--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001e36:	f7ff ff8f 	bl	8001d58 <SPI_RxByte>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d002      	beq.n	8001e46 <SD_PowerOn+0x66>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f4      	bne.n	8001e30 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001e46:	f7ff ff45 	bl	8001cd4 <DESELECT>
	SPI_TxByte(0XFF);
 8001e4a:	20ff      	movs	r0, #255	; 0xff
 8001e4c:	f7ff ff50 	bl	8001cf0 <SPI_TxByte>

	PowerFlag = 1;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <SD_PowerOn+0x80>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000025d 	.word	0x2000025d

08001e64 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <SD_PowerOff+0x14>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	2000025d 	.word	0x2000025d

08001e7c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <SD_CheckPower+0x14>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000025d 	.word	0x2000025d

08001e94 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <SD_RxDataBlock+0x5c>)
 8001ea0:	22c8      	movs	r2, #200	; 0xc8
 8001ea2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001ea4:	f7ff ff58 	bl	8001d58 <SPI_RxByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d104      	bne.n	8001ebc <SD_RxDataBlock+0x28>
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <SD_RxDataBlock+0x5c>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f3      	bne.n	8001ea4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2bfe      	cmp	r3, #254	; 0xfe
 8001ec0:	d001      	beq.n	8001ec6 <SD_RxDataBlock+0x32>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e00f      	b.n	8001ee6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <SPI_RxBytePtr>
	} while(len--);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	603a      	str	r2, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f4      	bne.n	8001ec6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001edc:	f7ff ff3c 	bl	8001d58 <SPI_RxByte>
	SPI_RxByte();
 8001ee0:	f7ff ff3a 	bl	8001d58 <SPI_RxByte>

	return TRUE;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20002ea8 	.word	0x20002ea8

08001ef4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001f04:	f7ff ff52 	bl	8001dac <SD_ReadyWait>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d001      	beq.n	8001f12 <SD_TxDataBlock+0x1e>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e02f      	b.n	8001f72 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff feeb 	bl	8001cf0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	2bfd      	cmp	r3, #253	; 0xfd
 8001f1e:	d020      	beq.n	8001f62 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fefd 	bl	8001d24 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001f2a:	f7ff ff15 	bl	8001d58 <SPI_RxByte>
		SPI_RxByte();
 8001f2e:	f7ff ff13 	bl	8001d58 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001f32:	e00b      	b.n	8001f4c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001f34:	f7ff ff10 	bl	8001d58 <SPI_RxByte>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d006      	beq.n	8001f54 <SD_TxDataBlock+0x60>
			i++;
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	2b40      	cmp	r3, #64	; 0x40
 8001f50:	d9f0      	bls.n	8001f34 <SD_TxDataBlock+0x40>
 8001f52:	e000      	b.n	8001f56 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001f54:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001f56:	bf00      	nop
 8001f58:	f7ff fefe 	bl	8001d58 <SPI_RxByte>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0fa      	beq.n	8001f58 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d101      	bne.n	8001f70 <SD_TxDataBlock+0x7c>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	6039      	str	r1, [r7, #0]
 8001f84:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001f86:	f7ff ff11 	bl	8001dac <SD_ReadyWait>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2bff      	cmp	r3, #255	; 0xff
 8001f8e:	d001      	beq.n	8001f94 <SD_SendCmd+0x1a>
 8001f90:	23ff      	movs	r3, #255	; 0xff
 8001f92:	e042      	b.n	800201a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff feaa 	bl	8001cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	0e1b      	lsrs	r3, r3, #24
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fea4 	bl	8001cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe9e 	bl	8001cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe98 	bl	8001cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fe93 	bl	8001cf0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	2b40      	cmp	r3, #64	; 0x40
 8001fce:	d102      	bne.n	8001fd6 <SD_SendCmd+0x5c>
 8001fd0:	2395      	movs	r3, #149	; 0x95
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e007      	b.n	8001fe6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b48      	cmp	r3, #72	; 0x48
 8001fda:	d102      	bne.n	8001fe2 <SD_SendCmd+0x68>
 8001fdc:	2387      	movs	r3, #135	; 0x87
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e001      	b.n	8001fe6 <SD_SendCmd+0x6c>
	else crc = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe81 	bl	8001cf0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b4c      	cmp	r3, #76	; 0x4c
 8001ff2:	d101      	bne.n	8001ff8 <SD_SendCmd+0x7e>
 8001ff4:	f7ff feb0 	bl	8001d58 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001ff8:	230a      	movs	r3, #10
 8001ffa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001ffc:	f7ff feac 	bl	8001d58 <SPI_RxByte>
 8002000:	4603      	mov	r3, r0
 8002002:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002004:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002008:	2b00      	cmp	r3, #0
 800200a:	da05      	bge.n	8002018 <SD_SendCmd+0x9e>
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	3b01      	subs	r3, #1
 8002010:	73bb      	strb	r3, [r7, #14]
 8002012:	7bbb      	ldrb	r3, [r7, #14]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f1      	bne.n	8001ffc <SD_SendCmd+0x82>

	return res;
 8002018:	7b7b      	ldrb	r3, [r7, #13]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <SD_disk_initialize+0x14>
 8002034:	2301      	movs	r3, #1
 8002036:	e0d6      	b.n	80021e6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002038:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <SD_disk_initialize+0x1cc>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <SD_disk_initialize+0x2a>
 8002046:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <SD_disk_initialize+0x1cc>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	e0cb      	b.n	80021e6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800204e:	f7ff fec7 	bl	8001de0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002052:	f7ff fe31 	bl	8001cb8 <SELECT>

	/* check disk type */
	type = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800205a:	2100      	movs	r1, #0
 800205c:	2040      	movs	r0, #64	; 0x40
 800205e:	f7ff ff8c 	bl	8001f7a <SD_SendCmd>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	f040 80a6 	bne.w	80021b6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800206a:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <SD_disk_initialize+0x1d0>)
 800206c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002070:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002072:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002076:	2048      	movs	r0, #72	; 0x48
 8002078:	f7ff ff7f 	bl	8001f7a <SD_SendCmd>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d158      	bne.n	8002134 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	e00c      	b.n	80020a2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002088:	7bfc      	ldrb	r4, [r7, #15]
 800208a:	f7ff fe65 	bl	8001d58 <SPI_RxByte>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	f104 0310 	add.w	r3, r4, #16
 8002096:	443b      	add	r3, r7
 8002098:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	3301      	adds	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d9ef      	bls.n	8002088 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80020a8:	7abb      	ldrb	r3, [r7, #10]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	f040 8083 	bne.w	80021b6 <SD_disk_initialize+0x192>
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	2baa      	cmp	r3, #170	; 0xaa
 80020b4:	d17f      	bne.n	80021b6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80020b6:	2100      	movs	r1, #0
 80020b8:	2077      	movs	r0, #119	; 0x77
 80020ba:	f7ff ff5e 	bl	8001f7a <SD_SendCmd>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d807      	bhi.n	80020d4 <SD_disk_initialize+0xb0>
 80020c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020c8:	2069      	movs	r0, #105	; 0x69
 80020ca:	f7ff ff56 	bl	8001f7a <SD_SendCmd>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <SD_disk_initialize+0x1d0>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1eb      	bne.n	80020b6 <SD_disk_initialize+0x92>
 80020de:	e000      	b.n	80020e2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80020e0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <SD_disk_initialize+0x1d0>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d064      	beq.n	80021b6 <SD_disk_initialize+0x192>
 80020ec:	2100      	movs	r1, #0
 80020ee:	207a      	movs	r0, #122	; 0x7a
 80020f0:	f7ff ff43 	bl	8001f7a <SD_SendCmd>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d15d      	bne.n	80021b6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e00c      	b.n	800211a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002100:	7bfc      	ldrb	r4, [r7, #15]
 8002102:	f7ff fe29 	bl	8001d58 <SPI_RxByte>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	f104 0310 	add.w	r3, r4, #16
 800210e:	443b      	add	r3, r7
 8002110:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3301      	adds	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d9ef      	bls.n	8002100 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002120:	7a3b      	ldrb	r3, [r7, #8]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SD_disk_initialize+0x10a>
 800212a:	230c      	movs	r3, #12
 800212c:	e000      	b.n	8002130 <SD_disk_initialize+0x10c>
 800212e:	2304      	movs	r3, #4
 8002130:	73bb      	strb	r3, [r7, #14]
 8002132:	e040      	b.n	80021b6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002134:	2100      	movs	r1, #0
 8002136:	2077      	movs	r0, #119	; 0x77
 8002138:	f7ff ff1f 	bl	8001f7a <SD_SendCmd>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d808      	bhi.n	8002154 <SD_disk_initialize+0x130>
 8002142:	2100      	movs	r1, #0
 8002144:	2069      	movs	r0, #105	; 0x69
 8002146:	f7ff ff18 	bl	8001f7a <SD_SendCmd>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d801      	bhi.n	8002154 <SD_disk_initialize+0x130>
 8002150:	2302      	movs	r3, #2
 8002152:	e000      	b.n	8002156 <SD_disk_initialize+0x132>
 8002154:	2301      	movs	r3, #1
 8002156:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d10e      	bne.n	800217c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800215e:	2100      	movs	r1, #0
 8002160:	2077      	movs	r0, #119	; 0x77
 8002162:	f7ff ff0a 	bl	8001f7a <SD_SendCmd>
 8002166:	4603      	mov	r3, r0
 8002168:	2b01      	cmp	r3, #1
 800216a:	d80e      	bhi.n	800218a <SD_disk_initialize+0x166>
 800216c:	2100      	movs	r1, #0
 800216e:	2069      	movs	r0, #105	; 0x69
 8002170:	f7ff ff03 	bl	8001f7a <SD_SendCmd>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <SD_disk_initialize+0x166>
 800217a:	e00d      	b.n	8002198 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800217c:	2100      	movs	r1, #0
 800217e:	2041      	movs	r0, #65	; 0x41
 8002180:	f7ff fefb 	bl	8001f7a <SD_SendCmd>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <SD_disk_initialize+0x1d0>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e1      	bne.n	8002158 <SD_disk_initialize+0x134>
 8002194:	e000      	b.n	8002198 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002196:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <SD_disk_initialize+0x1d0>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <SD_disk_initialize+0x18e>
 80021a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a6:	2050      	movs	r0, #80	; 0x50
 80021a8:	f7ff fee7 	bl	8001f7a <SD_SendCmd>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SD_disk_initialize+0x192>
 80021b2:	2300      	movs	r3, #0
 80021b4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <SD_disk_initialize+0x1d4>)
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80021bc:	f7ff fd8a 	bl	8001cd4 <DESELECT>
	SPI_RxByte();
 80021c0:	f7ff fdca 	bl	8001d58 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <SD_disk_initialize+0x1cc>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <SD_disk_initialize+0x1cc>)
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e001      	b.n	80021e0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80021dc:	f7ff fe42 	bl	8001e64 <SD_PowerOff>
	}

	return Stat;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <SD_disk_initialize+0x1cc>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20002ea8 	.word	0x20002ea8
 80021f8:	2000025c 	.word	0x2000025c

080021fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <SD_disk_status+0x14>
 800220c:	2301      	movs	r3, #1
 800220e:	e002      	b.n	8002216 <SD_disk_status+0x1a>
	return Stat;
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SD_disk_status+0x28>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000000 	.word	0x20000000

08002228 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <SD_disk_read+0x1c>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <SD_disk_read+0x20>
 8002244:	2304      	movs	r3, #4
 8002246:	e051      	b.n	80022ec <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <SD_disk_read+0xcc>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SD_disk_read+0x32>
 8002256:	2303      	movs	r3, #3
 8002258:	e048      	b.n	80022ec <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <SD_disk_read+0xd0>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <SD_disk_read+0x44>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	025b      	lsls	r3, r3, #9
 800226a:	607b      	str	r3, [r7, #4]

	SELECT();
 800226c:	f7ff fd24 	bl	8001cb8 <SELECT>

	if (count == 1)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d111      	bne.n	800229a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	2051      	movs	r0, #81	; 0x51
 800227a:	f7ff fe7e 	bl	8001f7a <SD_SendCmd>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d129      	bne.n	80022d8 <SD_disk_read+0xb0>
 8002284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f7ff fe03 	bl	8001e94 <SD_RxDataBlock>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d021      	beq.n	80022d8 <SD_disk_read+0xb0>
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	e01e      	b.n	80022d8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	2052      	movs	r0, #82	; 0x52
 800229e:	f7ff fe6c 	bl	8001f7a <SD_SendCmd>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d117      	bne.n	80022d8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80022a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ac:	68b8      	ldr	r0, [r7, #8]
 80022ae:	f7ff fdf1 	bl	8001e94 <SD_RxDataBlock>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <SD_disk_read+0xa6>
				buff += 512;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ed      	bne.n	80022a8 <SD_disk_read+0x80>
 80022cc:	e000      	b.n	80022d0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80022ce:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80022d0:	2100      	movs	r1, #0
 80022d2:	204c      	movs	r0, #76	; 0x4c
 80022d4:	f7ff fe51 	bl	8001f7a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80022d8:	f7ff fcfc 	bl	8001cd4 <DESELECT>
	SPI_RxByte();
 80022dc:	f7ff fd3c 	bl	8001d58 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000000 	.word	0x20000000
 80022f8:	2000025c 	.word	0x2000025c

080022fc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <SD_disk_write+0x1c>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <SD_disk_write+0x20>
 8002318:	2304      	movs	r3, #4
 800231a:	e06b      	b.n	80023f4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <SD_disk_write+0x100>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SD_disk_write+0x32>
 800232a:	2303      	movs	r3, #3
 800232c:	e062      	b.n	80023f4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <SD_disk_write+0x100>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SD_disk_write+0x44>
 800233c:	2302      	movs	r3, #2
 800233e:	e059      	b.n	80023f4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <SD_disk_write+0x104>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <SD_disk_write+0x56>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	025b      	lsls	r3, r3, #9
 8002350:	607b      	str	r3, [r7, #4]

	SELECT();
 8002352:	f7ff fcb1 	bl	8001cb8 <SELECT>

	if (count == 1)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d110      	bne.n	800237e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	2058      	movs	r0, #88	; 0x58
 8002360:	f7ff fe0b 	bl	8001f7a <SD_SendCmd>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13a      	bne.n	80023e0 <SD_disk_write+0xe4>
 800236a:	21fe      	movs	r1, #254	; 0xfe
 800236c:	68b8      	ldr	r0, [r7, #8]
 800236e:	f7ff fdc1 	bl	8001ef4 <SD_TxDataBlock>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d033      	beq.n	80023e0 <SD_disk_write+0xe4>
			count = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	e030      	b.n	80023e0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <SD_disk_write+0x104>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800238a:	2100      	movs	r1, #0
 800238c:	2077      	movs	r0, #119	; 0x77
 800238e:	f7ff fdf4 	bl	8001f7a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	2057      	movs	r0, #87	; 0x57
 8002396:	f7ff fdf0 	bl	8001f7a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	2059      	movs	r0, #89	; 0x59
 800239e:	f7ff fdec 	bl	8001f7a <SD_SendCmd>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d11b      	bne.n	80023e0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80023a8:	21fc      	movs	r1, #252	; 0xfc
 80023aa:	68b8      	ldr	r0, [r7, #8]
 80023ac:	f7ff fda2 	bl	8001ef4 <SD_TxDataBlock>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <SD_disk_write+0xd0>
				buff += 512;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80023bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ee      	bne.n	80023a8 <SD_disk_write+0xac>
 80023ca:	e000      	b.n	80023ce <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80023cc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80023ce:	21fd      	movs	r1, #253	; 0xfd
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7ff fd8f 	bl	8001ef4 <SD_TxDataBlock>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <SD_disk_write+0xe4>
			{
				count = 1;
 80023dc:	2301      	movs	r3, #1
 80023de:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80023e0:	f7ff fc78 	bl	8001cd4 <DESELECT>
	SPI_RxByte();
 80023e4:	f7ff fcb8 	bl	8001d58 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2301      	movne	r3, #1
 80023f0:	2300      	moveq	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000000 	.word	0x20000000
 8002400:	2000025c 	.word	0x2000025c

08002404 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b08b      	sub	sp, #44	; 0x2c
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	603a      	str	r2, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	460b      	mov	r3, r1
 8002412:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SD_disk_ioctl+0x1e>
 800241e:	2304      	movs	r3, #4
 8002420:	e115      	b.n	800264e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d124      	bne.n	8002478 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d012      	beq.n	800245c <SD_disk_ioctl+0x58>
 8002436:	2b02      	cmp	r3, #2
 8002438:	dc1a      	bgt.n	8002470 <SD_disk_ioctl+0x6c>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <SD_disk_ioctl+0x40>
 800243e:	2b01      	cmp	r3, #1
 8002440:	d006      	beq.n	8002450 <SD_disk_ioctl+0x4c>
 8002442:	e015      	b.n	8002470 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002444:	f7ff fd0e 	bl	8001e64 <SD_PowerOff>
			res = RES_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800244e:	e0fc      	b.n	800264a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002450:	f7ff fcc6 	bl	8001de0 <SD_PowerOn>
			res = RES_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800245a:	e0f6      	b.n	800264a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	1c5c      	adds	r4, r3, #1
 8002460:	f7ff fd0c 	bl	8001e7c <SD_CheckPower>
 8002464:	4603      	mov	r3, r0
 8002466:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800246e:	e0ec      	b.n	800264a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002470:	2304      	movs	r3, #4
 8002472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002476:	e0e8      	b.n	800264a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002478:	4b77      	ldr	r3, [pc, #476]	; (8002658 <SD_disk_ioctl+0x254>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <SD_disk_ioctl+0x86>
 8002486:	2303      	movs	r3, #3
 8002488:	e0e1      	b.n	800264e <SD_disk_ioctl+0x24a>

		SELECT();
 800248a:	f7ff fc15 	bl	8001cb8 <SELECT>

		switch (ctrl)
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	2b0d      	cmp	r3, #13
 8002492:	f200 80cb 	bhi.w	800262c <SD_disk_ioctl+0x228>
 8002496:	a201      	add	r2, pc, #4	; (adr r2, 800249c <SD_disk_ioctl+0x98>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	08002597 	.word	0x08002597
 80024a0:	080024d5 	.word	0x080024d5
 80024a4:	08002587 	.word	0x08002587
 80024a8:	0800262d 	.word	0x0800262d
 80024ac:	0800262d 	.word	0x0800262d
 80024b0:	0800262d 	.word	0x0800262d
 80024b4:	0800262d 	.word	0x0800262d
 80024b8:	0800262d 	.word	0x0800262d
 80024bc:	0800262d 	.word	0x0800262d
 80024c0:	0800262d 	.word	0x0800262d
 80024c4:	0800262d 	.word	0x0800262d
 80024c8:	080025a9 	.word	0x080025a9
 80024cc:	080025cd 	.word	0x080025cd
 80024d0:	080025f1 	.word	0x080025f1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80024d4:	2100      	movs	r1, #0
 80024d6:	2049      	movs	r0, #73	; 0x49
 80024d8:	f7ff fd4f 	bl	8001f7a <SD_SendCmd>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80a8 	bne.w	8002634 <SD_disk_ioctl+0x230>
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	2110      	movs	r1, #16
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fcd2 	bl	8001e94 <SD_RxDataBlock>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 809e 	beq.w	8002634 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80024f8:	7b3b      	ldrb	r3, [r7, #12]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10e      	bne.n	8002520 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002502:	7d7b      	ldrb	r3, [r7, #21]
 8002504:	b29a      	uxth	r2, r3
 8002506:	7d3b      	ldrb	r3, [r7, #20]
 8002508:	b29b      	uxth	r3, r3
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	b29b      	uxth	r3, r3
 800250e:	4413      	add	r3, r2
 8002510:	b29b      	uxth	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002516:	8bfb      	ldrh	r3, [r7, #30]
 8002518:	029a      	lsls	r2, r3, #10
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e02e      	b.n	800257e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002520:	7c7b      	ldrb	r3, [r7, #17]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	b2da      	uxtb	r2, r3
 8002528:	7dbb      	ldrb	r3, [r7, #22]
 800252a:	09db      	lsrs	r3, r3, #7
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4413      	add	r3, r2
 8002530:	b2da      	uxtb	r2, r3
 8002532:	7d7b      	ldrb	r3, [r7, #21]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0306 	and.w	r3, r3, #6
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4413      	add	r3, r2
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3302      	adds	r3, #2
 8002544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002548:	7d3b      	ldrb	r3, [r7, #20]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	b2db      	uxtb	r3, r3
 800254e:	b29a      	uxth	r2, r3
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	b29b      	uxth	r3, r3
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	b29b      	uxth	r3, r3
 8002558:	4413      	add	r3, r2
 800255a:	b29a      	uxth	r2, r3
 800255c:	7cbb      	ldrb	r3, [r7, #18]
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	b29b      	uxth	r3, r3
 8002562:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002566:	b29b      	uxth	r3, r3
 8002568:	4413      	add	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002570:	8bfa      	ldrh	r2, [r7, #30]
 8002572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002576:	3b09      	subs	r3, #9
 8002578:	409a      	lsls	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002584:	e056      	b.n	8002634 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002594:	e055      	b.n	8002642 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002596:	f7ff fc09 	bl	8001dac <SD_ReadyWait>
 800259a:	4603      	mov	r3, r0
 800259c:	2bff      	cmp	r3, #255	; 0xff
 800259e:	d14b      	bne.n	8002638 <SD_disk_ioctl+0x234>
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80025a6:	e047      	b.n	8002638 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80025a8:	2100      	movs	r1, #0
 80025aa:	2049      	movs	r0, #73	; 0x49
 80025ac:	f7ff fce5 	bl	8001f7a <SD_SendCmd>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d142      	bne.n	800263c <SD_disk_ioctl+0x238>
 80025b6:	2110      	movs	r1, #16
 80025b8:	6a38      	ldr	r0, [r7, #32]
 80025ba:	f7ff fc6b 	bl	8001e94 <SD_RxDataBlock>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03b      	beq.n	800263c <SD_disk_ioctl+0x238>
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80025ca:	e037      	b.n	800263c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80025cc:	2100      	movs	r1, #0
 80025ce:	204a      	movs	r0, #74	; 0x4a
 80025d0:	f7ff fcd3 	bl	8001f7a <SD_SendCmd>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d132      	bne.n	8002640 <SD_disk_ioctl+0x23c>
 80025da:	2110      	movs	r1, #16
 80025dc:	6a38      	ldr	r0, [r7, #32]
 80025de:	f7ff fc59 	bl	8001e94 <SD_RxDataBlock>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02b      	beq.n	8002640 <SD_disk_ioctl+0x23c>
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80025ee:	e027      	b.n	8002640 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80025f0:	2100      	movs	r1, #0
 80025f2:	207a      	movs	r0, #122	; 0x7a
 80025f4:	f7ff fcc1 	bl	8001f7a <SD_SendCmd>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002604:	e00b      	b.n	800261e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002606:	6a3c      	ldr	r4, [r7, #32]
 8002608:	1c63      	adds	r3, r4, #1
 800260a:	623b      	str	r3, [r7, #32]
 800260c:	f7ff fba4 	bl	8001d58 <SPI_RxByte>
 8002610:	4603      	mov	r3, r0
 8002612:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002618:	3301      	adds	r3, #1
 800261a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800261e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002622:	2b03      	cmp	r3, #3
 8002624:	d9ef      	bls.n	8002606 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800262c:	2304      	movs	r3, #4
 800262e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002632:	e006      	b.n	8002642 <SD_disk_ioctl+0x23e>
			break;
 8002634:	bf00      	nop
 8002636:	e004      	b.n	8002642 <SD_disk_ioctl+0x23e>
			break;
 8002638:	bf00      	nop
 800263a:	e002      	b.n	8002642 <SD_disk_ioctl+0x23e>
			break;
 800263c:	bf00      	nop
 800263e:	e000      	b.n	8002642 <SD_disk_ioctl+0x23e>
			break;
 8002640:	bf00      	nop
		}

		DESELECT();
 8002642:	f7ff fb47 	bl	8001cd4 <DESELECT>
		SPI_RxByte();
 8002646:	f7ff fb87 	bl	8001d58 <SPI_RxByte>
	}

	return res;
 800264a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800264e:	4618      	mov	r0, r3
 8002650:	372c      	adds	r7, #44	; 0x2c
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000

0800265c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3371      	adds	r3, #113	; 0x71
 8002674:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002676:	e002      	b.n	800267e <prv_parse_number+0x22>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <prv_parse_number+0x30>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b20      	cmp	r3, #32
 800268a:	d0f5      	beq.n	8002678 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b2d      	cmp	r3, #45	; 0x2d
 8002692:	d104      	bne.n	800269e <prv_parse_number+0x42>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <prv_parse_number+0x44>
 800269e:	2300      	movs	r3, #0
 80026a0:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80026a2:	e00d      	b.n	80026c0 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	461a      	mov	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <prv_parse_number+0x7a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b2f      	cmp	r3, #47	; 0x2f
 80026cc:	d903      	bls.n	80026d6 <prv_parse_number+0x7a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b39      	cmp	r3, #57	; 0x39
 80026d4:	d9e6      	bls.n	80026a4 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80026d6:	7afb      	ldrb	r3, [r7, #11]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <prv_parse_number+0x86>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	425b      	negs	r3, r3
 80026e0:	e000      	b.n	80026e4 <prv_parse_number+0x88>
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3371      	adds	r3, #113	; 0x71
 8002704:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002706:	e002      	b.n	800270e <prv_parse_float_number+0x1e>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <prv_parse_float_number+0x2c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b20      	cmp	r3, #32
 800271a:	d0f5      	beq.n	8002708 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 800271c:	2100      	movs	r1, #0
 800271e:	6838      	ldr	r0, [r7, #0]
 8002720:	f00d f810 	bl	800f744 <strtod>
 8002724:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800272c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002730:	eeb0 0a47 	vmov.f32	s0, s14
 8002734:	eef0 0a67 	vmov.f32	s1, s15
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002748:	2100      	movs	r1, #0
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffd0 	bl	80026f0 <prv_parse_float_number>
 8002750:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002754:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002758:	f7fe fa06 	bl	8000b68 <__aeabi_d2iz>
 800275c:	4603      	mov	r3, r0
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <prv_parse_lat_long+0x94>)
 8002760:	fb82 1203 	smull	r1, r2, r2, r3
 8002764:	1152      	asrs	r2, r2, #5
 8002766:	17db      	asrs	r3, r3, #31
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fee2 	bl	8000534 <__aeabi_i2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <prv_parse_lat_long+0x98>)
 800277e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002782:	f7fd ff41 	bl	8000608 <__aeabi_dmul>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800278e:	f7fd fd83 	bl	8000298 <__aeabi_dsub>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <prv_parse_lat_long+0x9c>)
 80027a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027a4:	f7fe f85a 	bl	800085c <__aeabi_ddiv>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b0:	f7fd fd74 	bl	800029c <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80027bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80027c4:	eeb0 0a47 	vmov.f32	s0, s14
 80027c8:	eef0 0a67 	vmov.f32	s1, s15
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	51eb851f 	.word	0x51eb851f
 80027d8:	40590000 	.word	0x40590000
 80027dc:	404e0000 	.word	0x404e0000

080027e0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80027e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80027f0:	2900      	cmp	r1, #0
 80027f2:	d169      	bne.n	80028c8 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3371      	adds	r3, #113	; 0x71
 80027f8:	2206      	movs	r2, #6
 80027fa:	49ba      	ldr	r1, [pc, #744]	; (8002ae4 <prv_parse_term+0x304>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00c f96b 	bl	800ead8 <strncmp>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d009      	beq.n	800281c <prv_parse_term+0x3c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3371      	adds	r3, #113	; 0x71
 800280c:	2206      	movs	r2, #6
 800280e:	49b6      	ldr	r1, [pc, #728]	; (8002ae8 <prv_parse_term+0x308>)
 8002810:	4618      	mov	r0, r3
 8002812:	f00c f961 	bl	800ead8 <strncmp>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002824:	e04e      	b.n	80028c4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3371      	adds	r3, #113	; 0x71
 800282a:	2206      	movs	r2, #6
 800282c:	49af      	ldr	r1, [pc, #700]	; (8002aec <prv_parse_term+0x30c>)
 800282e:	4618      	mov	r0, r3
 8002830:	f00c f952 	bl	800ead8 <strncmp>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <prv_parse_term+0x6e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3371      	adds	r3, #113	; 0x71
 800283e:	2206      	movs	r2, #6
 8002840:	49ab      	ldr	r1, [pc, #684]	; (8002af0 <prv_parse_term+0x310>)
 8002842:	4618      	mov	r0, r3
 8002844:	f00c f948 	bl	800ead8 <strncmp>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002856:	e035      	b.n	80028c4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3371      	adds	r3, #113	; 0x71
 800285c:	2206      	movs	r2, #6
 800285e:	49a5      	ldr	r1, [pc, #660]	; (8002af4 <prv_parse_term+0x314>)
 8002860:	4618      	mov	r0, r3
 8002862:	f00c f939 	bl	800ead8 <strncmp>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <prv_parse_term+0xa0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3371      	adds	r3, #113	; 0x71
 8002870:	2206      	movs	r2, #6
 8002872:	49a1      	ldr	r1, [pc, #644]	; (8002af8 <prv_parse_term+0x318>)
 8002874:	4618      	mov	r0, r3
 8002876:	f00c f92f 	bl	800ead8 <strncmp>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2203      	movs	r2, #3
 8002884:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002888:	e01c      	b.n	80028c4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3371      	adds	r3, #113	; 0x71
 800288e:	2206      	movs	r2, #6
 8002890:	499a      	ldr	r1, [pc, #616]	; (8002afc <prv_parse_term+0x31c>)
 8002892:	4618      	mov	r0, r3
 8002894:	f00c f920 	bl	800ead8 <strncmp>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <prv_parse_term+0xd2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3371      	adds	r3, #113	; 0x71
 80028a2:	2206      	movs	r2, #6
 80028a4:	4996      	ldr	r1, [pc, #600]	; (8002b00 <prv_parse_term+0x320>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f00c f916 	bl	800ead8 <strncmp>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80028ba:	e003      	b.n	80028c4 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e233      	b.n	8002d30 <prv_parse_term+0x550>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028ce:	2900      	cmp	r1, #0
 80028d0:	f000 822d 	beq.w	8002d2e <prv_parse_term+0x54e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028da:	2901      	cmp	r1, #1
 80028dc:	f040 80c9 	bne.w	8002a72 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80028e6:	3b01      	subs	r3, #1
 80028e8:	2b0a      	cmp	r3, #10
 80028ea:	f200 8213 	bhi.w	8002d14 <prv_parse_term+0x534>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <prv_parse_term+0x114>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002921 	.word	0x08002921
 80028f8:	0800299b 	.word	0x0800299b
 80028fc:	080029b1 	.word	0x080029b1
 8002900:	080029db 	.word	0x080029db
 8002904:	080029f1 	.word	0x080029f1
 8002908:	08002a1b 	.word	0x08002a1b
 800290c:	08002a2f 	.word	0x08002a2f
 8002910:	08002d15 	.word	0x08002d15
 8002914:	08002a43 	.word	0x08002a43
 8002918:	08002d15 	.word	0x08002d15
 800291c:	08002a5b 	.word	0x08002a5b
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002926:	3b30      	subs	r3, #48	; 0x30
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800293a:	4413      	add	r3, r2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	3b30      	subs	r3, #48	; 0x30
 8002940:	b2da      	uxtb	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800294e:	3b30      	subs	r3, #48	; 0x30
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	0092      	lsls	r2, r2, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002962:	4413      	add	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3b30      	subs	r3, #48	; 0x30
 8002968:	b2da      	uxtb	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002976:	3b30      	subs	r3, #48	; 0x30
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800298a:	4413      	add	r3, r2
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3b30      	subs	r3, #48	; 0x30
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8002998:	e1c9      	b.n	8002d2e <prv_parse_term+0x54e>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fed0 	bl	8002740 <prv_parse_lat_long>
 80029a0:	eeb0 7a40 	vmov.f32	s14, s0
 80029a4:	eef0 7a60 	vmov.f32	s15, s1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80029ae:	e1be      	b.n	8002d2e <prv_parse_term+0x54e>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80029b6:	2b53      	cmp	r3, #83	; 0x53
 80029b8:	d005      	beq.n	80029c6 <prv_parse_term+0x1e6>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80029c0:	2b73      	cmp	r3, #115	; 0x73
 80029c2:	f040 81a9 	bne.w	8002d18 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80029cc:	4690      	mov	r8, r2
 80029ce:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80029d8:	e19e      	b.n	8002d18 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff feb0 	bl	8002740 <prv_parse_lat_long>
 80029e0:	eeb0 7a40 	vmov.f32	s14, s0
 80029e4:	eef0 7a60 	vmov.f32	s15, s1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80029ee:	e19e      	b.n	8002d2e <prv_parse_term+0x54e>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80029f6:	2b57      	cmp	r3, #87	; 0x57
 80029f8:	d005      	beq.n	8002a06 <prv_parse_term+0x226>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a00:	2b77      	cmp	r3, #119	; 0x77
 8002a02:	f040 818b 	bne.w	8002d1c <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002a0c:	4614      	mov	r4, r2
 8002a0e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8002a18:	e180      	b.n	8002d1c <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fe1d 	bl	800265c <prv_parse_number>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002a2c:	e17f      	b.n	8002d2e <prv_parse_term+0x54e>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fe13 	bl	800265c <prv_parse_number>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002a40:	e175      	b.n	8002d2e <prv_parse_term+0x54e>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002a42:	2100      	movs	r1, #0
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fe53 	bl	80026f0 <prv_parse_float_number>
 8002a4a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a4e:	eef0 7a60 	vmov.f32	s15, s1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002a58:	e169      	b.n	8002d2e <prv_parse_term+0x54e>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fe47 	bl	80026f0 <prv_parse_float_number>
 8002a62:	eeb0 7a40 	vmov.f32	s14, s0
 8002a66:	eef0 7a60 	vmov.f32	s15, s1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002a70:	e15d      	b.n	8002d2e <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002a78:	2902      	cmp	r1, #2
 8002a7a:	f040 8083 	bne.w	8002b84 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002a84:	3b02      	subs	r3, #2
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d860      	bhi.n	8002b4c <prv_parse_term+0x36c>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <prv_parse_term+0x2b0>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002ad1 	.word	0x08002ad1
 8002a94:	08002b4d 	.word	0x08002b4d
 8002a98:	08002b4d 	.word	0x08002b4d
 8002a9c:	08002b4d 	.word	0x08002b4d
 8002aa0:	08002b4d 	.word	0x08002b4d
 8002aa4:	08002b4d 	.word	0x08002b4d
 8002aa8:	08002b4d 	.word	0x08002b4d
 8002aac:	08002b4d 	.word	0x08002b4d
 8002ab0:	08002b4d 	.word	0x08002b4d
 8002ab4:	08002b4d 	.word	0x08002b4d
 8002ab8:	08002b4d 	.word	0x08002b4d
 8002abc:	08002b4d 	.word	0x08002b4d
 8002ac0:	08002b4d 	.word	0x08002b4d
 8002ac4:	08002b05 	.word	0x08002b05
 8002ac8:	08002b1d 	.word	0x08002b1d
 8002acc:	08002b35 	.word	0x08002b35
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fdc2 	bl	800265c <prv_parse_number>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8002ae2:	e124      	b.n	8002d2e <prv_parse_term+0x54e>
 8002ae4:	08014a68 	.word	0x08014a68
 8002ae8:	08014a70 	.word	0x08014a70
 8002aec:	08014a78 	.word	0x08014a78
 8002af0:	08014a80 	.word	0x08014a80
 8002af4:	08014a88 	.word	0x08014a88
 8002af8:	08014a90 	.word	0x08014a90
 8002afc:	08014a98 	.word	0x08014a98
 8002b00:	08014aa0 	.word	0x08014aa0
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002b04:	2100      	movs	r1, #0
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fdf2 	bl	80026f0 <prv_parse_float_number>
 8002b0c:	eeb0 7a40 	vmov.f32	s14, s0
 8002b10:	eef0 7a60 	vmov.f32	s15, s1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002b1a:	e108      	b.n	8002d2e <prv_parse_term+0x54e>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fde6 	bl	80026f0 <prv_parse_float_number>
 8002b24:	eeb0 7a40 	vmov.f32	s14, s0
 8002b28:	eef0 7a60 	vmov.f32	s15, s1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002b32:	e0fc      	b.n	8002d2e <prv_parse_term+0x54e>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002b34:	2100      	movs	r1, #0
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fdda 	bl	80026f0 <prv_parse_float_number>
 8002b3c:	eeb0 7a40 	vmov.f32	s14, s0
 8002b40:	eef0 7a60 	vmov.f32	s15, s1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002b4a:	e0f0      	b.n	8002d2e <prv_parse_term+0x54e>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	f240 80e4 	bls.w	8002d20 <prv_parse_term+0x540>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b5e:	2b0e      	cmp	r3, #14
 8002b60:	f200 80de 	bhi.w	8002d20 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002b64:	2100      	movs	r1, #0
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fd78 	bl	800265c <prv_parse_number>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b74:	3b03      	subs	r3, #3
 8002b76:	b2d1      	uxtb	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8002b82:	e0cd      	b.n	8002d20 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002b8a:	2903      	cmp	r1, #3
 8002b8c:	d11b      	bne.n	8002bc6 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d002      	beq.n	8002b9e <prv_parse_term+0x3be>
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d00a      	beq.n	8002bb2 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8002b9c:	e0c7      	b.n	8002d2e <prv_parse_term+0x54e>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fd5b 	bl	800265c <prv_parse_number>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8002bb0:	e0bd      	b.n	8002d2e <prv_parse_term+0x54e>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fd51 	bl	800265c <prv_parse_number>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002bc4:	e0b3      	b.n	8002d2e <prv_parse_term+0x54e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002bcc:	2904      	cmp	r1, #4
 8002bce:	f040 80a9 	bne.w	8002d24 <prv_parse_term+0x544>
        switch (gh->p.term_num) {
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002bd8:	3902      	subs	r1, #2
 8002bda:	2909      	cmp	r1, #9
 8002bdc:	f200 80a4 	bhi.w	8002d28 <prv_parse_term+0x548>
 8002be0:	a001      	add	r0, pc, #4	; (adr r0, 8002be8 <prv_parse_term+0x408>)
 8002be2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c11 	.word	0x08002c11
 8002bec:	08002d29 	.word	0x08002d29
 8002bf0:	08002d29 	.word	0x08002d29
 8002bf4:	08002d29 	.word	0x08002d29
 8002bf8:	08002d29 	.word	0x08002d29
 8002bfc:	08002c2b 	.word	0x08002c2b
 8002c00:	08002c43 	.word	0x08002c43
 8002c04:	08002c5b 	.word	0x08002c5b
 8002c08:	08002cd5 	.word	0x08002cd5
 8002c0c:	08002ced 	.word	0x08002ced
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c16:	2b41      	cmp	r3, #65	; 0x41
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002c28:	e081      	b.n	8002d2e <prv_parse_term+0x54e>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fd5f 	bl	80026f0 <prv_parse_float_number>
 8002c32:	eeb0 7a40 	vmov.f32	s14, s0
 8002c36:	eef0 7a60 	vmov.f32	s15, s1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002c40:	e075      	b.n	8002d2e <prv_parse_term+0x54e>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002c42:	2100      	movs	r1, #0
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fd53 	bl	80026f0 <prv_parse_float_number>
 8002c4a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c4e:	eef0 7a60 	vmov.f32	s15, s1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002c58:	e069      	b.n	8002d2e <prv_parse_term+0x54e>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c60:	3b30      	subs	r3, #48	; 0x30
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002c74:	4413      	add	r3, r2
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3b30      	subs	r3, #48	; 0x30
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002c88:	3b30      	subs	r3, #48	; 0x30
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c9c:	4413      	add	r3, r2
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3b30      	subs	r3, #48	; 0x30
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002cb0:	3b30      	subs	r3, #48	; 0x30
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002cc4:	4413      	add	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3b30      	subs	r3, #48	; 0x30
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8002cd2:	e02c      	b.n	8002d2e <prv_parse_term+0x54e>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fd0a 	bl	80026f0 <prv_parse_float_number>
 8002cdc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ce0:	eef0 7a60 	vmov.f32	s15, s1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002cea:	e020      	b.n	8002d2e <prv_parse_term+0x54e>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002cf2:	2957      	cmp	r1, #87	; 0x57
 8002cf4:	d004      	beq.n	8002d00 <prv_parse_term+0x520>
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002cfc:	2977      	cmp	r1, #119	; 0x77
 8002cfe:	d115      	bne.n	8002d2c <prv_parse_term+0x54c>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002d06:	4602      	mov	r2, r0
 8002d08:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002d12:	e00b      	b.n	8002d2c <prv_parse_term+0x54c>
                break;
 8002d14:	bf00      	nop
 8002d16:	e00a      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d18:	bf00      	nop
 8002d1a:	e008      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d1c:	bf00      	nop
 8002d1e:	e006      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d20:	bf00      	nop
 8002d22:	e004      	b.n	8002d2e <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8002d24:	bf00      	nop
 8002d26:	e002      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d2c:	bf00      	nop
    return 1;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d3a:	bf00      	nop

08002d3c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d4a:	2b2f      	cmp	r3, #47	; 0x2f
 8002d4c:	d90d      	bls.n	8002d6a <prv_check_crc+0x2e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d54:	2b39      	cmp	r3, #57	; 0x39
 8002d56:	d808      	bhi.n	8002d6a <prv_check_crc+0x2e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d5e:	3b30      	subs	r3, #48	; 0x30
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	b25a      	sxtb	r2, r3
 8002d68:	e026      	b.n	8002db8 <prv_check_crc+0x7c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d90d      	bls.n	8002d90 <prv_check_crc+0x54>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d7a:	2b7a      	cmp	r3, #122	; 0x7a
 8002d7c:	d808      	bhi.n	8002d90 <prv_check_crc+0x54>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d84:	3b57      	subs	r3, #87	; 0x57
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	b25a      	sxtb	r2, r3
 8002d8e:	e013      	b.n	8002db8 <prv_check_crc+0x7c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d90d      	bls.n	8002db6 <prv_check_crc+0x7a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002da0:	2b5a      	cmp	r3, #90	; 0x5a
 8002da2:	d808      	bhi.n	8002db6 <prv_check_crc+0x7a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002daa:	3b37      	subs	r3, #55	; 0x37
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	b25a      	sxtb	r2, r3
 8002db4:	e000      	b.n	8002db8 <prv_check_crc+0x7c>
 8002db6:	2200      	movs	r2, #0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002dbe:	2b2f      	cmp	r3, #47	; 0x2f
 8002dc0:	d90c      	bls.n	8002ddc <prv_check_crc+0xa0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002dc8:	2b39      	cmp	r3, #57	; 0x39
 8002dca:	d807      	bhi.n	8002ddc <prv_check_crc+0xa0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	e028      	b.n	8002e2e <prv_check_crc+0xf2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002de2:	2b60      	cmp	r3, #96	; 0x60
 8002de4:	d90e      	bls.n	8002e04 <prv_check_crc+0xc8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002dec:	2b7a      	cmp	r3, #122	; 0x7a
 8002dee:	d809      	bhi.n	8002e04 <prv_check_crc+0xc8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002df6:	3b57      	subs	r3, #87	; 0x57
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	e014      	b.n	8002e2e <prv_check_crc+0xf2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d90e      	bls.n	8002e2c <prv_check_crc+0xf0>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e14:	2b5a      	cmp	r3, #90	; 0x5a
 8002e16:	d809      	bhi.n	8002e2c <prv_check_crc+0xf0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e1e:	3b37      	subs	r3, #55	; 0x37
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	e000      	b.n	8002e2e <prv_check_crc+0xf2>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d136      	bne.n	8002ed2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ed0:	e061      	b.n	8002f96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d121      	bne.n	8002f20 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	33a1      	adds	r3, #161	; 0xa1
 8002f16:	220c      	movs	r2, #12
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f00b f84d 	bl	800dfb8 <memcpy>
 8002f1e:	e03a      	b.n	8002f96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d106      	bne.n	8002f38 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002f36:	e02e      	b.n	8002f96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d129      	bne.n	8002f96 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002fa8:	22b0      	movs	r2, #176	; 0xb0
 8002faa:	2100      	movs	r1, #0
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f00b f811 	bl	800dfd4 <memset>
    return 1;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002fcc:	e0ad      	b.n	800312a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b24      	cmp	r3, #36	; 0x24
 8002fd4:	d128      	bne.n	8003028 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3370      	adds	r3, #112	; 0x70
 8002fda:	2240      	movs	r2, #64	; 0x40
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00a fff8 	bl	800dfd4 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002fea:	2b0b      	cmp	r3, #11
 8002fec:	f200 8097 	bhi.w	800311e <lwgps_process+0x162>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	440b      	add	r3, r1
 8003000:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800300a:	3301      	adds	r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003026:	e07a      	b.n	800311e <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b2c      	cmp	r3, #44	; 0x2c
 800302e:	d11d      	bne.n	800306c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fbd5 	bl	80027e0 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4053      	eors	r3, r2
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003060:	3301      	adds	r3, #1
 8003062:	b2da      	uxtb	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800306a:	e058      	b.n	800311e <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b2a      	cmp	r3, #42	; 0x2a
 8003072:	d117      	bne.n	80030a4 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fbb3 	bl	80027e0 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003098:	3301      	adds	r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80030a2:	e03c      	b.n	800311e <lwgps_process+0x162>
        } else if (*d == '\r') {
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b0d      	cmp	r3, #13
 80030aa:	d109      	bne.n	80030c0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fe45 	bl	8002d3c <prv_check_crc>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d032      	beq.n	800311e <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff feca 	bl	8002e52 <prv_copy_from_tmp_memory>
 80030be:	e02e      	b.n	800311e <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4053      	eors	r3, r2
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030e4:	2b0b      	cmp	r3, #11
 80030e6:	d81a      	bhi.n	800311e <lwgps_process+0x162>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030ee:	4619      	mov	r1, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003102:	3301      	adds	r3, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3301      	adds	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f af4e 	bne.w	8002fce <lwgps_process+0x12>
        }
    }
    return 1;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <max30102_plot>:
//}
/////////////////////////////////////////////////////////

// Plot fonksiyonu override
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{  //Eğer oksijen saturasyonu %100 den küçükse,değişkene ata
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
	if(100 *  ((float)red_sample / (float)(ir_sample))<100)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800315a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800315e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80031a8 <max30102_plot+0x6c>
 8003162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003166:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80031a8 <max30102_plot+0x6c>
 800316a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	d400      	bmi.n	8003176 <max30102_plot+0x3a>
	{
    spo2 = 100 *  ((float)red_sample / (float)(ir_sample));
	}
}
 8003174:	e012      	b.n	800319c <max30102_plot+0x60>
    spo2 = 100 *  ((float)red_sample / (float)(ir_sample));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	ee07 3a90 	vmov	s15, r3
 800317c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800318a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800318e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80031a8 <max30102_plot+0x6c>
 8003192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <max30102_plot+0x70>)
 8003198:	edc3 7a00 	vstr	s15, [r3]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	42c80000 	.word	0x42c80000
 80031ac:	20000260 	.word	0x20000260

080031b0 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[128];
uint8_t rx_index = 0;
uint8_t rx_data = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) //Eger interrupt UART2 den geldiyse
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <HAL_UART_RxCpltCallback+0x68>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d127      	bne.n	8003210 <HAL_UART_RxCpltCallback+0x60>
	{
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer))
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_UART_RxCpltCallback+0x6c>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b0a      	cmp	r3, #10
 80031c6:	d010      	beq.n	80031ea <HAL_UART_RxCpltCallback+0x3a>
 80031c8:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_UART_RxCpltCallback+0x70>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	db0b      	blt.n	80031ea <HAL_UART_RxCpltCallback+0x3a>
			{
			rx_buffer[rx_index++] = rx_data; // Buffera doldurma
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <HAL_UART_RxCpltCallback+0x70>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	b2d1      	uxtb	r1, r2
 80031da:	4a11      	ldr	r2, [pc, #68]	; (8003220 <HAL_UART_RxCpltCallback+0x70>)
 80031dc:	7011      	strb	r1, [r2, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_UART_RxCpltCallback+0x6c>)
 80031e2:	7819      	ldrb	r1, [r3, #0]
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_UART_RxCpltCallback+0x74>)
 80031e6:	5499      	strb	r1, [r3, r2]
 80031e8:	e00d      	b.n	8003206 <HAL_UART_RxCpltCallback+0x56>
			}
		else
			{
			lwgps_process(&gps, rx_buffer, rx_index+1); //Parse etme
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_UART_RxCpltCallback+0x70>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	461a      	mov	r2, r3
 80031f2:	490c      	ldr	r1, [pc, #48]	; (8003224 <HAL_UART_RxCpltCallback+0x74>)
 80031f4:	480c      	ldr	r0, [pc, #48]	; (8003228 <HAL_UART_RxCpltCallback+0x78>)
 80031f6:	f7ff fee1 	bl	8002fbc <lwgps_process>
			rx_index = 0;
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_UART_RxCpltCallback+0x70>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_UART_RxCpltCallback+0x6c>)
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
			}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);//Yeniden
 8003206:	2201      	movs	r2, #1
 8003208:	4904      	ldr	r1, [pc, #16]	; (800321c <HAL_UART_RxCpltCallback+0x6c>)
 800320a:	4803      	ldr	r0, [pc, #12]	; (8003218 <HAL_UART_RxCpltCallback+0x68>)
 800320c:	f006 fcf1 	bl	8009bf2 <HAL_UART_Receive_IT>
	}                                           //receive enable etme
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000490 	.word	0x20000490
 800321c:	200008a1 	.word	0x200008a1
 8003220:	200008a0 	.word	0x200008a0
 8003224:	20000820 	.word	0x20000820
 8003228:	20000770 	.word	0x20000770

0800322c <microDelay>:
uint8_t lcd_Temperature_DS=0; //LCD'de gösterebilmek için
uint8_t Temp_byte1, Temp_byte2;//geçici değerler
uint16_t TEMP;//geçici değerler
/////////////////////// DS18B20 MicroDelay     ///////////////////////////////
void microDelay (uint16_t delay)  //Mikrosaniye Delay Fonksiyonu
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim5, 0); //Counter sıfırlama
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <microDelay+0x30>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim5) < delay);  //DS18B20 icin timer source(tim5)
 800323e:	bf00      	nop
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <microDelay+0x30>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	429a      	cmp	r2, r3
 800324a:	d3f9      	bcc.n	8003240 <microDelay+0x14>
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000404 	.word	0x20000404

08003260 <Set_Pin_Output>:
// ONE WIRE PIN OUTPUT-INPUT AYARLAMA   DS18B20 ///////////////////////////////////////////
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800327c:	887b      	ldrh	r3, [r7, #2]
 800327e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003280:	2301      	movs	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f002 ffd6 	bl	8006240 <HAL_GPIO_Init>
}
 8003294:	bf00      	nop
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 030c 	add.w	r3, r7, #12
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032c0:	2301      	movs	r3, #1
 80032c2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f002 ffb8 	bl	8006240 <HAL_GPIO_Init>
}
 80032d0:	bf00      	nop
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <DS18B20_Start>:
///////////////////////// DS18B20 Fonksiyonlar  ////////////////////////////////////////
#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start (void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // Pin output ayarlanır
 80032e2:	2102      	movs	r1, #2
 80032e4:	4813      	ldr	r0, [pc, #76]	; (8003334 <DS18B20_Start+0x5c>)
 80032e6:	f7ff ffbb 	bl	8003260 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // Pin low a çekilir
 80032ea:	2200      	movs	r2, #0
 80032ec:	2102      	movs	r1, #2
 80032ee:	4811      	ldr	r0, [pc, #68]	; (8003334 <DS18B20_Start+0x5c>)
 80032f0:	f003 f942 	bl	8006578 <HAL_GPIO_WritePin>
	microDelay(480);   // Data sheet'e uygun olarak delay
 80032f4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80032f8:	f7ff ff98 	bl	800322c <microDelay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // Pin input ayarlanır
 80032fc:	2102      	movs	r1, #2
 80032fe:	480d      	ldr	r0, [pc, #52]	; (8003334 <DS18B20_Start+0x5c>)
 8003300:	f7ff ffcc 	bl	800329c <Set_Pin_Input>
	microDelay(80);    // Data sheet'e uygun olarak delay
 8003304:	2050      	movs	r0, #80	; 0x50
 8003306:	f7ff ff91 	bl	800322c <microDelay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // pin low ise sorgusu
 800330a:	2102      	movs	r1, #2
 800330c:	4809      	ldr	r0, [pc, #36]	; (8003334 <DS18B20_Start+0x5c>)
 800330e:	f003 f91b 	bl	8006548 <HAL_GPIO_ReadPin>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <DS18B20_Start+0x46>
 8003318:	2301      	movs	r3, #1
 800331a:	71fb      	strb	r3, [r7, #7]
 800331c:	e001      	b.n	8003322 <DS18B20_Start+0x4a>
	else Response = -1;
 800331e:	23ff      	movs	r3, #255	; 0xff
 8003320:	71fb      	strb	r3, [r7, #7]

	microDelay(480); // // Data sheet'e uygun olarak delay
 8003322:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003326:	f7ff ff81 	bl	800322c <microDelay>

	return Response;
 800332a:	79fb      	ldrb	r3, [r7, #7]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40020000 	.word	0x40020000

08003338 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // Pin output ayarlanır
 8003342:	2102      	movs	r1, #2
 8003344:	481e      	ldr	r0, [pc, #120]	; (80033c0 <DS18B20_Write+0x88>)
 8003346:	f7ff ff8b 	bl	8003260 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e02e      	b.n	80033ae <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // Eğer bit H ise
 8003350:	79fa      	ldrb	r2, [r7, #7]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	fa42 f303 	asr.w	r3, r2, r3
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <DS18B20_Write+0x50>
		{
			// 1 yazilir

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // Pin Output ayarlanır
 8003360:	2102      	movs	r1, #2
 8003362:	4817      	ldr	r0, [pc, #92]	; (80033c0 <DS18B20_Write+0x88>)
 8003364:	f7ff ff7c 	bl	8003260 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // Pin low a çekilir
 8003368:	2200      	movs	r2, #0
 800336a:	2102      	movs	r1, #2
 800336c:	4814      	ldr	r0, [pc, #80]	; (80033c0 <DS18B20_Write+0x88>)
 800336e:	f003 f903 	bl	8006578 <HAL_GPIO_WritePin>
			microDelay(1);  // 1 mikrosaniye beklenir
 8003372:	2001      	movs	r0, #1
 8003374:	f7ff ff5a 	bl	800322c <microDelay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Pin input olarak ayarlanır
 8003378:	2102      	movs	r1, #2
 800337a:	4811      	ldr	r0, [pc, #68]	; (80033c0 <DS18B20_Write+0x88>)
 800337c:	f7ff ff8e 	bl	800329c <Set_Pin_Input>
			microDelay(50);  // 50-60 mikrosaniye beklenir
 8003380:	2032      	movs	r0, #50	; 0x32
 8003382:	f7ff ff53 	bl	800322c <microDelay>
 8003386:	e00f      	b.n	80033a8 <DS18B20_Write+0x70>

		else  // Bit L ise
		{
			// 0 yazılır

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);	// Pin Output ayarlanır
 8003388:	2102      	movs	r1, #2
 800338a:	480d      	ldr	r0, [pc, #52]	; (80033c0 <DS18B20_Write+0x88>)
 800338c:	f7ff ff68 	bl	8003260 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // Pin low'a çekilir
 8003390:	2200      	movs	r2, #0
 8003392:	2102      	movs	r1, #2
 8003394:	480a      	ldr	r0, [pc, #40]	; (80033c0 <DS18B20_Write+0x88>)
 8003396:	f003 f8ef 	bl	8006578 <HAL_GPIO_WritePin>
			microDelay(50);  // 50-60 mikrosaniye beklenir.
 800339a:	2032      	movs	r0, #50	; 0x32
 800339c:	f7ff ff46 	bl	800322c <microDelay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80033a0:	2102      	movs	r1, #2
 80033a2:	4807      	ldr	r0, [pc, #28]	; (80033c0 <DS18B20_Write+0x88>)
 80033a4:	f7ff ff7a 	bl	800329c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b07      	cmp	r3, #7
 80033b2:	ddcd      	ble.n	8003350 <DS18B20_Write+0x18>
		}
	}
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40020000 	.word	0x40020000

080033c4 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80033ce:	2102      	movs	r1, #2
 80033d0:	481a      	ldr	r0, [pc, #104]	; (800343c <DS18B20_Read+0x78>)
 80033d2:	f7ff ff63 	bl	800329c <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	e026      	b.n	800342a <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // Output olarak ayarlanır
 80033dc:	2102      	movs	r1, #2
 80033de:	4817      	ldr	r0, [pc, #92]	; (800343c <DS18B20_Read+0x78>)
 80033e0:	f7ff ff3e 	bl	8003260 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // Pini lowa çekilir
 80033e4:	2200      	movs	r2, #0
 80033e6:	2102      	movs	r1, #2
 80033e8:	4814      	ldr	r0, [pc, #80]	; (800343c <DS18B20_Read+0x78>)
 80033ea:	f003 f8c5 	bl	8006578 <HAL_GPIO_WritePin>
		microDelay(1);  // wait for > 1us
 80033ee:	2001      	movs	r0, #1
 80033f0:	f7ff ff1c 	bl	800322c <microDelay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Pin input olarak ayarlanir
 80033f4:	2102      	movs	r1, #2
 80033f6:	4811      	ldr	r0, [pc, #68]	; (800343c <DS18B20_Read+0x78>)
 80033f8:	f7ff ff50 	bl	800329c <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // Eğer pin H ise
 80033fc:	2102      	movs	r1, #2
 80033fe:	480f      	ldr	r0, [pc, #60]	; (800343c <DS18B20_Read+0x78>)
 8003400:	f003 f8a2 	bl	8006548 <HAL_GPIO_ReadPin>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 800340a:	2201      	movs	r2, #1
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	b25a      	sxtb	r2, r3
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	4313      	orrs	r3, r2
 800341a:	b25b      	sxtb	r3, r3
 800341c:	71fb      	strb	r3, [r7, #7]
		}
		microDelay(50);  // 50-60 mikrosaniye beklenir.
 800341e:	2032      	movs	r0, #50	; 0x32
 8003420:	f7ff ff04 	bl	800322c <microDelay>
	for (int i=0;i<8;i++)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b07      	cmp	r3, #7
 800342e:	ddd5      	ble.n	80033dc <DS18B20_Read+0x18>
	}
	return value;
 8003430:	79fb      	ldrb	r3, [r7, #7]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40020000 	.word	0x40020000

08003440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003444:	b099      	sub	sp, #100	; 0x64
 8003446:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003448:	f002 fd20 	bl	8005e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800344c:	f000 fe20 	bl	8004090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003450:	f001 f834 	bl	80044bc <MX_GPIO_Init>
  MX_I2C2_Init();
 8003454:	f000 feb2 	bl	80041bc <MX_I2C2_Init>
  MX_TIM5_Init();
 8003458:	f000 ff8e 	bl	8004378 <MX_TIM5_Init>
  MX_SPI1_Init();
 800345c:	f000 ff0a 	bl	8004274 <MX_SPI1_Init>
  MX_FATFS_Init();
 8003460:	f007 faf2 	bl	800aa48 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8003464:	f000 ffd6 	bl	8004414 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003468:	f000 fffe 	bl	8004468 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800346c:	f000 fe78 	bl	8004160 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003470:	f000 fed2 	bl	8004218 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003474:	f000 ff34 	bl	80042e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
/////////////////////  OLED EKRAN ///////////////////////////////////
SSD1306_Init();  // initialise
 8003478:	f001 fe52 	bl	8005120 <SSD1306_Init>
////// DS18B20 /////////////////////////////////
  HAL_TIM_Base_Start(&htim5);
 800347c:	48b9      	ldr	r0, [pc, #740]	; (8003764 <main+0x324>)
 800347e:	f005 ff1b 	bl	80092b8 <HAL_TIM_Base_Start>
  ///////////////////////////// BME280 ////////////////////////////////
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8003482:	2304      	movs	r3, #4
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2300      	movs	r3, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2303      	movs	r3, #3
 800348c:	2201      	movs	r2, #1
 800348e:	2105      	movs	r1, #5
 8003490:	2002      	movs	r0, #2
 8003492:	f7fd feeb 	bl	800126c <BME280_Config>
  ///////////////////////////////////////////////////////////////////
  HAL_Delay (500);
 8003496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800349a:	f002 fd39 	bl	8005f10 <HAL_Delay>
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  HAL_TIM_Base_Start_IT(&htim2);
 800349e:	48b2      	ldr	r0, [pc, #712]	; (8003768 <main+0x328>)
 80034a0:	f005 ff64 	bl	800936c <HAL_TIM_Base_Start_IT>
  ///  GNSS  ///////////////////////////////////////////////////////////////////////////////////////////////
  lwgps_init(&gps);
 80034a4:	48b1      	ldr	r0, [pc, #708]	; (800376c <main+0x32c>)
 80034a6:	f7ff fd7b 	bl	8002fa0 <lwgps_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80034aa:	2201      	movs	r2, #1
 80034ac:	49b0      	ldr	r1, [pc, #704]	; (8003770 <main+0x330>)
 80034ae:	48b1      	ldr	r0, [pc, #708]	; (8003774 <main+0x334>)
 80034b0:	f006 fb9f 	bl	8009bf2 <HAL_UART_Receive_IT>
  ///////////////////////////////////////////////////////
  // Init
     max30102_init(&max30102, &hi2c1);
 80034b4:	49b0      	ldr	r1, [pc, #704]	; (8003778 <main+0x338>)
 80034b6:	48b1      	ldr	r0, [pc, #708]	; (800377c <main+0x33c>)
 80034b8:	f001 faef 	bl	8004a9a <max30102_init>

     max30102_reset(&max30102);  //Sensör sifirlanir
 80034bc:	48af      	ldr	r0, [pc, #700]	; (800377c <main+0x33c>)
 80034be:	f001 fb63 	bl	8004b88 <max30102_reset>
     max30102_clear_fifo(&max30102);
 80034c2:	48ae      	ldr	r0, [pc, #696]	; (800377c <main+0x33c>)
 80034c4:	f001 fd2a 	bl	8004f1c <max30102_clear_fifo>

     max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7); //fifo ayarları yapılır
 80034c8:	2307      	movs	r3, #7
 80034ca:	2201      	movs	r2, #1
 80034cc:	2103      	movs	r1, #3
 80034ce:	48ab      	ldr	r0, [pc, #684]	; (800377c <main+0x33c>)
 80034d0:	f001 fcea 	bl	8004ea8 <max30102_set_fifo_config>

     // Sensor ayarları
     max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80034d4:	2101      	movs	r1, #1
 80034d6:	48a9      	ldr	r0, [pc, #676]	; (800377c <main+0x33c>)
 80034d8:	f001 fc4d 	bl	8004d76 <max30102_set_led_pulse_width>
     max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 80034dc:	2100      	movs	r1, #0
 80034de:	48a7      	ldr	r0, [pc, #668]	; (800377c <main+0x33c>)
 80034e0:	f001 fc6c 	bl	8004dbc <max30102_set_adc_resolution>
     max30102_set_sampling_rate(&max30102, max30102_sr_800);
 80034e4:	2104      	movs	r1, #4
 80034e6:	48a5      	ldr	r0, [pc, #660]	; (800377c <main+0x33c>)
 80034e8:	f001 fc26 	bl	8004d38 <max30102_set_sampling_rate>
     max30102_set_led_current_1(&max30102, 6.2);
 80034ec:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 8003780 <main+0x340>
 80034f0:	48a2      	ldr	r0, [pc, #648]	; (800377c <main+0x33c>)
 80034f2:	f001 fc89 	bl	8004e08 <max30102_set_led_current_1>
     max30102_set_led_current_2(&max30102, 6.2);
 80034f6:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8003780 <main+0x340>
 80034fa:	48a0      	ldr	r0, [pc, #640]	; (800377c <main+0x33c>)
 80034fc:	f001 fcac 	bl	8004e58 <max30102_set_led_current_2>


     max30102_set_mode(&max30102, max30102_spo2);// SpO2 moduna giriş
 8003500:	2103      	movs	r1, #3
 8003502:	489e      	ldr	r0, [pc, #632]	; (800377c <main+0x33c>)
 8003504:	f001 fbf2 	bl	8004cec <max30102_set_mode>
     max30102_set_a_full(&max30102, 1);//FIFO_A_FULL kesintisini etkinleştirilir
 8003508:	2101      	movs	r1, #1
 800350a:	489c      	ldr	r0, [pc, #624]	; (800377c <main+0x33c>)
 800350c:	f001 fb4d 	bl	8004baa <max30102_set_a_full>

     max30102_set_die_temp_en(&max30102, 1);//Çip sıcaklığı ölçümünü etkinleştirilir
 8003510:	2101      	movs	r1, #1
 8003512:	489a      	ldr	r0, [pc, #616]	; (800377c <main+0x33c>)
 8003514:	f001 fb89 	bl	8004c2a <max30102_set_die_temp_en>
     max30102_set_die_temp_rdy(&max30102, 1);//DIE_TEMP_RDY kesmesini etkinleştirilir
 8003518:	2101      	movs	r1, #1
 800351a:	4898      	ldr	r0, [pc, #608]	; (800377c <main+0x33c>)
 800351c:	f001 fb6d 	bl	8004bfa <max30102_set_die_temp_rdy>

     uint8_t en_reg[2] = {0};
 8003520:	2300      	movs	r3, #0
 8003522:	84bb      	strh	r3, [r7, #36]	; 0x24
     max30102_read(&max30102, 0x00, en_reg, 1);
 8003524:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003528:	2301      	movs	r3, #1
 800352a:	2100      	movs	r1, #0
 800352c:	4893      	ldr	r0, [pc, #588]	; (800377c <main+0x33c>)
 800352e:	f001 fb06 	bl	8004b3e <max30102_read>
//         	 }
//
//          }
// Program baslamadan button(exti) degiskenlerini

       	 SSD1306_Clear();               //bir kere sıfırla
 8003532:	f002 f81a 	bl	800556a <SSD1306_Clear>
     	 HAL_Delay(1500);          //button2:   yazma_durum 3 almasın direkt diye  BU SATIRI MUTLAKA AC !!!!! Yoksa buga girer
 8003536:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800353a:	f002 fce9 	bl	8005f10 <HAL_Delay>
     	 button1=0;
 800353e:	4b91      	ldr	r3, [pc, #580]	; (8003784 <main+0x344>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
     	 button2=0;
 8003544:	4b90      	ldr	r3, [pc, #576]	; (8003788 <main+0x348>)
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
     	 yazma_durum=0;
 800354a:	4b90      	ldr	r3, [pc, #576]	; (800378c <main+0x34c>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
     	 kosu_ornekleme_periyot=0;
 8003550:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <main+0x350>)
 8003552:	2200      	movs	r2, #0
 8003554:	801a      	strh	r2, [r3, #0]
     	 kosu_suresi_sayac=0;
 8003556:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <main+0x354>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
         //////////////////////////////////////////////
         Moving_Average_Init(&filterStructbpm); // bpm filtre degerleri temizleme
 800355c:	488e      	ldr	r0, [pc, #568]	; (8003798 <main+0x358>)
 800355e:	f001 fd79 	bl	8005054 <Moving_Average_Init>
         Moving_Average_Init(&filterStructbpm2);
 8003562:	488e      	ldr	r0, [pc, #568]	; (800379c <main+0x35c>)
 8003564:	f001 fd76 	bl	8005054 <Moving_Average_Init>
         Moving_Average_Init(&filterStructbpm3);
 8003568:	488d      	ldr	r0, [pc, #564]	; (80037a0 <main+0x360>)
 800356a:	f001 fd73 	bl	8005054 <Moving_Average_Init>
         ///////////// BME 280 ////////////////////////  Acilisda bir kerelik hesaplayacak(nem,ortam sicakligi,atmosfer bas)
         BME280_Measure();
 800356e:	f7fe fb17 	bl	8001ba0 <BME280_Measure>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /////////////////// oksimetre ////////////////
	  if (max30102_has_interrupt(&max30102))
 8003572:	4882      	ldr	r0, [pc, #520]	; (800377c <main+0x33c>)
 8003574:	f001 fb7f 	bl	8004c76 <max30102_has_interrupt>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <main+0x144>
	  	  // FIFO'yu okumak için kesme işleyicisini çalıştır
	  	  max30102_interrupt_handler(&max30102);
 800357e:	487f      	ldr	r0, [pc, #508]	; (800377c <main+0x33c>)
 8003580:	f001 fb86 	bl	8004c90 <max30102_interrupt_handler>
	  /////////////////////   DS18B20    //////////////////
	  DS18B20_Start ();
 8003584:	f7ff fea8 	bl	80032d8 <DS18B20_Start>
	  HAL_Delay (1);
 8003588:	2001      	movs	r0, #1
 800358a:	f002 fcc1 	bl	8005f10 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 800358e:	20cc      	movs	r0, #204	; 0xcc
 8003590:	f7ff fed2 	bl	8003338 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8003594:	2044      	movs	r0, #68	; 0x44
 8003596:	f7ff fecf 	bl	8003338 <DS18B20_Write>

	  DS18B20_Start ();
 800359a:	f7ff fe9d 	bl	80032d8 <DS18B20_Start>
	  HAL_Delay(1);
 800359e:	2001      	movs	r0, #1
 80035a0:	f002 fcb6 	bl	8005f10 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 80035a4:	20cc      	movs	r0, #204	; 0xcc
 80035a6:	f7ff fec7 	bl	8003338 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 80035aa:	20be      	movs	r0, #190	; 0xbe
 80035ac:	f7ff fec4 	bl	8003338 <DS18B20_Write>

	  Temp_byte1 = DS18B20_Read();
 80035b0:	f7ff ff08 	bl	80033c4 <DS18B20_Read>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <main+0x364>)
 80035ba:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DS18B20_Read();
 80035bc:	f7ff ff02 	bl	80033c4 <DS18B20_Read>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b78      	ldr	r3, [pc, #480]	; (80037a8 <main+0x368>)
 80035c6:	701a      	strb	r2, [r3, #0]
	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 80035c8:	4b77      	ldr	r3, [pc, #476]	; (80037a8 <main+0x368>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	4b74      	ldr	r3, [pc, #464]	; (80037a4 <main+0x364>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b21b      	sxth	r3, r3
 80035d6:	4313      	orrs	r3, r2
 80035d8:	b21b      	sxth	r3, r3
 80035da:	b29a      	uxth	r2, r3
 80035dc:	4b73      	ldr	r3, [pc, #460]	; (80037ac <main+0x36c>)
 80035de:	801a      	strh	r2, [r3, #0]
	  Temperature_DS = (float)TEMP/16;   //Sporcunun vucüt sıcaklığını ölcer
 80035e0:	4b72      	ldr	r3, [pc, #456]	; (80037ac <main+0x36c>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ec:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80035f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f4:	4b6e      	ldr	r3, [pc, #440]	; (80037b0 <main+0x370>)
 80035f6:	edc3 7a00 	vstr	s15, [r3]
	  /////////////////////////////////////////

	  if(yazma_durum==1) //Yazma baslangic adimlari
 80035fa:	4b64      	ldr	r3, [pc, #400]	; (800378c <main+0x34c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	f040 8090 	bne.w	8003724 <main+0x2e4>
	  	  {
		  BME280_Measure(); // Ilk iki satir icin init haric,bir kez daha ölc(Ölctügü garanti olsun)
 8003604:	f7fe facc 	bl	8001ba0 <BME280_Measure>

		  f_mount(&fs, "", 0);    //Sd karti Mount et
 8003608:	2200      	movs	r2, #0
 800360a:	496a      	ldr	r1, [pc, #424]	; (80037b4 <main+0x374>)
 800360c:	486a      	ldr	r0, [pc, #424]	; (80037b8 <main+0x378>)
 800360e:	f009 fc69 	bl	800cee4 <f_mount>
		  sprintf (dosya_adi,"%d-%d-%d--%d-%d-%d.txt",gps.hours,gps.minutes,gps.seconds,gps.date,gps.month,gps.year); //Degiskenleri cek
 8003612:	4b56      	ldr	r3, [pc, #344]	; (800376c <main+0x32c>)
 8003614:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003618:	461c      	mov	r4, r3
 800361a:	4b54      	ldr	r3, [pc, #336]	; (800376c <main+0x32c>)
 800361c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003620:	461d      	mov	r5, r3
 8003622:	4b52      	ldr	r3, [pc, #328]	; (800376c <main+0x32c>)
 8003624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003628:	461a      	mov	r2, r3
 800362a:	4b50      	ldr	r3, [pc, #320]	; (800376c <main+0x32c>)
 800362c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003630:	4619      	mov	r1, r3
 8003632:	4b4e      	ldr	r3, [pc, #312]	; (800376c <main+0x32c>)
 8003634:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003638:	4618      	mov	r0, r3
 800363a:	4b4c      	ldr	r3, [pc, #304]	; (800376c <main+0x32c>)
 800363c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003640:	9303      	str	r3, [sp, #12]
 8003642:	9002      	str	r0, [sp, #8]
 8003644:	9101      	str	r1, [sp, #4]
 8003646:	9200      	str	r2, [sp, #0]
 8003648:	462b      	mov	r3, r5
 800364a:	4622      	mov	r2, r4
 800364c:	495b      	ldr	r1, [pc, #364]	; (80037bc <main+0x37c>)
 800364e:	485c      	ldr	r0, [pc, #368]	; (80037c0 <main+0x380>)
 8003650:	f00b fa22 	bl	800ea98 <siprintf>
		  f_open(&fil, dosya_adi, FA_OPEN_ALWAYS | FA_WRITE | FA_READ); //Antreman tarihine,zamanina uygun isimle dosya olustur
 8003654:	2213      	movs	r2, #19
 8003656:	495a      	ldr	r1, [pc, #360]	; (80037c0 <main+0x380>)
 8003658:	485a      	ldr	r0, [pc, #360]	; (80037c4 <main+0x384>)
 800365a:	f009 fc89 	bl	800cf70 <f_open>
		  f_lseek(&fil, f_size(&fil));  //Son satira git
 800365e:	4b59      	ldr	r3, [pc, #356]	; (80037c4 <main+0x384>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	4619      	mov	r1, r3
 8003664:	4857      	ldr	r0, [pc, #348]	; (80037c4 <main+0x384>)
 8003666:	f00a f88b 	bl	800d780 <f_lseek>
		  sprintf (yazi,"Ortam_Sic(C),Nem(RH),Atmosfer_Bas(kPa),Kilo,Yas\n");
 800366a:	4957      	ldr	r1, [pc, #348]	; (80037c8 <main+0x388>)
 800366c:	4857      	ldr	r0, [pc, #348]	; (80037cc <main+0x38c>)
 800366e:	f00b fa13 	bl	800ea98 <siprintf>
		  f_puts(yazi , &fil);  //yazdir
 8003672:	4954      	ldr	r1, [pc, #336]	; (80037c4 <main+0x384>)
 8003674:	4855      	ldr	r0, [pc, #340]	; (80037cc <main+0x38c>)
 8003676:	f00a fb1e 	bl	800dcb6 <f_puts>
		  sprintf (yazi,"%.0f,%.0f,%.1f,%.0f,%.0f\n",Temperature,Humidity,Pressure/1000,kilo,yas);
 800367a:	4b55      	ldr	r3, [pc, #340]	; (80037d0 <main+0x390>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff6a 	bl	8000558 <__aeabi_f2d>
 8003684:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003688:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <main+0x394>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc ff63 	bl	8000558 <__aeabi_f2d>
 8003692:	4604      	mov	r4, r0
 8003694:	460d      	mov	r5, r1
 8003696:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <main+0x398>)
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80037dc <main+0x39c>
 80036a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036a4:	ee16 0a90 	vmov	r0, s13
 80036a8:	f7fc ff56 	bl	8000558 <__aeabi_f2d>
 80036ac:	4680      	mov	r8, r0
 80036ae:	4689      	mov	r9, r1
 80036b0:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <main+0x3a0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fc ff4f 	bl	8000558 <__aeabi_f2d>
 80036ba:	4682      	mov	sl, r0
 80036bc:	468b      	mov	fp, r1
 80036be:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <main+0x3a4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc ff48 	bl	8000558 <__aeabi_f2d>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80036d0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80036d4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80036d8:	e9cd 4500 	strd	r4, r5, [sp]
 80036dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e0:	4941      	ldr	r1, [pc, #260]	; (80037e8 <main+0x3a8>)
 80036e2:	483a      	ldr	r0, [pc, #232]	; (80037cc <main+0x38c>)
 80036e4:	f00b f9d8 	bl	800ea98 <siprintf>
		  f_puts(yazi , &fil);  //yazdir
 80036e8:	4936      	ldr	r1, [pc, #216]	; (80037c4 <main+0x384>)
 80036ea:	4838      	ldr	r0, [pc, #224]	; (80037cc <main+0x38c>)
 80036ec:	f00a fae3 	bl	800dcb6 <f_puts>
		  sprintf (yazi,"\nSatir,Zam(ms),Enlem,Boylam,Al_Yol(m),V(m/s),Ivme(m/s^2),VS(C),Nabiz(bpm)\n");
 80036f0:	493e      	ldr	r1, [pc, #248]	; (80037ec <main+0x3ac>)
 80036f2:	4836      	ldr	r0, [pc, #216]	; (80037cc <main+0x38c>)
 80036f4:	f00b f9d0 	bl	800ea98 <siprintf>
		  f_puts(yazi , &fil);  //yazdir
 80036f8:	4932      	ldr	r1, [pc, #200]	; (80037c4 <main+0x384>)
 80036fa:	4834      	ldr	r0, [pc, #208]	; (80037cc <main+0x38c>)
 80036fc:	f00a fadb 	bl	800dcb6 <f_puts>
		  kosu_suresi_sayac=0;       //0 dan baslasin
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <main+0x354>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
		  kosu_ornekleme_periyot=0;  //0 dan baslasin
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <main+0x350>)
 8003708:	2200      	movs	r2, #0
 800370a:	801a      	strh	r2, [r3, #0]
		  Moving_Average_Init(&filterStruct);   //Filtre Init (Filtrelenmis degerleri sıfırlama)
 800370c:	4838      	ldr	r0, [pc, #224]	; (80037f0 <main+0x3b0>)
 800370e:	f001 fca1 	bl	8005054 <Moving_Average_Init>
		  Moving_Average_Init(&filterStruct2);  //Kayıt ikinci kere çalıştırılsa diye
 8003712:	4838      	ldr	r0, [pc, #224]	; (80037f4 <main+0x3b4>)
 8003714:	f001 fc9e 	bl	8005054 <Moving_Average_Init>
		  Moving_Average_Init(&filterStruct3);
 8003718:	4837      	ldr	r0, [pc, #220]	; (80037f8 <main+0x3b8>)
 800371a:	f001 fc9b 	bl	8005054 <Moving_Average_Init>
		  yazma_durum=2;  //2. Yazma durumuna gec
 800371e:	4b1b      	ldr	r3, [pc, #108]	; (800378c <main+0x34c>)
 8003720:	2202      	movs	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
	  	  }
//////////////////////////////////////////////////////////////////////////////////////////////
	  if(yazma_durum==2)
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <main+0x34c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b02      	cmp	r3, #2
 800372a:	f040 8235 	bne.w	8003b98 <main+0x758>
	  	  {
		  //indx=0 hala burada
		  if(indx==0 && gps.latitude != 0 && gps.longitude !=0)  //gps_baslangic_ornek_alma tek seferlik baslangic konumundan ornek almasini sagliyor.
 800372e:	4b33      	ldr	r3, [pc, #204]	; (80037fc <main+0x3bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d17e      	bne.n	8003834 <main+0x3f4>
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <main+0x32c>)
 8003738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	f7fd f9c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d172      	bne.n	8003834 <main+0x3f4>
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <main+0x32c>)
 8003750:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	f7fd f9bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8003760:	e04e      	b.n	8003800 <main+0x3c0>
 8003762:	bf00      	nop
 8003764:	20000404 	.word	0x20000404
 8003768:	200003bc 	.word	0x200003bc
 800376c:	20000770 	.word	0x20000770
 8003770:	200008a1 	.word	0x200008a1
 8003774:	20000490 	.word	0x20000490
 8003778:	20000268 	.word	0x20000268
 800377c:	20000668 	.word	0x20000668
 8003780:	40c66666 	.word	0x40c66666
 8003784:	20000664 	.word	0x20000664
 8003788:	20000665 	.word	0x20000665
 800378c:	2000063c 	.word	0x2000063c
 8003790:	20000640 	.word	0x20000640
 8003794:	20000644 	.word	0x20000644
 8003798:	2000059c 	.word	0x2000059c
 800379c:	200005c8 	.word	0x200005c8
 80037a0:	200005f4 	.word	0x200005f4
 80037a4:	200009e9 	.word	0x200009e9
 80037a8:	200009ea 	.word	0x200009ea
 80037ac:	200009ec 	.word	0x200009ec
 80037b0:	200009e4 	.word	0x200009e4
 80037b4:	08014aa8 	.word	0x08014aa8
 80037b8:	200009f0 	.word	0x200009f0
 80037bc:	08014aac 	.word	0x08014aac
 80037c0:	20000970 	.word	0x20000970
 80037c4:	20001a28 	.word	0x20001a28
 80037c8:	08014ac4 	.word	0x08014ac4
 80037cc:	200008a8 	.word	0x200008a8
 80037d0:	200009d8 	.word	0x200009d8
 80037d4:	200009e0 	.word	0x200009e0
 80037d8:	200009dc 	.word	0x200009dc
 80037dc:	447a0000 	.word	0x447a0000
 80037e0:	2000000c 	.word	0x2000000c
 80037e4:	20000010 	.word	0x20000010
 80037e8:	08014af8 	.word	0x08014af8
 80037ec:	08014b14 	.word	0x08014b14
 80037f0:	200004f4 	.word	0x200004f4
 80037f4:	20000520 	.word	0x20000520
 80037f8:	2000054c 	.word	0x2000054c
 80037fc:	200008a4 	.word	0x200008a4
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <main+0x3f4>
		  	  	  	  {
		  		  	  enlem_baslangic=gps.latitude;
 8003806:	4bad      	ldr	r3, [pc, #692]	; (8003abc <main+0x67c>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	f7fd f9f2 	bl	8000bf8 <__aeabi_d2f>
 8003814:	4603      	mov	r3, r0
 8003816:	4aaa      	ldr	r2, [pc, #680]	; (8003ac0 <main+0x680>)
 8003818:	6013      	str	r3, [r2, #0]
		  		  	  boylam_baslangic=gps.longitude;
 800381a:	4ba8      	ldr	r3, [pc, #672]	; (8003abc <main+0x67c>)
 800381c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	f7fd f9e8 	bl	8000bf8 <__aeabi_d2f>
 8003828:	4603      	mov	r3, r0
 800382a:	4aa6      	ldr	r2, [pc, #664]	; (8003ac4 <main+0x684>)
 800382c:	6013      	str	r3, [r2, #0]
		  		  	  indx=1;  //gps
 800382e:	4ba6      	ldr	r3, [pc, #664]	; (8003ac8 <main+0x688>)
 8003830:	2201      	movs	r2, #1
 8003832:	601a      	str	r2, [r3, #0]
		  		  	  }
		  distance = CalcGPSDistance(gps.latitude, gps.longitude,enlem_baslangic,boylam_baslangic);  //Yazma durum 2 içinde surekli alınan yol hesabı yapacak
 8003834:	4ba1      	ldr	r3, [pc, #644]	; (8003abc <main+0x67c>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f7fd f9db 	bl	8000bf8 <__aeabi_d2f>
 8003842:	4604      	mov	r4, r0
 8003844:	4b9d      	ldr	r3, [pc, #628]	; (8003abc <main+0x67c>)
 8003846:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	f7fd f9d3 	bl	8000bf8 <__aeabi_d2f>
 8003852:	4602      	mov	r2, r0
 8003854:	4b9a      	ldr	r3, [pc, #616]	; (8003ac0 <main+0x680>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	4b9a      	ldr	r3, [pc, #616]	; (8003ac4 <main+0x684>)
 800385c:	ed93 7a00 	vldr	s14, [r3]
 8003860:	eef0 1a47 	vmov.f32	s3, s14
 8003864:	eeb0 1a67 	vmov.f32	s2, s15
 8003868:	ee00 2a90 	vmov	s1, r2
 800386c:	ee00 4a10 	vmov	s0, r4
 8003870:	f000 ff8e 	bl	8004790 <CalcGPSDistance>
 8003874:	eef0 7a40 	vmov.f32	s15, s0
 8003878:	4b94      	ldr	r3, [pc, #592]	; (8003acc <main+0x68c>)
 800387a:	edc3 7a00 	vstr	s15, [r3]
		  // indx=1
		  if(indx==1) // ilk satiri yazsin diye(başlangıç konumundaki değerler)
 800387e:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <main+0x688>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d146      	bne.n	8003914 <main+0x4d4>
		  {
			  sprintf (yazi,"%d,%d,%.6f,%.6f,%.3f,%.3f,%.3f,%.2f,%d\n",indx,kosu_suresi_sayac,gps.latitude,gps.longitude,distance_filtreli,v_filtreli_ikinci_adim,ivmefiltered,Temperature_DS,nabiz_filtered3);
 8003886:	4b90      	ldr	r3, [pc, #576]	; (8003ac8 <main+0x688>)
 8003888:	681e      	ldr	r6, [r3, #0]
 800388a:	4b91      	ldr	r3, [pc, #580]	; (8003ad0 <main+0x690>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	4b8a      	ldr	r3, [pc, #552]	; (8003abc <main+0x67c>)
 8003892:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003896:	4b89      	ldr	r3, [pc, #548]	; (8003abc <main+0x67c>)
 8003898:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800389c:	4b8d      	ldr	r3, [pc, #564]	; (8003ad4 <main+0x694>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fe59 	bl	8000558 <__aeabi_f2d>
 80038a6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80038aa:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <main+0x698>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fc fe52 	bl	8000558 <__aeabi_f2d>
 80038b4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80038b8:	4b88      	ldr	r3, [pc, #544]	; (8003adc <main+0x69c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fc fe4b 	bl	8000558 <__aeabi_f2d>
 80038c2:	4682      	mov	sl, r0
 80038c4:	468b      	mov	fp, r1
 80038c6:	4b86      	ldr	r3, [pc, #536]	; (8003ae0 <main+0x6a0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fe44 	bl	8000558 <__aeabi_f2d>
 80038d0:	4b84      	ldr	r3, [pc, #528]	; (8003ae4 <main+0x6a4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	930c      	str	r3, [sp, #48]	; 0x30
 80038d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80038da:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80038de:	ed97 7b02 	vldr	d7, [r7, #8]
 80038e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80038e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80038ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80038ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80038f2:	e9cd 4500 	strd	r4, r5, [sp]
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4632      	mov	r2, r6
 80038fa:	497b      	ldr	r1, [pc, #492]	; (8003ae8 <main+0x6a8>)
 80038fc:	487b      	ldr	r0, [pc, #492]	; (8003aec <main+0x6ac>)
 80038fe:	f00b f8cb 	bl	800ea98 <siprintf>
			  f_puts(yazi , &fil);  //yazdir
 8003902:	497b      	ldr	r1, [pc, #492]	; (8003af0 <main+0x6b0>)
 8003904:	4879      	ldr	r0, [pc, #484]	; (8003aec <main+0x6ac>)
 8003906:	f00a f9d6 	bl	800dcb6 <f_puts>
			  indx++;
 800390a:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <main+0x688>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3301      	adds	r3, #1
 8003910:	4a6d      	ldr	r2, [pc, #436]	; (8003ac8 <main+0x688>)
 8003912:	6013      	str	r3, [r2, #0]
		  }
          //indx >1
		  if(kosu_ornekleme_periyot>=400 && distance>distance_old && indx>1)  //Sadece alınan yolda ilerleme varsa kaydedecek
 8003914:	4b77      	ldr	r3, [pc, #476]	; (8003af4 <main+0x6b4>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800391c:	f0c0 813c 	bcc.w	8003b98 <main+0x758>
 8003920:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <main+0x68c>)
 8003922:	ed93 7a00 	vldr	s14, [r3]
 8003926:	4b74      	ldr	r3, [pc, #464]	; (8003af8 <main+0x6b8>)
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	f340 8130 	ble.w	8003b98 <main+0x758>
 8003938:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <main+0x688>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	f340 812b 	ble.w	8003b98 <main+0x758>
		  		  {

			  	  distance_filtreli=(distance+distance_filtreli)/2;
 8003942:	4b62      	ldr	r3, [pc, #392]	; (8003acc <main+0x68c>)
 8003944:	ed93 7a00 	vldr	s14, [r3]
 8003948:	4b62      	ldr	r3, [pc, #392]	; (8003ad4 <main+0x694>)
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003952:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800395a:	4b5e      	ldr	r3, [pc, #376]	; (8003ad4 <main+0x694>)
 800395c:	edc3 7a00 	vstr	s15, [r3]

			  	  v_filtresiz=((1000*(distance-distance_old))/kosu_ornekleme_periyot); //1000 le carpmayı unutma
 8003960:	4b5a      	ldr	r3, [pc, #360]	; (8003acc <main+0x68c>)
 8003962:	ed93 7a00 	vldr	s14, [r3]
 8003966:	4b64      	ldr	r3, [pc, #400]	; (8003af8 <main+0x6b8>)
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003970:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003afc <main+0x6bc>
 8003974:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003978:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <main+0x6b4>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003988:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <main+0x6c0>)
 800398a:	edc3 7a00 	vstr	s15, [r3]
			  	  v_filtreli_birinci_adim=Moving_Average_Compute(v_filtresiz, &filterStruct); //Bir kere filtreleme
 800398e:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <main+0x6c0>)
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	485b      	ldr	r0, [pc, #364]	; (8003b04 <main+0x6c4>)
 8003996:	eeb0 0a67 	vmov.f32	s0, s15
 800399a:	f001 fb7d 	bl	8005098 <Moving_Average_Compute>
 800399e:	eef0 7a40 	vmov.f32	s15, s0
 80039a2:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <main+0x6c8>)
 80039a4:	edc3 7a00 	vstr	s15, [r3]
			  	  v_filtreli_ikinci_adim=Moving_Average_Compute(v_filtreli_birinci_adim, &filterStruct2);//İki kere filtreleme
 80039a8:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <main+0x6c8>)
 80039aa:	edd3 7a00 	vldr	s15, [r3]
 80039ae:	4857      	ldr	r0, [pc, #348]	; (8003b0c <main+0x6cc>)
 80039b0:	eeb0 0a67 	vmov.f32	s0, s15
 80039b4:	f001 fb70 	bl	8005098 <Moving_Average_Compute>
 80039b8:	eef0 7a40 	vmov.f32	s15, s0
 80039bc:	4b46      	ldr	r3, [pc, #280]	; (8003ad8 <main+0x698>)
 80039be:	edc3 7a00 	vstr	s15, [r3]

			  	  v_filtreli_ucuncu_adim_yeni=Moving_Average_Compute(v_filtreli_ikinci_adim, &filterStruct3);//Üç kere filtreleme(ivme hesabı için,hız kaydı için değil)
 80039c2:	4b45      	ldr	r3, [pc, #276]	; (8003ad8 <main+0x698>)
 80039c4:	edd3 7a00 	vldr	s15, [r3]
 80039c8:	4851      	ldr	r0, [pc, #324]	; (8003b10 <main+0x6d0>)
 80039ca:	eeb0 0a67 	vmov.f32	s0, s15
 80039ce:	f001 fb63 	bl	8005098 <Moving_Average_Compute>
 80039d2:	eef0 7a40 	vmov.f32	s15, s0
 80039d6:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <main+0x6d4>)
 80039d8:	edc3 7a00 	vstr	s15, [r3]

			  	  ivmeyeni=((v_filtreli_ucuncu_adim_yeni - v_filtreli_ucuncu_adim_eski) * 1000)/kosu_ornekleme_periyot;//ivme hesaplama
 80039dc:	4b4d      	ldr	r3, [pc, #308]	; (8003b14 <main+0x6d4>)
 80039de:	ed93 7a00 	vldr	s14, [r3]
 80039e2:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <main+0x6d8>)
 80039e4:	edd3 7a00 	vldr	s15, [r3]
 80039e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ec:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003afc <main+0x6bc>
 80039f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80039f4:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <main+0x6b4>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	ee07 3a90 	vmov	s15, r3
 80039fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a04:	4b45      	ldr	r3, [pc, #276]	; (8003b1c <main+0x6dc>)
 8003a06:	edc3 7a00 	vstr	s15, [r3]
			  	  ivmefiltered=(ivmeyeni+ivmeeski)/2;//İvme filtreleme
 8003a0a:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <main+0x6dc>)
 8003a0c:	ed93 7a00 	vldr	s14, [r3]
 8003a10:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <main+0x6e0>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <main+0x69c>)
 8003a24:	edc3 7a00 	vstr	s15, [r3]

			  	  sprintf (yazi,"%d,%d,%.6f,%.6f,%.3f,%.3f,%.3f,%.2f,%d\n",indx,kosu_suresi_sayac,gps.latitude,gps.longitude,distance_filtreli,v_filtreli_ikinci_adim,ivmefiltered,Temperature_DS,nabiz_filtered3);
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <main+0x688>)
 8003a2a:	681e      	ldr	r6, [r3, #0]
 8003a2c:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <main+0x690>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <main+0x67c>)
 8003a34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a38:	4b20      	ldr	r3, [pc, #128]	; (8003abc <main+0x67c>)
 8003a3a:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8003a3e:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <main+0x694>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fc fd88 	bl	8000558 <__aeabi_f2d>
 8003a48:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <main+0x698>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fd81 	bl	8000558 <__aeabi_f2d>
 8003a56:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <main+0x69c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fd7a 	bl	8000558 <__aeabi_f2d>
 8003a64:	4682      	mov	sl, r0
 8003a66:	468b      	mov	fp, r1
 8003a68:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <main+0x6a0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fc fd73 	bl	8000558 <__aeabi_f2d>
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <main+0x6a4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	930c      	str	r3, [sp, #48]	; 0x30
 8003a78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a7c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003a80:	ed97 7b02 	vldr	d7, [r7, #8]
 8003a84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003a88:	ed97 7b04 	vldr	d7, [r7, #16]
 8003a8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003a90:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003a94:	e9cd 4500 	strd	r4, r5, [sp]
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	4632      	mov	r2, r6
 8003a9c:	4912      	ldr	r1, [pc, #72]	; (8003ae8 <main+0x6a8>)
 8003a9e:	4813      	ldr	r0, [pc, #76]	; (8003aec <main+0x6ac>)
 8003aa0:	f00a fffa 	bl	800ea98 <siprintf>
			  	  f_puts(yazi , &fil);  //yazdir
 8003aa4:	4912      	ldr	r1, [pc, #72]	; (8003af0 <main+0x6b0>)
 8003aa6:	4811      	ldr	r0, [pc, #68]	; (8003aec <main+0x6ac>)
 8003aa8:	f00a f905 	bl	800dcb6 <f_puts>
			  	  indx++;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <main+0x688>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <main+0x688>)
 8003ab4:	6013      	str	r3, [r2, #0]
			  	  distance_old=distance;
 8003ab6:	4b05      	ldr	r3, [pc, #20]	; (8003acc <main+0x68c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	e033      	b.n	8003b24 <main+0x6e4>
 8003abc:	20000770 	.word	0x20000770
 8003ac0:	20000584 	.word	0x20000584
 8003ac4:	20000588 	.word	0x20000588
 8003ac8:	200008a4 	.word	0x200008a4
 8003acc:	200004d4 	.word	0x200004d4
 8003ad0:	20000644 	.word	0x20000644
 8003ad4:	200004dc 	.word	0x200004dc
 8003ad8:	200004e8 	.word	0x200004e8
 8003adc:	20000580 	.word	0x20000580
 8003ae0:	200009e4 	.word	0x200009e4
 8003ae4:	20000598 	.word	0x20000598
 8003ae8:	08014b60 	.word	0x08014b60
 8003aec:	200008a8 	.word	0x200008a8
 8003af0:	20001a28 	.word	0x20001a28
 8003af4:	20000640 	.word	0x20000640
 8003af8:	200004d8 	.word	0x200004d8
 8003afc:	447a0000 	.word	0x447a0000
 8003b00:	200004e0 	.word	0x200004e0
 8003b04:	200004f4 	.word	0x200004f4
 8003b08:	200004e4 	.word	0x200004e4
 8003b0c:	20000520 	.word	0x20000520
 8003b10:	2000054c 	.word	0x2000054c
 8003b14:	200004ec 	.word	0x200004ec
 8003b18:	200004f0 	.word	0x200004f0
 8003b1c:	20000578 	.word	0x20000578
 8003b20:	2000057c 	.word	0x2000057c
 8003b24:	4ab2      	ldr	r2, [pc, #712]	; (8003df0 <main+0x9b0>)
 8003b26:	6013      	str	r3, [r2, #0]
			  	  v_filtreli_ucuncu_adim_eski = v_filtreli_ucuncu_adim_yeni;
 8003b28:	4bb2      	ldr	r3, [pc, #712]	; (8003df4 <main+0x9b4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4ab2      	ldr	r2, [pc, #712]	; (8003df8 <main+0x9b8>)
 8003b2e:	6013      	str	r3, [r2, #0]
			  	  ivmeeski=ivmeyeni;
 8003b30:	4bb2      	ldr	r3, [pc, #712]	; (8003dfc <main+0x9bc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4ab2      	ldr	r2, [pc, #712]	; (8003e00 <main+0x9c0>)
 8003b36:	6013      	str	r3, [r2, #0]
			  	//////////////////////////  İstatistik Kayitlar       /////////////////////////////////
			  				  	  ort_hiz=ort_hiz+v_filtreli_ikinci_adim;
 8003b38:	4bb2      	ldr	r3, [pc, #712]	; (8003e04 <main+0x9c4>)
 8003b3a:	ed93 7a00 	vldr	s14, [r3]
 8003b3e:	4bb2      	ldr	r3, [pc, #712]	; (8003e08 <main+0x9c8>)
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b48:	4bae      	ldr	r3, [pc, #696]	; (8003e04 <main+0x9c4>)
 8003b4a:	edc3 7a00 	vstr	s15, [r3]
			  				  	  ort_nabiz=ort_nabiz+nabiz_filtered3;
 8003b4e:	4baf      	ldr	r3, [pc, #700]	; (8003e0c <main+0x9cc>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4baf      	ldr	r3, [pc, #700]	; (8003e10 <main+0x9d0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4413      	add	r3, r2
 8003b58:	4aac      	ldr	r2, [pc, #688]	; (8003e0c <main+0x9cc>)
 8003b5a:	6013      	str	r3, [r2, #0]

			  				  	  if(max_hiz<v_filtreli_ikinci_adim)
 8003b5c:	4bad      	ldr	r3, [pc, #692]	; (8003e14 <main+0x9d4>)
 8003b5e:	ed93 7a00 	vldr	s14, [r3]
 8003b62:	4ba9      	ldr	r3, [pc, #676]	; (8003e08 <main+0x9c8>)
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d50f      	bpl.n	8003b92 <main+0x752>
			  				  	  {
			  				  		max_hiz=v_filtreli_ikinci_adim;
 8003b72:	4ba5      	ldr	r3, [pc, #660]	; (8003e08 <main+0x9c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4aa7      	ldr	r2, [pc, #668]	; (8003e14 <main+0x9d4>)
 8003b78:	6013      	str	r3, [r2, #0]
			  				  		max_hiza_cikma_suresi=kosu_suresi_sayac;
 8003b7a:	4ba7      	ldr	r3, [pc, #668]	; (8003e18 <main+0x9d8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4aa7      	ldr	r2, [pc, #668]	; (8003e1c <main+0x9dc>)
 8003b80:	6013      	str	r3, [r2, #0]
			  				  		max_hiz_nabiz=nabiz_filtered3;
 8003b82:	4ba3      	ldr	r3, [pc, #652]	; (8003e10 <main+0x9d0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4aa6      	ldr	r2, [pc, #664]	; (8003e20 <main+0x9e0>)
 8003b88:	6013      	str	r3, [r2, #0]
			  				  	    max_hiz_VS=Temperature_DS;
 8003b8a:	4ba6      	ldr	r3, [pc, #664]	; (8003e24 <main+0x9e4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4aa6      	ldr	r2, [pc, #664]	; (8003e28 <main+0x9e8>)
 8003b90:	6013      	str	r3, [r2, #0]
			  				  	  }

			  	 //////////////////////////////////////////////////////////
			  	  kosu_ornekleme_periyot=0;
 8003b92:	4ba6      	ldr	r3, [pc, #664]	; (8003e2c <main+0x9ec>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	801a      	strh	r2, [r3, #0]
		  		  }
	  	  }  // yazma durum 2 nin

///////////////////////////////////  Yazma Durum 3   /////////////////////////////////////////////////////////////////
	  	  if(yazma_durum == 3 || distance_filtreli >= 100 || kosu_suresi_sayac > 240000 )  // Eger durma komutu gelirse(200 metre kosulursa) ya da  4 dakika sonunda otomatik(Ram'i doldurup donmasin diye)
 8003b98:	4ba5      	ldr	r3, [pc, #660]	; (8003e30 <main+0x9f0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d00f      	beq.n	8003bc0 <main+0x780>
 8003ba0:	4ba4      	ldr	r3, [pc, #656]	; (8003e34 <main+0x9f4>)
 8003ba2:	edd3 7a00 	vldr	s15, [r3]
 8003ba6:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8003e38 <main+0x9f8>
 8003baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	da05      	bge.n	8003bc0 <main+0x780>
 8003bb4:	4b98      	ldr	r3, [pc, #608]	; (8003e18 <main+0x9d8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4aa0      	ldr	r2, [pc, #640]	; (8003e3c <main+0x9fc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	f240 81b2 	bls.w	8003f24 <main+0xae4>
	  	  {                                                       //bitis icin veya koy alinan yol >= 100 metre ise yap

	  		  deniz_seviyesi_sure=(kosu_suresi_sayac*(1.03-(0.03*exp(-0.000125*gps.altitude))));
 8003bc0:	4b95      	ldr	r3, [pc, #596]	; (8003e18 <main+0x9d8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fca5 	bl	8000514 <__aeabi_ui2d>
 8003bca:	4604      	mov	r4, r0
 8003bcc:	460d      	mov	r5, r1
 8003bce:	4b9c      	ldr	r3, [pc, #624]	; (8003e40 <main+0xa00>)
 8003bd0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003bd4:	a37e      	add	r3, pc, #504	; (adr r3, 8003dd0 <main+0x990>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fd15 	bl	8000608 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	ec43 2b17 	vmov	d7, r2, r3
 8003be6:	eeb0 0a47 	vmov.f32	s0, s14
 8003bea:	eef0 0a67 	vmov.f32	s1, s15
 8003bee:	f00e fc9f 	bl	8012530 <exp>
 8003bf2:	ec51 0b10 	vmov	r0, r1, d0
 8003bf6:	a378      	add	r3, pc, #480	; (adr r3, 8003dd8 <main+0x998>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f7fc fd04 	bl	8000608 <__aeabi_dmul>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	a176      	add	r1, pc, #472	; (adr r1, 8003de0 <main+0x9a0>)
 8003c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c0a:	f7fc fb45 	bl	8000298 <__aeabi_dsub>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4620      	mov	r0, r4
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7fc fcf7 	bl	8000608 <__aeabi_dmul>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fc ffe9 	bl	8000bf8 <__aeabi_d2f>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4a86      	ldr	r2, [pc, #536]	; (8003e44 <main+0xa04>)
 8003c2a:	6013      	str	r3, [r2, #0]
	  		  ort_hiz=ort_hiz/(indx-1);			     // indx 1 ken hız 0.
 8003c2c:	4b75      	ldr	r3, [pc, #468]	; (8003e04 <main+0x9c4>)
 8003c2e:	edd3 6a00 	vldr	s13, [r3]
 8003c32:	4b85      	ldr	r3, [pc, #532]	; (8003e48 <main+0xa08>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	ee07 3a90 	vmov	s15, r3
 8003c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c44:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <main+0x9c4>)
 8003c46:	edc3 7a00 	vstr	s15, [r3]
              ort_nabiz=ort_nabiz/(indx-2);      //indx 1 ken nabiz 0 değil
 8003c4a:	4b70      	ldr	r3, [pc, #448]	; (8003e0c <main+0x9cc>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b7e      	ldr	r3, [pc, #504]	; (8003e48 <main+0xa08>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3b02      	subs	r3, #2
 8003c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c58:	4a6c      	ldr	r2, [pc, #432]	; (8003e0c <main+0x9cc>)
 8003c5a:	6013      	str	r3, [r2, #0]

            if(ort_nabiz>(220-yas)*0.8)  //Nabiz degerlendirme:Yuksek
 8003c5c:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <main+0x9cc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fc67 	bl	8000534 <__aeabi_i2d>
 8003c66:	4604      	mov	r4, r0
 8003c68:	460d      	mov	r5, r1
 8003c6a:	4b78      	ldr	r3, [pc, #480]	; (8003e4c <main+0xa0c>)
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003e50 <main+0xa10>
 8003c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c78:	ee17 0a90 	vmov	r0, s15
 8003c7c:	f7fc fc6c 	bl	8000558 <__aeabi_f2d>
 8003c80:	a359      	add	r3, pc, #356	; (adr r3, 8003de8 <main+0x9a8>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fcbf 	bl	8000608 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4620      	mov	r0, r4
 8003c90:	4629      	mov	r1, r5
 8003c92:	f7fc ff49 	bl	8000b28 <__aeabi_dcmpgt>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <main+0x872>
            {
            	sprintf (yazi,"\nOrtalama Nabiz Yuksek: %d \n",ort_nabiz);
 8003c9c:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <main+0x9cc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	496c      	ldr	r1, [pc, #432]	; (8003e54 <main+0xa14>)
 8003ca4:	486c      	ldr	r0, [pc, #432]	; (8003e58 <main+0xa18>)
 8003ca6:	f00a fef7 	bl	800ea98 <siprintf>
            	f_puts(yazi , &fil);  //yazdir
 8003caa:	496c      	ldr	r1, [pc, #432]	; (8003e5c <main+0xa1c>)
 8003cac:	486a      	ldr	r0, [pc, #424]	; (8003e58 <main+0xa18>)
 8003cae:	f00a f802 	bl	800dcb6 <f_puts>
            }

            if(ort_nabiz<=(220-yas)*0.8) // Nabiz degerlendirme:Dusuk
 8003cb2:	4b56      	ldr	r3, [pc, #344]	; (8003e0c <main+0x9cc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc fc3c 	bl	8000534 <__aeabi_i2d>
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	460d      	mov	r5, r1
 8003cc0:	4b62      	ldr	r3, [pc, #392]	; (8003e4c <main+0xa0c>)
 8003cc2:	edd3 7a00 	vldr	s15, [r3]
 8003cc6:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003e50 <main+0xa10>
 8003cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cce:	ee17 0a90 	vmov	r0, s15
 8003cd2:	f7fc fc41 	bl	8000558 <__aeabi_f2d>
 8003cd6:	a344      	add	r3, pc, #272	; (adr r3, 8003de8 <main+0x9a8>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fc94 	bl	8000608 <__aeabi_dmul>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	f7fc ff0a 	bl	8000b00 <__aeabi_dcmple>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <main+0x8c8>
            {
            	sprintf (yazi,"\nOrtalama Nabiz Normal: %d \n",ort_nabiz);
 8003cf2:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <main+0x9cc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4959      	ldr	r1, [pc, #356]	; (8003e60 <main+0xa20>)
 8003cfa:	4857      	ldr	r0, [pc, #348]	; (8003e58 <main+0xa18>)
 8003cfc:	f00a fecc 	bl	800ea98 <siprintf>
            	f_puts(yazi , &fil);  //yazdir
 8003d00:	4956      	ldr	r1, [pc, #344]	; (8003e5c <main+0xa1c>)
 8003d02:	4855      	ldr	r0, [pc, #340]	; (8003e58 <main+0xa18>)
 8003d04:	f009 ffd7 	bl	800dcb6 <f_puts>
            }

            sprintf (yazi,"\nTop_Sur(ms),Den_Sev_Sur(ms),Top_Yol(m),Ort_Hiz(m/s),Max_Hiz(m/s),Max_Hiz_Cik_Sur(ms),Max_Hiz_Nab,Max_Hiz_VS,SpO2\n");
 8003d08:	4956      	ldr	r1, [pc, #344]	; (8003e64 <main+0xa24>)
 8003d0a:	4853      	ldr	r0, [pc, #332]	; (8003e58 <main+0xa18>)
 8003d0c:	f00a fec4 	bl	800ea98 <siprintf>
            f_puts(yazi , &fil);  //yazdir
 8003d10:	4952      	ldr	r1, [pc, #328]	; (8003e5c <main+0xa1c>)
 8003d12:	4851      	ldr	r0, [pc, #324]	; (8003e58 <main+0xa18>)
 8003d14:	f009 ffcf 	bl	800dcb6 <f_puts>
            sprintf (yazi,"%d,%.0f,%.3f,%.3f,%.3f,%d,%d,%.2f,%.0f\n",kosu_suresi_sayac,deniz_seviyesi_sure,distance_filtreli,ort_hiz,max_hiz,max_hiza_cikma_suresi,max_hiz_nabiz,max_hiz_VS,spo2);
 8003d18:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <main+0x9d8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <main+0xa04>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fc18 	bl	8000558 <__aeabi_f2d>
 8003d28:	4680      	mov	r8, r0
 8003d2a:	4689      	mov	r9, r1
 8003d2c:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <main+0x9f4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fc11 	bl	8000558 <__aeabi_f2d>
 8003d36:	4682      	mov	sl, r0
 8003d38:	468b      	mov	fp, r1
 8003d3a:	4b32      	ldr	r3, [pc, #200]	; (8003e04 <main+0x9c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc fc0a 	bl	8000558 <__aeabi_f2d>
 8003d44:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003d48:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <main+0x9d4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc fc03 	bl	8000558 <__aeabi_f2d>
 8003d52:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003d56:	4b31      	ldr	r3, [pc, #196]	; (8003e1c <main+0x9dc>)
 8003d58:	681e      	ldr	r6, [r3, #0]
 8003d5a:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <main+0x9e0>)
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	6079      	str	r1, [r7, #4]
 8003d60:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <main+0x9e8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fc fbf7 	bl	8000558 <__aeabi_f2d>
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	460d      	mov	r5, r1
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <main+0xa28>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc fbf0 	bl	8000558 <__aeabi_f2d>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003d80:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	9109      	str	r1, [sp, #36]	; 0x24
 8003d88:	9608      	str	r6, [sp, #32]
 8003d8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8003d8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003d92:	ed97 7b04 	vldr	d7, [r7, #16]
 8003d96:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003d9a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003d9e:	e9cd 8900 	strd	r8, r9, [sp]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4931      	ldr	r1, [pc, #196]	; (8003e6c <main+0xa2c>)
 8003da6:	482c      	ldr	r0, [pc, #176]	; (8003e58 <main+0xa18>)
 8003da8:	f00a fe76 	bl	800ea98 <siprintf>
            f_puts(yazi , &fil);  //yazdir
 8003dac:	492b      	ldr	r1, [pc, #172]	; (8003e5c <main+0xa1c>)
 8003dae:	482a      	ldr	r0, [pc, #168]	; (8003e58 <main+0xa18>)
 8003db0:	f009 ff81 	bl	800dcb6 <f_puts>




              ///////////////////////////  Kayit Bitti    ///////////////////////////////////////////////////////
	  		  f_close(&fil);    // Dosyayi kapa
 8003db4:	4829      	ldr	r0, [pc, #164]	; (8003e5c <main+0xa1c>)
 8003db6:	f009 fcb9 	bl	800d72c <f_close>
	  		  f_mount(NULL, "/", 1); //sd karti unmount et
 8003dba:	2201      	movs	r2, #1
 8003dbc:	492c      	ldr	r1, [pc, #176]	; (8003e70 <main+0xa30>)
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f009 f890 	bl	800cee4 <f_mount>
	  		  ////////////////  Değişkenleri sıfırlama //////////////////////////////////////////////////////////
	  		  indx=0;
 8003dc4:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <main+0xa08>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e053      	b.n	8003e74 <main+0xa34>
 8003dcc:	f3af 8000 	nop.w
 8003dd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003dd4:	bf20624d 	.word	0xbf20624d
 8003dd8:	eb851eb8 	.word	0xeb851eb8
 8003ddc:	3f9eb851 	.word	0x3f9eb851
 8003de0:	47ae147b 	.word	0x47ae147b
 8003de4:	3ff07ae1 	.word	0x3ff07ae1
 8003de8:	9999999a 	.word	0x9999999a
 8003dec:	3fe99999 	.word	0x3fe99999
 8003df0:	200004d8 	.word	0x200004d8
 8003df4:	200004ec 	.word	0x200004ec
 8003df8:	200004f0 	.word	0x200004f0
 8003dfc:	20000578 	.word	0x20000578
 8003e00:	2000057c 	.word	0x2000057c
 8003e04:	2000064c 	.word	0x2000064c
 8003e08:	200004e8 	.word	0x200004e8
 8003e0c:	2000065c 	.word	0x2000065c
 8003e10:	20000598 	.word	0x20000598
 8003e14:	20000650 	.word	0x20000650
 8003e18:	20000644 	.word	0x20000644
 8003e1c:	20000654 	.word	0x20000654
 8003e20:	20000658 	.word	0x20000658
 8003e24:	200009e4 	.word	0x200009e4
 8003e28:	20000660 	.word	0x20000660
 8003e2c:	20000640 	.word	0x20000640
 8003e30:	2000063c 	.word	0x2000063c
 8003e34:	200004dc 	.word	0x200004dc
 8003e38:	42c80000 	.word	0x42c80000
 8003e3c:	0003a980 	.word	0x0003a980
 8003e40:	20000770 	.word	0x20000770
 8003e44:	20000648 	.word	0x20000648
 8003e48:	200008a4 	.word	0x200008a4
 8003e4c:	20000010 	.word	0x20000010
 8003e50:	435c0000 	.word	0x435c0000
 8003e54:	08014b88 	.word	0x08014b88
 8003e58:	200008a8 	.word	0x200008a8
 8003e5c:	20001a28 	.word	0x20001a28
 8003e60:	08014ba8 	.word	0x08014ba8
 8003e64:	08014bc8 	.word	0x08014bc8
 8003e68:	20000260 	.word	0x20000260
 8003e6c:	08014c3c 	.word	0x08014c3c
 8003e70:	08014c64 	.word	0x08014c64
	  		  yazma_durum=0;   // Bekleme durmumuna gec, 0 = standby
 8003e74:	4b64      	ldr	r3, [pc, #400]	; (8004008 <main+0xbc8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]


	  		  kosu_ornekleme_periyot=0;
 8003e7a:	4b64      	ldr	r3, [pc, #400]	; (800400c <main+0xbcc>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	801a      	strh	r2, [r3, #0]
	  		  kosu_suresi_sayac=0;
 8003e80:	4b63      	ldr	r3, [pc, #396]	; (8004010 <main+0xbd0>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]

	  		  distance=0;
 8003e86:	4b63      	ldr	r3, [pc, #396]	; (8004014 <main+0xbd4>)
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
	  		  distance_old=0;
 8003e8e:	4b62      	ldr	r3, [pc, #392]	; (8004018 <main+0xbd8>)
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
	  		  distance_filtreli=0;
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <main+0xbdc>)
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]

              v_filtresiz=0;
 8003e9e:	4b60      	ldr	r3, [pc, #384]	; (8004020 <main+0xbe0>)
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
              v_filtreli_birinci_adim=0;
 8003ea6:	4b5f      	ldr	r3, [pc, #380]	; (8004024 <main+0xbe4>)
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
              v_filtreli_ikinci_adim=0;
 8003eae:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <main+0xbe8>)
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
              v_filtreli_ucuncu_adim_yeni=0;
 8003eb6:	4b5d      	ldr	r3, [pc, #372]	; (800402c <main+0xbec>)
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
              v_filtreli_ucuncu_adim_eski=0;
 8003ebe:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <main+0xbf0>)
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

              ivmeyeni=0;
 8003ec6:	4b5b      	ldr	r3, [pc, #364]	; (8004034 <main+0xbf4>)
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
              ivmeeski=0;
 8003ece:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <main+0xbf8>)
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
              ivmefiltered=0;
 8003ed6:	4b59      	ldr	r3, [pc, #356]	; (800403c <main+0xbfc>)
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]

	  		  enlem_baslangic=0;
 8003ede:	4b58      	ldr	r3, [pc, #352]	; (8004040 <main+0xc00>)
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
	  		  boylam_baslangic=0;
 8003ee6:	4b57      	ldr	r3, [pc, #348]	; (8004044 <main+0xc04>)
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

	  		  deniz_seviyesi_sure=0;
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <main+0xc08>)
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
	  		  ort_hiz=0;
 8003ef6:	4b55      	ldr	r3, [pc, #340]	; (800404c <main+0xc0c>)
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
	  		  max_hiz=0;
 8003efe:	4b54      	ldr	r3, [pc, #336]	; (8004050 <main+0xc10>)
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
	  		  max_hiza_cikma_suresi=0;
 8003f06:	4b53      	ldr	r3, [pc, #332]	; (8004054 <main+0xc14>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
	  		  max_hiz_nabiz=0;
 8003f0c:	4b52      	ldr	r3, [pc, #328]	; (8004058 <main+0xc18>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
	  		  max_hiz_VS=0;
 8003f12:	4b52      	ldr	r3, [pc, #328]	; (800405c <main+0xc1c>)
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
	  		  ort_nabiz=0;
 8003f1a:	4b51      	ldr	r3, [pc, #324]	; (8004060 <main+0xc20>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

	  		  SSD1306_Clear();  // LCD yi temizle kayit bitince
 8003f20:	f001 fb23 	bl	800556a <SSD1306_Clear>
	  		  ///////////////////////////////////////
	  	  }

	  /////////////////////  LCD REAL TIME DEBUG //////////////////
	  lcd_spo2=(spo2);  //float basica duzgun gostermedi
 8003f24:	4b4f      	ldr	r3, [pc, #316]	; (8004064 <main+0xc24>)
 8003f26:	edd3 7a00 	vldr	s15, [r3]
 8003f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f2e:	edc7 7a06 	vstr	s15, [r7, #24]
 8003f32:	7e3b      	ldrb	r3, [r7, #24]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4b4c      	ldr	r3, [pc, #304]	; (8004068 <main+0xc28>)
 8003f38:	701a      	strb	r2, [r3, #0]
	  lcd_Temperature_DS=Temperature_DS; //float basica duzgun gostermedi
 8003f3a:	4b4c      	ldr	r3, [pc, #304]	; (800406c <main+0xc2c>)
 8003f3c:	edd3 7a00 	vldr	s15, [r3]
 8003f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f44:	edc7 7a06 	vstr	s15, [r7, #24]
 8003f48:	7e3b      	ldrb	r3, [r7, #24]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	4b48      	ldr	r3, [pc, #288]	; (8004070 <main+0xc30>)
 8003f4e:	701a      	strb	r2, [r3, #0]
      ////////////////////////////////////////////
	  SSD1306_GotoXY (0,0);//LCD imleç konumu değiştirme
 8003f50:	2100      	movs	r1, #0
 8003f52:	2000      	movs	r0, #0
 8003f54:	f001 fa4e 	bl	80053f4 <SSD1306_GotoXY>
	  sprintf (lcd_yazi,"HR:%d|Ok:%d|VS:%d ",nabiz_filtered3,lcd_spo2,lcd_Temperature_DS);
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <main+0xc34>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <main+0xc28>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	4619      	mov	r1, r3
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <main+0xc30>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4943      	ldr	r1, [pc, #268]	; (8004078 <main+0xc38>)
 8003f6c:	4843      	ldr	r0, [pc, #268]	; (800407c <main+0xc3c>)
 8003f6e:	f00a fd93 	bl	800ea98 <siprintf>
	  SSD1306_Puts (lcd_yazi, &Font_7x10, 1);//LCD Yazdırma
 8003f72:	2201      	movs	r2, #1
 8003f74:	4942      	ldr	r1, [pc, #264]	; (8004080 <main+0xc40>)
 8003f76:	4841      	ldr	r0, [pc, #260]	; (800407c <main+0xc3c>)
 8003f78:	f001 fad2 	bl	8005520 <SSD1306_Puts>
	  /////////////////////////////////////////
	  SSD1306_GotoXY (0,11);//LCD imleç konumu değiştirme
 8003f7c:	210b      	movs	r1, #11
 8003f7e:	2000      	movs	r0, #0
 8003f80:	f001 fa38 	bl	80053f4 <SSD1306_GotoXY>
	  SSD1306_Puts ("Yol,Hiz,Ivme", &Font_7x10, 1);//LCD Yazdırma
 8003f84:	2201      	movs	r2, #1
 8003f86:	493e      	ldr	r1, [pc, #248]	; (8004080 <main+0xc40>)
 8003f88:	483e      	ldr	r0, [pc, #248]	; (8004084 <main+0xc44>)
 8003f8a:	f001 fac9 	bl	8005520 <SSD1306_Puts>
	  sprintf (lcd_yazi,"%.2f,%.2f,%.2f",distance_filtreli,v_filtreli_ikinci_adim,ivmefiltered);
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <main+0xbdc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc fae0 	bl	8000558 <__aeabi_f2d>
 8003f98:	4680      	mov	r8, r0
 8003f9a:	4689      	mov	r9, r1
 8003f9c:	4b22      	ldr	r3, [pc, #136]	; (8004028 <main+0xbe8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc fad9 	bl	8000558 <__aeabi_f2d>
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	460d      	mov	r5, r1
 8003faa:	4b24      	ldr	r3, [pc, #144]	; (800403c <main+0xbfc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fad2 	bl	8000558 <__aeabi_f2d>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fbc:	e9cd 4500 	strd	r4, r5, [sp]
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	4930      	ldr	r1, [pc, #192]	; (8004088 <main+0xc48>)
 8003fc6:	482d      	ldr	r0, [pc, #180]	; (800407c <main+0xc3c>)
 8003fc8:	f00a fd66 	bl	800ea98 <siprintf>
	  SSD1306_GotoXY (0,22);//LCD imleç konumu değiştirme
 8003fcc:	2116      	movs	r1, #22
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f001 fa10 	bl	80053f4 <SSD1306_GotoXY>
	  SSD1306_Puts (lcd_yazi, &Font_7x10, 1);//LCD Yazdırma
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	492a      	ldr	r1, [pc, #168]	; (8004080 <main+0xc40>)
 8003fd8:	4828      	ldr	r0, [pc, #160]	; (800407c <main+0xc3c>)
 8003fda:	f001 faa1 	bl	8005520 <SSD1306_Puts>
	  SSD1306_GotoXY (0,44);//LCD imleç konumu değiştirme
 8003fde:	212c      	movs	r1, #44	; 0x2c
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f001 fa07 	bl	80053f4 <SSD1306_GotoXY>
	  sprintf (lcd_yazi,"Dur:%d;Zam:%d",yazma_durum,kosu_suresi_sayac);
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <main+0xbc8>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <main+0xbd0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4927      	ldr	r1, [pc, #156]	; (800408c <main+0xc4c>)
 8003ff0:	4822      	ldr	r0, [pc, #136]	; (800407c <main+0xc3c>)
 8003ff2:	f00a fd51 	bl	800ea98 <siprintf>
	  SSD1306_Puts (lcd_yazi, &Font_7x10, 1);//LCD Yazdırma
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4921      	ldr	r1, [pc, #132]	; (8004080 <main+0xc40>)
 8003ffa:	4820      	ldr	r0, [pc, #128]	; (800407c <main+0xc3c>)
 8003ffc:	f001 fa90 	bl	8005520 <SSD1306_Puts>
	  SSD1306_UpdateScreen(); //display
 8004000:	f001 f952 	bl	80052a8 <SSD1306_UpdateScreen>
	  if (max30102_has_interrupt(&max30102))
 8004004:	f7ff bab5 	b.w	8003572 <main+0x132>
 8004008:	2000063c 	.word	0x2000063c
 800400c:	20000640 	.word	0x20000640
 8004010:	20000644 	.word	0x20000644
 8004014:	200004d4 	.word	0x200004d4
 8004018:	200004d8 	.word	0x200004d8
 800401c:	200004dc 	.word	0x200004dc
 8004020:	200004e0 	.word	0x200004e0
 8004024:	200004e4 	.word	0x200004e4
 8004028:	200004e8 	.word	0x200004e8
 800402c:	200004ec 	.word	0x200004ec
 8004030:	200004f0 	.word	0x200004f0
 8004034:	20000578 	.word	0x20000578
 8004038:	2000057c 	.word	0x2000057c
 800403c:	20000580 	.word	0x20000580
 8004040:	20000584 	.word	0x20000584
 8004044:	20000588 	.word	0x20000588
 8004048:	20000648 	.word	0x20000648
 800404c:	2000064c 	.word	0x2000064c
 8004050:	20000650 	.word	0x20000650
 8004054:	20000654 	.word	0x20000654
 8004058:	20000658 	.word	0x20000658
 800405c:	20000660 	.word	0x20000660
 8004060:	2000065c 	.word	0x2000065c
 8004064:	20000260 	.word	0x20000260
 8004068:	20000264 	.word	0x20000264
 800406c:	200009e4 	.word	0x200009e4
 8004070:	200009e8 	.word	0x200009e8
 8004074:	20000598 	.word	0x20000598
 8004078:	08014c68 	.word	0x08014c68
 800407c:	200009a4 	.word	0x200009a4
 8004080:	20000004 	.word	0x20000004
 8004084:	08014c7c 	.word	0x08014c7c
 8004088:	08014c8c 	.word	0x08014c8c
 800408c:	08014c9c 	.word	0x08014c9c

08004090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b094      	sub	sp, #80	; 0x50
 8004094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	2230      	movs	r2, #48	; 0x30
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f009 ff98 	bl	800dfd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <SystemClock_Config+0xc8>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	4a26      	ldr	r2, [pc, #152]	; (8004158 <SystemClock_Config+0xc8>)
 80040be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c2:	6413      	str	r3, [r2, #64]	; 0x40
 80040c4:	4b24      	ldr	r3, [pc, #144]	; (8004158 <SystemClock_Config+0xc8>)
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d0:	2300      	movs	r3, #0
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	4b21      	ldr	r3, [pc, #132]	; (800415c <SystemClock_Config+0xcc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <SystemClock_Config+0xcc>)
 80040da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b1e      	ldr	r3, [pc, #120]	; (800415c <SystemClock_Config+0xcc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040ec:	2302      	movs	r3, #2
 80040ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040f0:	2301      	movs	r3, #1
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040f4:	2310      	movs	r3, #16
 80040f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040f8:	2302      	movs	r3, #2
 80040fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040fc:	2300      	movs	r3, #0
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004100:	2308      	movs	r3, #8
 8004102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004104:	2364      	movs	r3, #100	; 0x64
 8004106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004108:	2302      	movs	r3, #2
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800410c:	2304      	movs	r3, #4
 800410e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004110:	f107 0320 	add.w	r3, r7, #32
 8004114:	4618      	mov	r0, r3
 8004116:	f003 ffc3 	bl	80080a0 <HAL_RCC_OscConfig>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004120:	f000 fcb6 	bl	8004a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004124:	230f      	movs	r3, #15
 8004126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004128:	2302      	movs	r3, #2
 800412a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800413a:	f107 030c 	add.w	r3, r7, #12
 800413e:	2103      	movs	r1, #3
 8004140:	4618      	mov	r0, r3
 8004142:	f004 fa25 	bl	8008590 <HAL_RCC_ClockConfig>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800414c:	f000 fca0 	bl	8004a90 <Error_Handler>
  }
}
 8004150:	bf00      	nop
 8004152:	3750      	adds	r7, #80	; 0x50
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000

08004160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004164:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <MX_I2C1_Init+0x50>)
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <MX_I2C1_Init+0x54>)
 8004168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <MX_I2C1_Init+0x50>)
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <MX_I2C1_Init+0x58>)
 800416e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <MX_I2C1_Init+0x50>)
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <MX_I2C1_Init+0x50>)
 8004178:	2200      	movs	r2, #0
 800417a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <MX_I2C1_Init+0x50>)
 800417e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <MX_I2C1_Init+0x50>)
 8004186:	2200      	movs	r2, #0
 8004188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <MX_I2C1_Init+0x50>)
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <MX_I2C1_Init+0x50>)
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <MX_I2C1_Init+0x50>)
 8004198:	2200      	movs	r2, #0
 800419a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <MX_I2C1_Init+0x50>)
 800419e:	f002 fa1d 	bl	80065dc <HAL_I2C_Init>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80041a8:	f000 fc72 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	20000268 	.word	0x20000268
 80041b4:	40005400 	.word	0x40005400
 80041b8:	00061a80 	.word	0x00061a80

080041bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80041c0:	4b12      	ldr	r3, [pc, #72]	; (800420c <MX_I2C2_Init+0x50>)
 80041c2:	4a13      	ldr	r2, [pc, #76]	; (8004210 <MX_I2C2_Init+0x54>)
 80041c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <MX_I2C2_Init+0x50>)
 80041c8:	4a12      	ldr	r2, [pc, #72]	; (8004214 <MX_I2C2_Init+0x58>)
 80041ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80041cc:	4b0f      	ldr	r3, [pc, #60]	; (800420c <MX_I2C2_Init+0x50>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80041d2:	4b0e      	ldr	r3, [pc, #56]	; (800420c <MX_I2C2_Init+0x50>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <MX_I2C2_Init+0x50>)
 80041da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041e0:	4b0a      	ldr	r3, [pc, #40]	; (800420c <MX_I2C2_Init+0x50>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <MX_I2C2_Init+0x50>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <MX_I2C2_Init+0x50>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <MX_I2C2_Init+0x50>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80041f8:	4804      	ldr	r0, [pc, #16]	; (800420c <MX_I2C2_Init+0x50>)
 80041fa:	f002 f9ef 	bl	80065dc <HAL_I2C_Init>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004204:	f000 fc44 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200002bc 	.word	0x200002bc
 8004210:	40005800 	.word	0x40005800
 8004214:	00061a80 	.word	0x00061a80

08004218 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800421c:	4b12      	ldr	r3, [pc, #72]	; (8004268 <MX_I2C3_Init+0x50>)
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <MX_I2C3_Init+0x54>)
 8004220:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <MX_I2C3_Init+0x50>)
 8004224:	4a12      	ldr	r2, [pc, #72]	; (8004270 <MX_I2C3_Init+0x58>)
 8004226:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <MX_I2C3_Init+0x50>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <MX_I2C3_Init+0x50>)
 8004230:	2200      	movs	r2, #0
 8004232:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <MX_I2C3_Init+0x50>)
 8004236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800423a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <MX_I2C3_Init+0x50>)
 800423e:	2200      	movs	r2, #0
 8004240:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <MX_I2C3_Init+0x50>)
 8004244:	2200      	movs	r2, #0
 8004246:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <MX_I2C3_Init+0x50>)
 800424a:	2200      	movs	r2, #0
 800424c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800424e:	4b06      	ldr	r3, [pc, #24]	; (8004268 <MX_I2C3_Init+0x50>)
 8004250:	2200      	movs	r2, #0
 8004252:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004254:	4804      	ldr	r0, [pc, #16]	; (8004268 <MX_I2C3_Init+0x50>)
 8004256:	f002 f9c1 	bl	80065dc <HAL_I2C_Init>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004260:	f000 fc16 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000310 	.word	0x20000310
 800426c:	40005c00 	.word	0x40005c00
 8004270:	00061a80 	.word	0x00061a80

08004274 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004278:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <MX_SPI1_Init+0x64>)
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <MX_SPI1_Init+0x68>)
 800427c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <MX_SPI1_Init+0x64>)
 8004280:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004284:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <MX_SPI1_Init+0x64>)
 8004288:	2200      	movs	r2, #0
 800428a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <MX_SPI1_Init+0x64>)
 800428e:	2200      	movs	r2, #0
 8004290:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <MX_SPI1_Init+0x64>)
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <MX_SPI1_Init+0x64>)
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <MX_SPI1_Init+0x64>)
 80042a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <MX_SPI1_Init+0x64>)
 80042a8:	2220      	movs	r2, #32
 80042aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <MX_SPI1_Init+0x64>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <MX_SPI1_Init+0x64>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <MX_SPI1_Init+0x64>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <MX_SPI1_Init+0x64>)
 80042c0:	220a      	movs	r2, #10
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042c4:	4804      	ldr	r0, [pc, #16]	; (80042d8 <MX_SPI1_Init+0x64>)
 80042c6:	f004 fb75 	bl	80089b4 <HAL_SPI_Init>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80042d0:	f000 fbde 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000364 	.word	0x20000364
 80042dc:	40013000 	.word	0x40013000

080042e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042e6:	f107 0308 	add.w	r3, r7, #8
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	609a      	str	r2, [r3, #8]
 80042f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042f4:	463b      	mov	r3, r7
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <MX_TIM2_Init+0x94>)
 80042fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004302:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <MX_TIM2_Init+0x94>)
 8004306:	2263      	movs	r2, #99	; 0x63
 8004308:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800430a:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <MX_TIM2_Init+0x94>)
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8004310:	4b18      	ldr	r3, [pc, #96]	; (8004374 <MX_TIM2_Init+0x94>)
 8004312:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004318:	4b16      	ldr	r3, [pc, #88]	; (8004374 <MX_TIM2_Init+0x94>)
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <MX_TIM2_Init+0x94>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004324:	4813      	ldr	r0, [pc, #76]	; (8004374 <MX_TIM2_Init+0x94>)
 8004326:	f004 ff77 	bl	8009218 <HAL_TIM_Base_Init>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004330:	f000 fbae 	bl	8004a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800433a:	f107 0308 	add.w	r3, r7, #8
 800433e:	4619      	mov	r1, r3
 8004340:	480c      	ldr	r0, [pc, #48]	; (8004374 <MX_TIM2_Init+0x94>)
 8004342:	f005 f97d 	bl	8009640 <HAL_TIM_ConfigClockSource>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800434c:	f000 fba0 	bl	8004a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004350:	2300      	movs	r3, #0
 8004352:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004354:	2300      	movs	r3, #0
 8004356:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004358:	463b      	mov	r3, r7
 800435a:	4619      	mov	r1, r3
 800435c:	4805      	ldr	r0, [pc, #20]	; (8004374 <MX_TIM2_Init+0x94>)
 800435e:	f005 fb79 	bl	8009a54 <HAL_TIMEx_MasterConfigSynchronization>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004368:	f000 fb92 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800436c:	bf00      	nop
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200003bc 	.word	0x200003bc

08004378 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800437e:	f107 0308 	add.w	r3, r7, #8
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	609a      	str	r2, [r3, #8]
 800438a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800438c:	463b      	mov	r3, r7
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004394:	4b1d      	ldr	r3, [pc, #116]	; (800440c <MX_TIM5_Init+0x94>)
 8004396:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <MX_TIM5_Init+0x98>)
 8004398:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <MX_TIM5_Init+0x94>)
 800439c:	2263      	movs	r2, #99	; 0x63
 800439e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043a0:	4b1a      	ldr	r3, [pc, #104]	; (800440c <MX_TIM5_Init+0x94>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <MX_TIM5_Init+0x94>)
 80043a8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <MX_TIM5_Init+0x94>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043b4:	4b15      	ldr	r3, [pc, #84]	; (800440c <MX_TIM5_Init+0x94>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80043ba:	4814      	ldr	r0, [pc, #80]	; (800440c <MX_TIM5_Init+0x94>)
 80043bc:	f004 ff2c 	bl	8009218 <HAL_TIM_Base_Init>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80043c6:	f000 fb63 	bl	8004a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80043d0:	f107 0308 	add.w	r3, r7, #8
 80043d4:	4619      	mov	r1, r3
 80043d6:	480d      	ldr	r0, [pc, #52]	; (800440c <MX_TIM5_Init+0x94>)
 80043d8:	f005 f932 	bl	8009640 <HAL_TIM_ConfigClockSource>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80043e2:	f000 fb55 	bl	8004a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80043ee:	463b      	mov	r3, r7
 80043f0:	4619      	mov	r1, r3
 80043f2:	4806      	ldr	r0, [pc, #24]	; (800440c <MX_TIM5_Init+0x94>)
 80043f4:	f005 fb2e 	bl	8009a54 <HAL_TIMEx_MasterConfigSynchronization>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80043fe:	f000 fb47 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004402:	bf00      	nop
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000404 	.word	0x20000404
 8004410:	40000c00 	.word	0x40000c00

08004414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <MX_USART1_UART_Init+0x50>)
 800441c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 8004420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 800442e:	2200      	movs	r2, #0
 8004430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 800443a:	220c      	movs	r2, #12
 800443c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800444a:	4805      	ldr	r0, [pc, #20]	; (8004460 <MX_USART1_UART_Init+0x4c>)
 800444c:	f005 fb84 	bl	8009b58 <HAL_UART_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004456:	f000 fb1b 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	2000044c 	.word	0x2000044c
 8004464:	40011000 	.word	0x40011000

08004468 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <MX_USART2_UART_Init+0x50>)
 8004470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004472:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 8004474:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800447a:	4b0e      	ldr	r3, [pc, #56]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 8004482:	2200      	movs	r2, #0
 8004484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 8004488:	2200      	movs	r2, #0
 800448a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800448c:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 800448e:	220c      	movs	r2, #12
 8004490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 8004494:	2200      	movs	r2, #0
 8004496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 800449a:	2200      	movs	r2, #0
 800449c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800449e:	4805      	ldr	r0, [pc, #20]	; (80044b4 <MX_USART2_UART_Init+0x4c>)
 80044a0:	f005 fb5a 	bl	8009b58 <HAL_UART_Init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80044aa:	f000 faf1 	bl	8004a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000490 	.word	0x20000490
 80044b8:	40004400 	.word	0x40004400

080044bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c2:	f107 0314 	add.w	r3, r7, #20
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
 80044cc:	609a      	str	r2, [r3, #8]
 80044ce:	60da      	str	r2, [r3, #12]
 80044d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	4b4d      	ldr	r3, [pc, #308]	; (800460c <MX_GPIO_Init+0x150>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a4c      	ldr	r2, [pc, #304]	; (800460c <MX_GPIO_Init+0x150>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b4a      	ldr	r3, [pc, #296]	; (800460c <MX_GPIO_Init+0x150>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	4b46      	ldr	r3, [pc, #280]	; (800460c <MX_GPIO_Init+0x150>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	4a45      	ldr	r2, [pc, #276]	; (800460c <MX_GPIO_Init+0x150>)
 80044f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fc:	6313      	str	r3, [r2, #48]	; 0x30
 80044fe:	4b43      	ldr	r3, [pc, #268]	; (800460c <MX_GPIO_Init+0x150>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	4b3f      	ldr	r3, [pc, #252]	; (800460c <MX_GPIO_Init+0x150>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a3e      	ldr	r2, [pc, #248]	; (800460c <MX_GPIO_Init+0x150>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	4b3c      	ldr	r3, [pc, #240]	; (800460c <MX_GPIO_Init+0x150>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	4b38      	ldr	r3, [pc, #224]	; (800460c <MX_GPIO_Init+0x150>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	4a37      	ldr	r2, [pc, #220]	; (800460c <MX_GPIO_Init+0x150>)
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	6313      	str	r3, [r2, #48]	; 0x30
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <MX_GPIO_Init+0x150>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8004542:	2200      	movs	r2, #0
 8004544:	2102      	movs	r1, #2
 8004546:	4832      	ldr	r0, [pc, #200]	; (8004610 <MX_GPIO_Init+0x154>)
 8004548:	f002 f816 	bl	8006578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800454c:	2200      	movs	r2, #0
 800454e:	2101      	movs	r1, #1
 8004550:	4830      	ldr	r0, [pc, #192]	; (8004614 <MX_GPIO_Init+0x158>)
 8004552:	f002 f811 	bl	8006578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTI_Nabiz_Pin */
  GPIO_InitStruct.Pin = EXTI_Nabiz_Pin;
 8004556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800455a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800455c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI_Nabiz_GPIO_Port, &GPIO_InitStruct);
 8004566:	f107 0314 	add.w	r3, r7, #20
 800456a:	4619      	mov	r1, r3
 800456c:	482a      	ldr	r0, [pc, #168]	; (8004618 <MX_GPIO_Init+0x15c>)
 800456e:	f001 fe67 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8004572:	2302      	movs	r3, #2
 8004574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004576:	2301      	movs	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8004582:	f107 0314 	add.w	r3, r7, #20
 8004586:	4619      	mov	r1, r3
 8004588:	4821      	ldr	r0, [pc, #132]	; (8004610 <MX_GPIO_Init+0x154>)
 800458a:	f001 fe59 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004592:	2301      	movs	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800459e:	f107 0314 	add.w	r3, r7, #20
 80045a2:	4619      	mov	r1, r3
 80045a4:	481b      	ldr	r0, [pc, #108]	; (8004614 <MX_GPIO_Init+0x158>)
 80045a6:	f001 fe4b 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 80045aa:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80045ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80045b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80045b6:	2302      	movs	r3, #2
 80045b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	4619      	mov	r1, r3
 80045c0:	4814      	ldr	r0, [pc, #80]	; (8004614 <MX_GPIO_Init+0x158>)
 80045c2:	f001 fe3d 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 80045c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80045cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80045d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 80045d6:	f107 0314 	add.w	r3, r7, #20
 80045da:	4619      	mov	r1, r3
 80045dc:	480d      	ldr	r0, [pc, #52]	; (8004614 <MX_GPIO_Init+0x158>)
 80045de:	f001 fe2f 	bl	8006240 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80045e2:	2200      	movs	r2, #0
 80045e4:	2100      	movs	r1, #0
 80045e6:	2017      	movs	r0, #23
 80045e8:	f001 fd6e 	bl	80060c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80045ec:	2017      	movs	r0, #23
 80045ee:	f001 fd87 	bl	8006100 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045f2:	2200      	movs	r2, #0
 80045f4:	2100      	movs	r1, #0
 80045f6:	2028      	movs	r0, #40	; 0x28
 80045f8:	f001 fd66 	bl	80060c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045fc:	2028      	movs	r0, #40	; 0x28
 80045fe:	f001 fd7f 	bl	8006100 <HAL_NVIC_EnableIRQ>

}
 8004602:	bf00      	nop
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800
 8004610:	40020000 	.word	0x40020000
 8004614:	40020400 	.word	0x40020400
 8004618:	40020800 	.word	0x40020800

0800461c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	80fb      	strh	r3, [r7, #6]
		  if (GPIO_Pin == GPIO_PIN_13)
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462c:	d156      	bne.n	80046dc <HAL_GPIO_EXTI_Callback+0xc0>
		  {
			nabiz_yeni=HAL_GetTick();  //Cihaz açıldığından beri geçen süre milisaniye
 800462e:	f001 fc63 	bl	8005ef8 <HAL_GetTick>
 8004632:	4603      	mov	r3, r0
 8004634:	4a45      	ldr	r2, [pc, #276]	; (800474c <HAL_GPIO_EXTI_Callback+0x130>)
 8004636:	6013      	str	r3, [r2, #0]
			nabiz_gecen_sure=nabiz_yeni-nabiz_eski; // R-R interval arasi geçen sure
 8004638:	4b44      	ldr	r3, [pc, #272]	; (800474c <HAL_GPIO_EXTI_Callback+0x130>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b44      	ldr	r3, [pc, #272]	; (8004750 <HAL_GPIO_EXTI_Callback+0x134>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	4a44      	ldr	r2, [pc, #272]	; (8004754 <HAL_GPIO_EXTI_Callback+0x138>)
 8004644:	6013      	str	r3, [r2, #0]

			if(nabiz_gecen_sure>333)  //BPM=180 max,eğer 180 üstü bpm sinyali gelirse değerlendirilmez
 8004646:	4b43      	ldr	r3, [pc, #268]	; (8004754 <HAL_GPIO_EXTI_Callback+0x138>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 800464e:	d308      	bcc.n	8004662 <HAL_GPIO_EXTI_Callback+0x46>
			{
			nabiz_bpm=60000/nabiz_gecen_sure;  //her tikte anlık nabiz olcuyor
 8004650:	4b40      	ldr	r3, [pc, #256]	; (8004754 <HAL_GPIO_EXTI_Callback+0x138>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	461a      	mov	r2, r3
 800465e:	4b3e      	ldr	r3, [pc, #248]	; (8004758 <HAL_GPIO_EXTI_Callback+0x13c>)
 8004660:	601a      	str	r2, [r3, #0]
			}
			nabiz_eski=nabiz_yeni;//Mevcut değer eski değer olarak kaydedilir.
 8004662:	4b3a      	ldr	r3, [pc, #232]	; (800474c <HAL_GPIO_EXTI_Callback+0x130>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a3a      	ldr	r2, [pc, #232]	; (8004750 <HAL_GPIO_EXTI_Callback+0x134>)
 8004668:	6013      	str	r3, [r2, #0]

			nabiz_filtered=Moving_Average_Compute(nabiz_bpm, &filterStructbpm);
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <HAL_GPIO_EXTI_Callback+0x13c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004676:	4839      	ldr	r0, [pc, #228]	; (800475c <HAL_GPIO_EXTI_Callback+0x140>)
 8004678:	eeb0 0a67 	vmov.f32	s0, s15
 800467c:	f000 fd0c 	bl	8005098 <Moving_Average_Compute>
 8004680:	eef0 7a40 	vmov.f32	s15, s0
 8004684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004688:	ee17 2a90 	vmov	r2, s15
 800468c:	4b34      	ldr	r3, [pc, #208]	; (8004760 <HAL_GPIO_EXTI_Callback+0x144>)
 800468e:	601a      	str	r2, [r3, #0]
			nabiz_filtered2=Moving_Average_Compute(nabiz_filtered, &filterStructbpm2);
 8004690:	4b33      	ldr	r3, [pc, #204]	; (8004760 <HAL_GPIO_EXTI_Callback+0x144>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800469c:	4831      	ldr	r0, [pc, #196]	; (8004764 <HAL_GPIO_EXTI_Callback+0x148>)
 800469e:	eeb0 0a67 	vmov.f32	s0, s15
 80046a2:	f000 fcf9 	bl	8005098 <Moving_Average_Compute>
 80046a6:	eef0 7a40 	vmov.f32	s15, s0
 80046aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046ae:	ee17 2a90 	vmov	r2, s15
 80046b2:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <HAL_GPIO_EXTI_Callback+0x14c>)
 80046b4:	601a      	str	r2, [r3, #0]
			nabiz_filtered3=Moving_Average_Compute(nabiz_filtered2, &filterStructbpm3);
 80046b6:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <HAL_GPIO_EXTI_Callback+0x14c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c2:	482a      	ldr	r0, [pc, #168]	; (800476c <HAL_GPIO_EXTI_Callback+0x150>)
 80046c4:	eeb0 0a67 	vmov.f32	s0, s15
 80046c8:	f000 fce6 	bl	8005098 <Moving_Average_Compute>
 80046cc:	eef0 7a40 	vmov.f32	s15, s0
 80046d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046d4:	ee17 2a90 	vmov	r2, s15
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <HAL_GPIO_EXTI_Callback+0x154>)
 80046da:	601a      	str	r2, [r3, #0]
		  }

	    //////////////////////////////////////////////////////////////////////////
	    currentMillis12 = HAL_GetTick();//pb12 button 1
 80046dc:	f001 fc0c 	bl	8005ef8 <HAL_GetTick>
 80046e0:	4603      	mov	r3, r0
 80046e2:	4a24      	ldr	r2, [pc, #144]	; (8004774 <HAL_GPIO_EXTI_Callback+0x158>)
 80046e4:	6013      	str	r3, [r2, #0]
	                                  //Button Debounce önleme
	    if (GPIO_Pin == GPIO_PIN_12 && (currentMillis12 - previousMillis12 > 10))
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	d110      	bne.n	8004710 <HAL_GPIO_EXTI_Callback+0xf4>
 80046ee:	4b21      	ldr	r3, [pc, #132]	; (8004774 <HAL_GPIO_EXTI_Callback+0x158>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b21      	ldr	r3, [pc, #132]	; (8004778 <HAL_GPIO_EXTI_Callback+0x15c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b0a      	cmp	r3, #10
 80046fa:	d909      	bls.n	8004710 <HAL_GPIO_EXTI_Callback+0xf4>
	    {
	  	yazma_durum = 1;  //kayit baslatma
 80046fc:	4b1f      	ldr	r3, [pc, #124]	; (800477c <HAL_GPIO_EXTI_Callback+0x160>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
	    previousMillis12 = currentMillis12; //yeni durum artık eskidi
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <HAL_GPIO_EXTI_Callback+0x158>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <HAL_GPIO_EXTI_Callback+0x15c>)
 8004708:	6013      	str	r3, [r2, #0]

	    button1=1; //Kilo,yas counter
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_GPIO_EXTI_Callback+0x164>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
	    }

	    ////////////////////////////////////////////////////////////////////////

	    currentMillis14 = HAL_GetTick();//pb14 button 2
 8004710:	f001 fbf2 	bl	8005ef8 <HAL_GetTick>
 8004714:	4603      	mov	r3, r0
 8004716:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_GPIO_EXTI_Callback+0x168>)
 8004718:	6013      	str	r3, [r2, #0]
	    								//Button Debounce önleme
	    if (GPIO_Pin == GPIO_PIN_14 && (currentMillis14 - previousMillis14 > 10))
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004720:	d110      	bne.n	8004744 <HAL_GPIO_EXTI_Callback+0x128>
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <HAL_GPIO_EXTI_Callback+0x168>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b18      	ldr	r3, [pc, #96]	; (8004788 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b0a      	cmp	r3, #10
 800472e:	d909      	bls.n	8004744 <HAL_GPIO_EXTI_Callback+0x128>
	    {
	  	yazma_durum = 3;  //kayit bitirme
 8004730:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_GPIO_EXTI_Callback+0x160>)
 8004732:	2203      	movs	r2, #3
 8004734:	601a      	str	r2, [r3, #0]
	    previousMillis14 = currentMillis14;//yeni durum artık eskidi
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <HAL_GPIO_EXTI_Callback+0x168>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a13      	ldr	r2, [pc, #76]	; (8004788 <HAL_GPIO_EXTI_Callback+0x16c>)
 800473c:	6013      	str	r3, [r2, #0]

	    button2=1; //Onaylama tusu(kilo yas init)
 800473e:	4b13      	ldr	r3, [pc, #76]	; (800478c <HAL_GPIO_EXTI_Callback+0x170>)
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
	    }

}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000628 	.word	0x20000628
 8004750:	20000624 	.word	0x20000624
 8004754:	20000620 	.word	0x20000620
 8004758:	2000058c 	.word	0x2000058c
 800475c:	2000059c 	.word	0x2000059c
 8004760:	20000590 	.word	0x20000590
 8004764:	200005c8 	.word	0x200005c8
 8004768:	20000594 	.word	0x20000594
 800476c:	200005f4 	.word	0x200005f4
 8004770:	20000598 	.word	0x20000598
 8004774:	20000630 	.word	0x20000630
 8004778:	2000062c 	.word	0x2000062c
 800477c:	2000063c 	.word	0x2000063c
 8004780:	20000664 	.word	0x20000664
 8004784:	20000638 	.word	0x20000638
 8004788:	20000634 	.word	0x20000634
 800478c:	20000665 	.word	0x20000665

08004790 <CalcGPSDistance>:

//  Alinan Yol Hesaplama Haversine formulu
float CalcGPSDistance(float latitud1, float longitud1, float latitud2, float longitud2){
 8004790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004794:	b08a      	sub	sp, #40	; 0x28
 8004796:	af00      	add	r7, sp, #0
 8004798:	ed87 0a03 	vstr	s0, [r7, #12]
 800479c:	edc7 0a02 	vstr	s1, [r7, #8]
 80047a0:	ed87 1a01 	vstr	s2, [r7, #4]
 80047a4:	edc7 1a00 	vstr	s3, [r7]
    double haversine;
    double temp;
    double distancia_puntos;

    latitud1  = latitud1  * GRADOS_RADIANES; //Radyana çevirme işlemleri
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7fb fed5 	bl	8000558 <__aeabi_f2d>
 80047ae:	a38c      	add	r3, pc, #560	; (adr r3, 80049e0 <CalcGPSDistance+0x250>)
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f7fb ff28 	bl	8000608 <__aeabi_dmul>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	4b8c      	ldr	r3, [pc, #560]	; (80049f8 <CalcGPSDistance+0x268>)
 80047c6:	f7fc f849 	bl	800085c <__aeabi_ddiv>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	f7fc fa11 	bl	8000bf8 <__aeabi_d2f>
 80047d6:	4603      	mov	r3, r0
 80047d8:	60fb      	str	r3, [r7, #12]
    longitud1 = longitud1 * GRADOS_RADIANES;
 80047da:	68b8      	ldr	r0, [r7, #8]
 80047dc:	f7fb febc 	bl	8000558 <__aeabi_f2d>
 80047e0:	a37f      	add	r3, pc, #508	; (adr r3, 80049e0 <CalcGPSDistance+0x250>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f7fb ff0f 	bl	8000608 <__aeabi_dmul>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	4b80      	ldr	r3, [pc, #512]	; (80049f8 <CalcGPSDistance+0x268>)
 80047f8:	f7fc f830 	bl	800085c <__aeabi_ddiv>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4610      	mov	r0, r2
 8004802:	4619      	mov	r1, r3
 8004804:	f7fc f9f8 	bl	8000bf8 <__aeabi_d2f>
 8004808:	4603      	mov	r3, r0
 800480a:	60bb      	str	r3, [r7, #8]
    latitud2  = latitud2  * GRADOS_RADIANES;
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fb fea3 	bl	8000558 <__aeabi_f2d>
 8004812:	a373      	add	r3, pc, #460	; (adr r3, 80049e0 <CalcGPSDistance+0x250>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f7fb fef6 	bl	8000608 <__aeabi_dmul>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	4b73      	ldr	r3, [pc, #460]	; (80049f8 <CalcGPSDistance+0x268>)
 800482a:	f7fc f817 	bl	800085c <__aeabi_ddiv>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4610      	mov	r0, r2
 8004834:	4619      	mov	r1, r3
 8004836:	f7fc f9df 	bl	8000bf8 <__aeabi_d2f>
 800483a:	4603      	mov	r3, r0
 800483c:	607b      	str	r3, [r7, #4]
    longitud2 = longitud2 * GRADOS_RADIANES;
 800483e:	6838      	ldr	r0, [r7, #0]
 8004840:	f7fb fe8a 	bl	8000558 <__aeabi_f2d>
 8004844:	a366      	add	r3, pc, #408	; (adr r3, 80049e0 <CalcGPSDistance+0x250>)
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f7fb fedd 	bl	8000608 <__aeabi_dmul>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	4b67      	ldr	r3, [pc, #412]	; (80049f8 <CalcGPSDistance+0x268>)
 800485c:	f7fb fffe 	bl	800085c <__aeabi_ddiv>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4610      	mov	r0, r2
 8004866:	4619      	mov	r1, r3
 8004868:	f7fc f9c6 	bl	8000bf8 <__aeabi_d2f>
 800486c:	4603      	mov	r3, r0
 800486e:	603b      	str	r3, [r7, #0]

    haversine = (pow(sin((1.0 / 2) * (latitud2 - latitud1)), 2)) + ((cos(latitud1)) * (cos(latitud2)) * (pow(sin((1.0 / 2) * (longitud2 - longitud1)), 2)));
 8004870:	ed97 7a01 	vldr	s14, [r7, #4]
 8004874:	edd7 7a03 	vldr	s15, [r7, #12]
 8004878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800487c:	ee17 0a90 	vmov	r0, s15
 8004880:	f7fb fe6a 	bl	8000558 <__aeabi_f2d>
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <CalcGPSDistance+0x26c>)
 800488a:	f7fb febd 	bl	8000608 <__aeabi_dmul>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	ec43 2b17 	vmov	d7, r2, r3
 8004896:	eeb0 0a47 	vmov.f32	s0, s14
 800489a:	eef0 0a67 	vmov.f32	s1, s15
 800489e:	f00d fdbb 	bl	8012418 <sin>
 80048a2:	eeb0 7a40 	vmov.f32	s14, s0
 80048a6:	eef0 7a60 	vmov.f32	s15, s1
 80048aa:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 80049e8 <CalcGPSDistance+0x258>
 80048ae:	eeb0 0a47 	vmov.f32	s0, s14
 80048b2:	eef0 0a67 	vmov.f32	s1, s15
 80048b6:	f00d fe83 	bl	80125c0 <pow>
 80048ba:	ec59 8b10 	vmov	r8, r9, d0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7fb fe4a 	bl	8000558 <__aeabi_f2d>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	ec43 2b10 	vmov	d0, r2, r3
 80048cc:	f00d fd50 	bl	8012370 <cos>
 80048d0:	ec55 4b10 	vmov	r4, r5, d0
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fb fe3f 	bl	8000558 <__aeabi_f2d>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	ec43 2b10 	vmov	d0, r2, r3
 80048e2:	f00d fd45 	bl	8012370 <cos>
 80048e6:	ec53 2b10 	vmov	r2, r3, d0
 80048ea:	4620      	mov	r0, r4
 80048ec:	4629      	mov	r1, r5
 80048ee:	f7fb fe8b 	bl	8000608 <__aeabi_dmul>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4614      	mov	r4, r2
 80048f8:	461d      	mov	r5, r3
 80048fa:	ed97 7a00 	vldr	s14, [r7]
 80048fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004906:	ee17 0a90 	vmov	r0, s15
 800490a:	f7fb fe25 	bl	8000558 <__aeabi_f2d>
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <CalcGPSDistance+0x26c>)
 8004914:	f7fb fe78 	bl	8000608 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	ec43 2b17 	vmov	d7, r2, r3
 8004920:	eeb0 0a47 	vmov.f32	s0, s14
 8004924:	eef0 0a67 	vmov.f32	s1, s15
 8004928:	f00d fd76 	bl	8012418 <sin>
 800492c:	eeb0 7a40 	vmov.f32	s14, s0
 8004930:	eef0 7a60 	vmov.f32	s15, s1
 8004934:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80049e8 <CalcGPSDistance+0x258>
 8004938:	eeb0 0a47 	vmov.f32	s0, s14
 800493c:	eef0 0a67 	vmov.f32	s1, s15
 8004940:	f00d fe3e 	bl	80125c0 <pow>
 8004944:	ec53 2b10 	vmov	r2, r3, d0
 8004948:	4620      	mov	r0, r4
 800494a:	4629      	mov	r1, r5
 800494c:	f7fb fe5c 	bl	8000608 <__aeabi_dmul>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4640      	mov	r0, r8
 8004956:	4649      	mov	r1, r9
 8004958:	f7fb fca0 	bl	800029c <__adddf3>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	e9c7 2308 	strd	r2, r3, [r7, #32]
    temp = 2 * asin(min(1.0, sqrt(haversine))); //C değeri
 8004964:	ed97 0b08 	vldr	d0, [r7, #32]
 8004968:	f00d fe9a 	bl	80126a0 <sqrt>
 800496c:	ec53 2b10 	vmov	r2, r3, d0
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	f7fc f940 	bl	8000bf8 <__aeabi_d2f>
 8004978:	4603      	mov	r3, r0
 800497a:	ee00 3a90 	vmov	s1, r3
 800497e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004982:	f000 f83d 	bl	8004a00 <min>
 8004986:	ee10 3a10 	vmov	r3, s0
 800498a:	4618      	mov	r0, r3
 800498c:	f7fb fde4 	bl	8000558 <__aeabi_f2d>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	ec43 2b10 	vmov	d0, r2, r3
 8004998:	f00d fd96 	bl	80124c8 <asin>
 800499c:	ec51 0b10 	vmov	r0, r1, d0
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	f7fb fc7a 	bl	800029c <__adddf3>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    distancia_puntos = RADIO_TERRESTRE * temp;  //D değeri
 80049b0:	a30f      	add	r3, pc, #60	; (adr r3, 80049f0 <CalcGPSDistance+0x260>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049ba:	f7fb fe25 	bl	8000608 <__aeabi_dmul>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	e9c7 2304 	strd	r2, r3, [r7, #16]

   return distancia_puntos;
 80049c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049ca:	f7fc f915 	bl	8000bf8 <__aeabi_d2f>
 80049ce:	4603      	mov	r3, r0
 80049d0:	ee07 3a90 	vmov	s15, r3
}
 80049d4:	eeb0 0a67 	vmov.f32	s0, s15
 80049d8:	3728      	adds	r7, #40	; 0x28
 80049da:	46bd      	mov	sp, r7
 80049dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049e0:	54442d18 	.word	0x54442d18
 80049e4:	400921fb 	.word	0x400921fb
 80049e8:	00000000 	.word	0x00000000
 80049ec:	40000000 	.word	0x40000000
 80049f0:	63e4f766 	.word	0x63e4f766
 80049f4:	41584f6f 	.word	0x41584f6f
 80049f8:	40668000 	.word	0x40668000
 80049fc:	3fe00000 	.word	0x3fe00000

08004a00 <min>:

float min(float a ,float b) //STM32 C kütüphanelerinde min fonksiyonu yoktur
{               //Bu yüzden burada hazırlanmıştır.
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a0a:	edc7 0a00 	vstr	s1, [r7]
	if(a > b) return b;
 8004a0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a12:	edd7 7a00 	vldr	s15, [r7]
 8004a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	dd01      	ble.n	8004a24 <min+0x24>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	e000      	b.n	8004a26 <min+0x26>
	return a;
 8004a24:	687b      	ldr	r3, [r7, #4]
}
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			if(yazma_durum!=0) //Program basladiginda saymasin.İlk butona basildiktan sonra saysin
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_TIM_PeriodElapsedCallback+0x30>
			{
		     kosu_suresi_sayac++;
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004a5a:	6013      	str	r3, [r2, #0]
		     kosu_ornekleme_periyot++;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004a66:	801a      	strh	r2, [r3, #0]
			}
		}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a07      	ldr	r2, [pc, #28]	; (8004a8c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_PeriodElapsedCallback+0x3e>
    HAL_IncTick();
 8004a72:	f001 fa2d 	bl	8005ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000063c 	.word	0x2000063c
 8004a84:	20000644 	.word	0x20000644
 8004a88:	20000640 	.word	0x20000640
 8004a8c:	40010000 	.word	0x40010000

08004a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a94:	b672      	cpsid	i
}
 8004a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a98:	e7fe      	b.n	8004a98 <Error_Handler+0x8>

08004a9a <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b082      	sub	sp, #8
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	2280      	movs	r2, #128	; 0x80
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f009 fa8a 	bl	800dfd4 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3384      	adds	r3, #132	; 0x84
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f009 fa83 	bl	800dfd4 <memset>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b088      	sub	sp, #32
 8004ada:	af02      	add	r7, sp, #8
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	72fb      	strb	r3, [r7, #11]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8004aea:	893b      	ldrh	r3, [r7, #8]
 8004aec:	3301      	adds	r3, #1
 8004aee:	4618      	mov	r0, r3
 8004af0:	f009 fa52 	bl	800df98 <malloc>
 8004af4:	4603      	mov	r3, r0
 8004af6:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	7afa      	ldrb	r2, [r7, #11]
 8004afc:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <max30102_write+0x42>
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	893a      	ldrh	r2, [r7, #8]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f009 fa50 	bl	800dfb8 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	893b      	ldrh	r3, [r7, #8]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b26:	9200      	str	r2, [sp, #0]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	21ae      	movs	r1, #174	; 0xae
 8004b2c:	f001 fe9a 	bl	8006864 <HAL_I2C_Master_Transmit>
    free(payload);
 8004b30:	6978      	ldr	r0, [r7, #20]
 8004b32:	f009 fa39 	bl	800dfa8 <free>
}
 8004b36:	bf00      	nop
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b088      	sub	sp, #32
 8004b42:	af02      	add	r7, sp, #8
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	72fb      	strb	r3, [r7, #11]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8004b52:	7afb      	ldrb	r3, [r7, #11]
 8004b54:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	f107 0217 	add.w	r2, r7, #23
 8004b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2301      	movs	r3, #1
 8004b66:	21ae      	movs	r1, #174	; 0xae
 8004b68:	f001 fe7c 	bl	8006864 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	893b      	ldrh	r3, [r7, #8]
 8004b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b76:	9200      	str	r2, [sp, #0]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	21ae      	movs	r1, #174	; 0xae
 8004b7c:	f001 ff70 	bl	8006a60 <HAL_I2C_Master_Receive>
}
 8004b80:	bf00      	nop
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8004b90:	2340      	movs	r3, #64	; 0x40
 8004b92:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8004b94:	f107 020f 	add.w	r2, r7, #15
 8004b98:	2301      	movs	r3, #1
 8004b9a:	2109      	movs	r1, #9
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff9a 	bl	8004ad6 <max30102_write>
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8004bba:	f107 020f 	add.w	r2, r7, #15
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ffbb 	bl	8004b3e <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	b25a      	sxtb	r2, r3
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	b25b      	sxtb	r3, r3
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	b25b      	sxtb	r3, r3
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8004be4:	f107 020f 	add.w	r2, r7, #15
 8004be8:	2301      	movs	r3, #1
 8004bea:	2102      	movs	r1, #2
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff72 	bl	8004ad6 <max30102_write>
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8004c14:	f107 020f 	add.w	r2, r7, #15
 8004c18:	2301      	movs	r3, #1
 8004c1a:	2103      	movs	r1, #3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff5a 	bl	8004ad6 <max30102_write>
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8004c44:	f107 020f 	add.w	r2, r7, #15
 8004c48:	2301      	movs	r3, #1
 8004c4a:	2121      	movs	r1, #33	; 0x21
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff42 	bl	8004ad6 <max30102_write>
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8004c98:	2300      	movs	r3, #0
 8004c9a:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);//plot burada calisiyor
 8004c9c:	f107 020c 	add.w	r2, r7, #12
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ff4a 	bl	8004b3e <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8004caa:	7b3b      	ldrb	r3, [r7, #12]
 8004cac:	09db      	lsrs	r3, r3, #7
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj); //burada okuyor sample dataları
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f94e 	bl	8004f5a <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 8004cbe:	7b7b      	ldrb	r3, [r7, #13]
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8004ccc:	f107 020a 	add.w	r2, r7, #10
 8004cd0:	f107 030b 	add.w	r3, r7, #11
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f9a6 	bl	8005028 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8004cf8:	f107 020f 	add.w	r2, r7, #15
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	2109      	movs	r1, #9
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff1c 	bl	8004b3e <max30102_read>
    config = (config & 0xf8) | mode;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	b25a      	sxtb	r2, r3
 8004d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b25b      	sxtb	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8004d1c:	f107 020f 	add.w	r2, r7, #15
 8004d20:	2301      	movs	r3, #1
 8004d22:	2109      	movs	r1, #9
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff fed6 	bl	8004ad6 <max30102_write>
    max30102_clear_fifo(obj);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f8f6 	bl	8004f1c <max30102_clear_fifo>
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004d44:	f107 020f 	add.w	r2, r7, #15
 8004d48:	2301      	movs	r3, #1
 8004d4a:	210a      	movs	r1, #10
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fef6 	bl	8004b3e <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004d60:	f107 020f 	add.w	r2, r7, #15
 8004d64:	2301      	movs	r3, #1
 8004d66:	210a      	movs	r1, #10
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff feb4 	bl	8004ad6 <max30102_write>
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004d82:	f107 020f 	add.w	r2, r7, #15
 8004d86:	2301      	movs	r3, #1
 8004d88:	210a      	movs	r1, #10
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fed7 	bl	8004b3e <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004d98:	b25a      	sxtb	r2, r3
 8004d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	b25b      	sxtb	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004da6:	f107 020f 	add.w	r2, r7, #15
 8004daa:	2301      	movs	r3, #1
 8004dac:	210a      	movs	r1, #10
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fe91 	bl	8004ad6 <max30102_write>
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004dc8:	f107 020f 	add.w	r2, r7, #15
 8004dcc:	2301      	movs	r3, #1
 8004dce:	210a      	movs	r1, #10
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff feb4 	bl	8004b3e <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	b25b      	sxtb	r3, r3
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	b25a      	sxtb	r2, r3
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	015b      	lsls	r3, r3, #5
 8004de4:	b25b      	sxtb	r3, r3
 8004de6:	4313      	orrs	r3, r2
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004dee:	f107 020f 	add.w	r2, r7, #15
 8004df2:	2301      	movs	r3, #1
 8004df4:	210a      	movs	r1, #10
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fe6d 	bl	8004ad6 <max30102_write>
}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	0000      	movs	r0, r0
	...

08004e08 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	f7fb fb9f 	bl	8000558 <__aeabi_f2d>
 8004e1a:	a30d      	add	r3, pc, #52	; (adr r3, 8004e50 <max30102_set_led_current_1+0x48>)
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f7fb fd1c 	bl	800085c <__aeabi_ddiv>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	f7fb fec4 	bl	8000bb8 <__aeabi_d2uiz>
 8004e30:	4603      	mov	r3, r0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8004e36:	f107 020f 	add.w	r2, r7, #15
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	210c      	movs	r1, #12
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fe49 	bl	8004ad6 <max30102_write>
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	f3af 8000 	nop.w
 8004e50:	9999999a 	.word	0x9999999a
 8004e54:	3fc99999 	.word	0x3fc99999

08004e58 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8004e64:	6838      	ldr	r0, [r7, #0]
 8004e66:	f7fb fb77 	bl	8000558 <__aeabi_f2d>
 8004e6a:	a30d      	add	r3, pc, #52	; (adr r3, 8004ea0 <max30102_set_led_current_2+0x48>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f7fb fcf4 	bl	800085c <__aeabi_ddiv>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	f7fb fe9c 	bl	8000bb8 <__aeabi_d2uiz>
 8004e80:	4603      	mov	r3, r0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8004e86:	f107 020f 	add.w	r2, r7, #15
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	210d      	movs	r1, #13
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff fe21 	bl	8004ad6 <max30102_write>
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	f3af 8000 	nop.w
 8004ea0:	9999999a 	.word	0x9999999a
 8004ea4:	3fc99999 	.word	0x3fc99999

08004ea8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	70fb      	strb	r3, [r7, #3]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	70bb      	strb	r3, [r7, #2]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	015b      	lsls	r3, r3, #5
 8004eca:	b25a      	sxtb	r2, r3
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	b25b      	sxtb	r3, r3
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	b25b      	sxtb	r3, r3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8004ed8:	78bb      	ldrb	r3, [r7, #2]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	b25b      	sxtb	r3, r3
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	b25a      	sxtb	r2, r3
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	b25b      	sxtb	r3, r3
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8004ef0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	b25a      	sxtb	r2, r3
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	b25b      	sxtb	r3, r3
 8004efe:	4313      	orrs	r3, r2
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8004f06:	f107 020f 	add.w	r2, r7, #15
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	2108      	movs	r1, #8
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fde1 	bl	8004ad6 <max30102_write>
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8004f24:	2300      	movs	r3, #0
 8004f26:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8004f28:	f107 020f 	add.w	r2, r7, #15
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	2104      	movs	r1, #4
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fdd0 	bl	8004ad6 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8004f36:	f107 020f 	add.w	r2, r7, #15
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	2106      	movs	r1, #6
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fdc9 	bl	8004ad6 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8004f44:	f107 020f 	add.w	r2, r7, #15
 8004f48:	2303      	movs	r3, #3
 8004f4a:	2105      	movs	r1, #5
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff fdc2 	bl	8004ad6 <max30102_write>
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b088      	sub	sp, #32
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	74fb      	strb	r3, [r7, #19]
 8004f66:	2300      	movs	r3, #0
 8004f68:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8004f6a:	f107 0213 	add.w	r2, r7, #19
 8004f6e:	2301      	movs	r3, #1
 8004f70:	2104      	movs	r1, #4
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fde3 	bl	8004b3e <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8004f78:	f107 0212 	add.w	r2, r7, #18
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	2106      	movs	r1, #6
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff fddc 	bl	8004b3e <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8004f86:	7cfa      	ldrb	r2, [r7, #19]
 8004f88:	7cbb      	ldrb	r3, [r7, #18]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8004f90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	dc03      	bgt.n	8004fa0 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8004f98:	7ffb      	ldrb	r3, [r7, #31]
 8004f9a:	3320      	adds	r3, #32
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	77bb      	strb	r3, [r7, #30]
 8004fa4:	e035      	b.n	8005012 <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8004fa6:	f107 020c 	add.w	r2, r7, #12
 8004faa:	2306      	movs	r3, #6
 8004fac:	2107      	movs	r1, #7
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fdc5 	bl	8004b3e <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8004fb4:	7b3b      	ldrb	r3, [r7, #12]
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	461a      	mov	r2, r3
 8004fba:	7b7b      	ldrb	r3, [r7, #13]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	7bba      	ldrb	r2, [r7, #14]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004fc8:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	461a      	mov	r2, r3
 8004fd0:	7c3b      	ldrb	r3, [r7, #16]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	7c7a      	ldrb	r2, [r7, #17]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004fde:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8004fe0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8004fee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	3320      	adds	r3, #32
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	69b8      	ldr	r0, [r7, #24]
 8005002:	f7fe f89b 	bl	800313c <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8005006:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	3301      	adds	r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	77bb      	strb	r3, [r7, #30]
 8005012:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8005016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800501a:	429a      	cmp	r2, r3
 800501c:	dbc3      	blt.n	8004fa6 <max30102_read_fifo+0x4c>
    }
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8005034:	2301      	movs	r3, #1
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	211f      	movs	r1, #31
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f7ff fd7f 	bl	8004b3e <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8005040:	2301      	movs	r3, #1
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	2120      	movs	r1, #32
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff fd79 	bl	8004b3e <max30102_read>
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <Moving_Average_Init>:
  */



void Moving_Average_Init(FilterTypeDef* filter_struct)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	filter_struct->Sum = 0;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	625a      	str	r2, [r3, #36]	; 0x24
	filter_struct->WindowPointer = 0;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	629a      	str	r2, [r3, #40]	; 0x28
	
	for(uint32_t i=0; i<WindowLength; i++)
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e009      	b.n	8005084 <Moving_Average_Init+0x30>
	{
		filter_struct->History[i] = 0;
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<WindowLength; i++)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d9f2      	bls.n	8005070 <Moving_Average_Init+0x1c>
	}
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
float Moving_Average_Compute(float raw_data, FilterTypeDef* filter_struct)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	ed87 0a01 	vstr	s0, [r7, #4]
 80050a2:	6038      	str	r0, [r7, #0]

	filter_struct->Sum += raw_data;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80050aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80050ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	edd3 7a00 	vldr	s15, [r3]
 80050cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	601a      	str	r2, [r3, #0]
	if(filter_struct->WindowPointer < WindowLength - 1)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e8:	2b07      	cmp	r3, #7
 80050ea:	d805      	bhi.n	80050f8 <Moving_Average_Compute+0x60>
	{
		filter_struct->WindowPointer += 1;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	629a      	str	r2, [r3, #40]	; 0x28
 80050f6:	e002      	b.n	80050fe <Moving_Average_Compute+0x66>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
	}

		return filter_struct->Sum/WindowLength;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005104:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8005108:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800510c:	eef0 7a66 	vmov.f32	s15, s13


}
 8005110:	eeb0 0a67 	vmov.f32	s0, s15
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
	...

08005120 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8005126:	f000 fa29 	bl	800557c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c3, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800512a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800512e:	2201      	movs	r2, #1
 8005130:	2178      	movs	r1, #120	; 0x78
 8005132:	485b      	ldr	r0, [pc, #364]	; (80052a0 <SSD1306_Init+0x180>)
 8005134:	f002 f9da 	bl	80074ec <HAL_I2C_IsDeviceReady>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800513e:	2300      	movs	r3, #0
 8005140:	e0a9      	b.n	8005296 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8005142:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8005146:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005148:	e002      	b.n	8005150 <SSD1306_Init+0x30>
		p--;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3b01      	subs	r3, #1
 800514e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f9      	bne.n	800514a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8005156:	22ae      	movs	r2, #174	; 0xae
 8005158:	2100      	movs	r1, #0
 800515a:	2078      	movs	r0, #120	; 0x78
 800515c:	f000 fa8a 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8005160:	2220      	movs	r2, #32
 8005162:	2100      	movs	r1, #0
 8005164:	2078      	movs	r0, #120	; 0x78
 8005166:	f000 fa85 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800516a:	2210      	movs	r2, #16
 800516c:	2100      	movs	r1, #0
 800516e:	2078      	movs	r0, #120	; 0x78
 8005170:	f000 fa80 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005174:	22b0      	movs	r2, #176	; 0xb0
 8005176:	2100      	movs	r1, #0
 8005178:	2078      	movs	r0, #120	; 0x78
 800517a:	f000 fa7b 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800517e:	22c8      	movs	r2, #200	; 0xc8
 8005180:	2100      	movs	r1, #0
 8005182:	2078      	movs	r0, #120	; 0x78
 8005184:	f000 fa76 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8005188:	2200      	movs	r2, #0
 800518a:	2100      	movs	r1, #0
 800518c:	2078      	movs	r0, #120	; 0x78
 800518e:	f000 fa71 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8005192:	2210      	movs	r2, #16
 8005194:	2100      	movs	r1, #0
 8005196:	2078      	movs	r0, #120	; 0x78
 8005198:	f000 fa6c 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800519c:	2240      	movs	r2, #64	; 0x40
 800519e:	2100      	movs	r1, #0
 80051a0:	2078      	movs	r0, #120	; 0x78
 80051a2:	f000 fa67 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80051a6:	2281      	movs	r2, #129	; 0x81
 80051a8:	2100      	movs	r1, #0
 80051aa:	2078      	movs	r0, #120	; 0x78
 80051ac:	f000 fa62 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80051b0:	22ff      	movs	r2, #255	; 0xff
 80051b2:	2100      	movs	r1, #0
 80051b4:	2078      	movs	r0, #120	; 0x78
 80051b6:	f000 fa5d 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80051ba:	22a1      	movs	r2, #161	; 0xa1
 80051bc:	2100      	movs	r1, #0
 80051be:	2078      	movs	r0, #120	; 0x78
 80051c0:	f000 fa58 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80051c4:	22a6      	movs	r2, #166	; 0xa6
 80051c6:	2100      	movs	r1, #0
 80051c8:	2078      	movs	r0, #120	; 0x78
 80051ca:	f000 fa53 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80051ce:	22a8      	movs	r2, #168	; 0xa8
 80051d0:	2100      	movs	r1, #0
 80051d2:	2078      	movs	r0, #120	; 0x78
 80051d4:	f000 fa4e 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80051d8:	223f      	movs	r2, #63	; 0x3f
 80051da:	2100      	movs	r1, #0
 80051dc:	2078      	movs	r0, #120	; 0x78
 80051de:	f000 fa49 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80051e2:	22a4      	movs	r2, #164	; 0xa4
 80051e4:	2100      	movs	r1, #0
 80051e6:	2078      	movs	r0, #120	; 0x78
 80051e8:	f000 fa44 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80051ec:	22d3      	movs	r2, #211	; 0xd3
 80051ee:	2100      	movs	r1, #0
 80051f0:	2078      	movs	r0, #120	; 0x78
 80051f2:	f000 fa3f 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80051f6:	2200      	movs	r2, #0
 80051f8:	2100      	movs	r1, #0
 80051fa:	2078      	movs	r0, #120	; 0x78
 80051fc:	f000 fa3a 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8005200:	22d5      	movs	r2, #213	; 0xd5
 8005202:	2100      	movs	r1, #0
 8005204:	2078      	movs	r0, #120	; 0x78
 8005206:	f000 fa35 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800520a:	22f0      	movs	r2, #240	; 0xf0
 800520c:	2100      	movs	r1, #0
 800520e:	2078      	movs	r0, #120	; 0x78
 8005210:	f000 fa30 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8005214:	22d9      	movs	r2, #217	; 0xd9
 8005216:	2100      	movs	r1, #0
 8005218:	2078      	movs	r0, #120	; 0x78
 800521a:	f000 fa2b 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800521e:	2222      	movs	r2, #34	; 0x22
 8005220:	2100      	movs	r1, #0
 8005222:	2078      	movs	r0, #120	; 0x78
 8005224:	f000 fa26 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8005228:	22da      	movs	r2, #218	; 0xda
 800522a:	2100      	movs	r1, #0
 800522c:	2078      	movs	r0, #120	; 0x78
 800522e:	f000 fa21 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8005232:	2212      	movs	r2, #18
 8005234:	2100      	movs	r1, #0
 8005236:	2078      	movs	r0, #120	; 0x78
 8005238:	f000 fa1c 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800523c:	22db      	movs	r2, #219	; 0xdb
 800523e:	2100      	movs	r1, #0
 8005240:	2078      	movs	r0, #120	; 0x78
 8005242:	f000 fa17 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8005246:	2220      	movs	r2, #32
 8005248:	2100      	movs	r1, #0
 800524a:	2078      	movs	r0, #120	; 0x78
 800524c:	f000 fa12 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8005250:	228d      	movs	r2, #141	; 0x8d
 8005252:	2100      	movs	r1, #0
 8005254:	2078      	movs	r0, #120	; 0x78
 8005256:	f000 fa0d 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800525a:	2214      	movs	r2, #20
 800525c:	2100      	movs	r1, #0
 800525e:	2078      	movs	r0, #120	; 0x78
 8005260:	f000 fa08 	bl	8005674 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8005264:	22af      	movs	r2, #175	; 0xaf
 8005266:	2100      	movs	r1, #0
 8005268:	2078      	movs	r0, #120	; 0x78
 800526a:	f000 fa03 	bl	8005674 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800526e:	222e      	movs	r2, #46	; 0x2e
 8005270:	2100      	movs	r1, #0
 8005272:	2078      	movs	r0, #120	; 0x78
 8005274:	f000 f9fe 	bl	8005674 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8005278:	2000      	movs	r0, #0
 800527a:	f000 f843 	bl	8005304 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800527e:	f000 f813 	bl	80052a8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8005282:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <SSD1306_Init+0x184>)
 8005284:	2200      	movs	r2, #0
 8005286:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8005288:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <SSD1306_Init+0x184>)
 800528a:	2200      	movs	r2, #0
 800528c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <SSD1306_Init+0x184>)
 8005290:	2201      	movs	r2, #1
 8005292:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8005294:	2301      	movs	r3, #1
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000310 	.word	0x20000310
 80052a4:	20002e58 	.word	0x20002e58

080052a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80052ae:	2300      	movs	r3, #0
 80052b0:	71fb      	strb	r3, [r7, #7]
 80052b2:	e01d      	b.n	80052f0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	3b50      	subs	r3, #80	; 0x50
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	2100      	movs	r1, #0
 80052be:	2078      	movs	r0, #120	; 0x78
 80052c0:	f000 f9d8 	bl	8005674 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80052c4:	2200      	movs	r2, #0
 80052c6:	2100      	movs	r1, #0
 80052c8:	2078      	movs	r0, #120	; 0x78
 80052ca:	f000 f9d3 	bl	8005674 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80052ce:	2210      	movs	r2, #16
 80052d0:	2100      	movs	r1, #0
 80052d2:	2078      	movs	r0, #120	; 0x78
 80052d4:	f000 f9ce 	bl	8005674 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	01db      	lsls	r3, r3, #7
 80052dc:	4a08      	ldr	r2, [pc, #32]	; (8005300 <SSD1306_UpdateScreen+0x58>)
 80052de:	441a      	add	r2, r3
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	2140      	movs	r1, #64	; 0x40
 80052e4:	2078      	movs	r0, #120	; 0x78
 80052e6:	f000 f95f 	bl	80055a8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	3301      	adds	r3, #1
 80052ee:	71fb      	strb	r3, [r7, #7]
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	2b07      	cmp	r3, #7
 80052f4:	d9de      	bls.n	80052b4 <SSD1306_UpdateScreen+0xc>
	}
}
 80052f6:	bf00      	nop
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20002a58 	.word	0x20002a58

08005304 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <SSD1306_Fill+0x14>
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <SSD1306_Fill+0x16>
 8005318:	23ff      	movs	r3, #255	; 0xff
 800531a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800531e:	4619      	mov	r1, r3
 8005320:	4803      	ldr	r0, [pc, #12]	; (8005330 <SSD1306_Fill+0x2c>)
 8005322:	f008 fe57 	bl	800dfd4 <memset>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20002a58 	.word	0x20002a58

08005334 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	80fb      	strh	r3, [r7, #6]
 800533e:	460b      	mov	r3, r1
 8005340:	80bb      	strh	r3, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	70fb      	strb	r3, [r7, #3]
	if (
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	2b7f      	cmp	r3, #127	; 0x7f
 800534a:	d848      	bhi.n	80053de <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800534c:	88bb      	ldrh	r3, [r7, #4]
 800534e:	2b3f      	cmp	r3, #63	; 0x3f
 8005350:	d845      	bhi.n	80053de <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8005352:	4b26      	ldr	r3, [pc, #152]	; (80053ec <SSD1306_DrawPixel+0xb8>)
 8005354:	791b      	ldrb	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf0c      	ite	eq
 8005360:	2301      	moveq	r3, #1
 8005362:	2300      	movne	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d11a      	bne.n	80053a4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	88bb      	ldrh	r3, [r7, #4]
 8005372:	08db      	lsrs	r3, r3, #3
 8005374:	b298      	uxth	r0, r3
 8005376:	4603      	mov	r3, r0
 8005378:	01db      	lsls	r3, r3, #7
 800537a:	4413      	add	r3, r2
 800537c:	4a1c      	ldr	r2, [pc, #112]	; (80053f0 <SSD1306_DrawPixel+0xbc>)
 800537e:	5cd3      	ldrb	r3, [r2, r3]
 8005380:	b25a      	sxtb	r2, r3
 8005382:	88bb      	ldrh	r3, [r7, #4]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	2101      	movs	r1, #1
 800538a:	fa01 f303 	lsl.w	r3, r1, r3
 800538e:	b25b      	sxtb	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b259      	sxtb	r1, r3
 8005394:	88fa      	ldrh	r2, [r7, #6]
 8005396:	4603      	mov	r3, r0
 8005398:	01db      	lsls	r3, r3, #7
 800539a:	4413      	add	r3, r2
 800539c:	b2c9      	uxtb	r1, r1
 800539e:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <SSD1306_DrawPixel+0xbc>)
 80053a0:	54d1      	strb	r1, [r2, r3]
 80053a2:	e01d      	b.n	80053e0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80053a4:	88fa      	ldrh	r2, [r7, #6]
 80053a6:	88bb      	ldrh	r3, [r7, #4]
 80053a8:	08db      	lsrs	r3, r3, #3
 80053aa:	b298      	uxth	r0, r3
 80053ac:	4603      	mov	r3, r0
 80053ae:	01db      	lsls	r3, r3, #7
 80053b0:	4413      	add	r3, r2
 80053b2:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <SSD1306_DrawPixel+0xbc>)
 80053b4:	5cd3      	ldrb	r3, [r2, r3]
 80053b6:	b25a      	sxtb	r2, r3
 80053b8:	88bb      	ldrh	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	2101      	movs	r1, #1
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	b25b      	sxtb	r3, r3
 80053c6:	43db      	mvns	r3, r3
 80053c8:	b25b      	sxtb	r3, r3
 80053ca:	4013      	ands	r3, r2
 80053cc:	b259      	sxtb	r1, r3
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	4603      	mov	r3, r0
 80053d2:	01db      	lsls	r3, r3, #7
 80053d4:	4413      	add	r3, r2
 80053d6:	b2c9      	uxtb	r1, r1
 80053d8:	4a05      	ldr	r2, [pc, #20]	; (80053f0 <SSD1306_DrawPixel+0xbc>)
 80053da:	54d1      	strb	r1, [r2, r3]
 80053dc:	e000      	b.n	80053e0 <SSD1306_DrawPixel+0xac>
		return;
 80053de:	bf00      	nop
	}
}
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20002e58 	.word	0x20002e58
 80053f0:	20002a58 	.word	0x20002a58

080053f4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	460a      	mov	r2, r1
 80053fe:	80fb      	strh	r3, [r7, #6]
 8005400:	4613      	mov	r3, r2
 8005402:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8005404:	4a05      	ldr	r2, [pc, #20]	; (800541c <SSD1306_GotoXY+0x28>)
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800540a:	4a04      	ldr	r2, [pc, #16]	; (800541c <SSD1306_GotoXY+0x28>)
 800540c:	88bb      	ldrh	r3, [r7, #4]
 800540e:	8053      	strh	r3, [r2, #2]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	20002e58 	.word	0x20002e58

08005420 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	71fb      	strb	r3, [r7, #7]
 800542c:	4613      	mov	r3, r2
 800542e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8005430:	4b3a      	ldr	r3, [pc, #232]	; (800551c <SSD1306_Putc+0xfc>)
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	4413      	add	r3, r2
	if (
 800543c:	2b7f      	cmp	r3, #127	; 0x7f
 800543e:	dc07      	bgt.n	8005450 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8005440:	4b36      	ldr	r3, [pc, #216]	; (800551c <SSD1306_Putc+0xfc>)
 8005442:	885b      	ldrh	r3, [r3, #2]
 8005444:	461a      	mov	r2, r3
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	785b      	ldrb	r3, [r3, #1]
 800544a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800544c:	2b3f      	cmp	r3, #63	; 0x3f
 800544e:	dd01      	ble.n	8005454 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8005450:	2300      	movs	r3, #0
 8005452:	e05e      	b.n	8005512 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e04b      	b.n	80054f2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	3b20      	subs	r3, #32
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	7849      	ldrb	r1, [r1, #1]
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	4619      	mov	r1, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	440b      	add	r3, r1
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	e030      	b.n	80054e0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d010      	beq.n	80054b0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800548e:	4b23      	ldr	r3, [pc, #140]	; (800551c <SSD1306_Putc+0xfc>)
 8005490:	881a      	ldrh	r2, [r3, #0]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	b29b      	uxth	r3, r3
 8005496:	4413      	add	r3, r2
 8005498:	b298      	uxth	r0, r3
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <SSD1306_Putc+0xfc>)
 800549c:	885a      	ldrh	r2, [r3, #2]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4413      	add	r3, r2
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	79ba      	ldrb	r2, [r7, #6]
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7ff ff43 	bl	8005334 <SSD1306_DrawPixel>
 80054ae:	e014      	b.n	80054da <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80054b0:	4b1a      	ldr	r3, [pc, #104]	; (800551c <SSD1306_Putc+0xfc>)
 80054b2:	881a      	ldrh	r2, [r3, #0]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	4413      	add	r3, r2
 80054ba:	b298      	uxth	r0, r3
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <SSD1306_Putc+0xfc>)
 80054be:	885a      	ldrh	r2, [r3, #2]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	4413      	add	r3, r2
 80054c6:	b299      	uxth	r1, r3
 80054c8:	79bb      	ldrb	r3, [r7, #6]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	f7ff ff2d 	bl	8005334 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	3301      	adds	r3, #1
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d3c8      	bcc.n	800547e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3301      	adds	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	461a      	mov	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d3ad      	bcc.n	800545a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80054fe:	4b07      	ldr	r3, [pc, #28]	; (800551c <SSD1306_Putc+0xfc>)
 8005500:	881a      	ldrh	r2, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	4413      	add	r3, r2
 800550a:	b29a      	uxth	r2, r3
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <SSD1306_Putc+0xfc>)
 800550e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8005510:	79fb      	ldrb	r3, [r7, #7]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20002e58 	.word	0x20002e58

08005520 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800552e:	e012      	b.n	8005556 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	79fa      	ldrb	r2, [r7, #7]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff71 	bl	8005420 <SSD1306_Putc>
 800553e:	4603      	mov	r3, r0
 8005540:	461a      	mov	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d002      	beq.n	8005550 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	e008      	b.n	8005562 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3301      	adds	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e8      	bne.n	8005530 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	781b      	ldrb	r3, [r3, #0]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800556e:	2000      	movs	r0, #0
 8005570:	f7ff fec8 	bl	8005304 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8005574:	f7ff fe98 	bl	80052a8 <SSD1306_UpdateScreen>
}
 8005578:	bf00      	nop
 800557a:	bd80      	pop	{r7, pc}

0800557c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <ssd1306_I2C_Init+0x28>)
 8005584:	607b      	str	r3, [r7, #4]
	while(p>0)
 8005586:	e002      	b.n	800558e <ssd1306_I2C_Init+0x12>
		p--;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3b01      	subs	r3, #1
 800558c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f9      	bne.n	8005588 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c3);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	0003d090 	.word	0x0003d090

080055a8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b0c7      	sub	sp, #284	; 0x11c
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80055b6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80055ba:	600a      	str	r2, [r1, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80055c6:	4622      	mov	r2, r4
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055ce:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80055d2:	4602      	mov	r2, r0
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80055de:	460a      	mov	r2, r1
 80055e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80055e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80055ee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80055f2:	7812      	ldrb	r2, [r2, #0]
 80055f4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80055fc:	e015      	b.n	800562a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80055fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005602:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005606:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	441a      	add	r2, r3
 800560e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005612:	3301      	adds	r3, #1
 8005614:	7811      	ldrb	r1, [r2, #0]
 8005616:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800561a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800561e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8005620:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005624:	3301      	adds	r3, #1
 8005626:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800562a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800562e:	b29b      	uxth	r3, r3
 8005630:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005634:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005638:	8812      	ldrh	r2, [r2, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d8df      	bhi.n	80055fe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c3, address, dt, count+1, 10);
 800563e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005642:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b299      	uxth	r1, r3
 800564a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800564e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	b29b      	uxth	r3, r3
 8005658:	f107 020c 	add.w	r2, r7, #12
 800565c:	200a      	movs	r0, #10
 800565e:	9000      	str	r0, [sp, #0]
 8005660:	4803      	ldr	r0, [pc, #12]	; (8005670 <ssd1306_I2C_WriteMulti+0xc8>)
 8005662:	f001 f8ff 	bl	8006864 <HAL_I2C_Master_Transmit>
}
 8005666:	bf00      	nop
 8005668:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800566c:	46bd      	mov	sp, r7
 800566e:	bd90      	pop	{r4, r7, pc}
 8005670:	20000310 	.word	0x20000310

08005674 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	4603      	mov	r3, r0
 800567c:	71fb      	strb	r3, [r7, #7]
 800567e:	460b      	mov	r3, r1
 8005680:	71bb      	strb	r3, [r7, #6]
 8005682:	4613      	mov	r3, r2
 8005684:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8005686:	79bb      	ldrb	r3, [r7, #6]
 8005688:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800568a:	797b      	ldrb	r3, [r7, #5]
 800568c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, address, dt, 2, 10);
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	b299      	uxth	r1, r3
 8005692:	f107 020c 	add.w	r2, r7, #12
 8005696:	230a      	movs	r3, #10
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2302      	movs	r3, #2
 800569c:	4803      	ldr	r0, [pc, #12]	; (80056ac <ssd1306_I2C_Write+0x38>)
 800569e:	f001 f8e1 	bl	8006864 <HAL_I2C_Master_Transmit>
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000310 	.word	0x20000310

080056b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	4b10      	ldr	r3, [pc, #64]	; (80056fc <HAL_MspInit+0x4c>)
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	4a0f      	ldr	r2, [pc, #60]	; (80056fc <HAL_MspInit+0x4c>)
 80056c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056c4:	6453      	str	r3, [r2, #68]	; 0x44
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <HAL_MspInit+0x4c>)
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056d2:	2300      	movs	r3, #0
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_MspInit+0x4c>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4a08      	ldr	r2, [pc, #32]	; (80056fc <HAL_MspInit+0x4c>)
 80056dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e0:	6413      	str	r3, [r2, #64]	; 0x40
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_MspInit+0x4c>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800

08005700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08e      	sub	sp, #56	; 0x38
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a63      	ldr	r2, [pc, #396]	; (80058ac <HAL_I2C_MspInit+0x1ac>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d12c      	bne.n	800577c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	4b62      	ldr	r3, [pc, #392]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	4a61      	ldr	r2, [pc, #388]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 800572c:	f043 0302 	orr.w	r3, r3, #2
 8005730:	6313      	str	r3, [r2, #48]	; 0x30
 8005732:	4b5f      	ldr	r3, [pc, #380]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	623b      	str	r3, [r7, #32]
 800573c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_MAX30102_Pin|I2C1_SDA_MAX30102_Pin;
 800573e:	23c0      	movs	r3, #192	; 0xc0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005742:	2312      	movs	r3, #18
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005746:	2300      	movs	r3, #0
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800574a:	2303      	movs	r3, #3
 800574c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800574e:	2304      	movs	r3, #4
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005756:	4619      	mov	r1, r3
 8005758:	4856      	ldr	r0, [pc, #344]	; (80058b4 <HAL_I2C_MspInit+0x1b4>)
 800575a:	f000 fd71 	bl	8006240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	4b53      	ldr	r3, [pc, #332]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	4a52      	ldr	r2, [pc, #328]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800576c:	6413      	str	r3, [r2, #64]	; 0x40
 800576e:	4b50      	ldr	r3, [pc, #320]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800577a:	e092      	b.n	80058a2 <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a4d      	ldr	r2, [pc, #308]	; (80058b8 <HAL_I2C_MspInit+0x1b8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d13d      	bne.n	8005802 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	4b49      	ldr	r3, [pc, #292]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	4a48      	ldr	r2, [pc, #288]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005790:	f043 0302 	orr.w	r3, r3, #2
 8005794:	6313      	str	r3, [r2, #48]	; 0x30
 8005796:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	61bb      	str	r3, [r7, #24]
 80057a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = I2C2_SCL_BME280_Pin;
 80057a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057a8:	2312      	movs	r3, #18
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b0:	2303      	movs	r3, #3
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80057b4:	2304      	movs	r3, #4
 80057b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C2_SCL_BME280_GPIO_Port, &GPIO_InitStruct);
 80057b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057bc:	4619      	mov	r1, r3
 80057be:	483d      	ldr	r0, [pc, #244]	; (80058b4 <HAL_I2C_MspInit+0x1b4>)
 80057c0:	f000 fd3e 	bl	8006240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_BME280_Pin;
 80057c4:	2308      	movs	r3, #8
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057c8:	2312      	movs	r3, #18
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d0:	2303      	movs	r3, #3
 80057d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80057d4:	2309      	movs	r3, #9
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C2_SDA_BME280_GPIO_Port, &GPIO_InitStruct);
 80057d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057dc:	4619      	mov	r1, r3
 80057de:	4835      	ldr	r0, [pc, #212]	; (80058b4 <HAL_I2C_MspInit+0x1b4>)
 80057e0:	f000 fd2e 	bl	8006240 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	4a30      	ldr	r2, [pc, #192]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 80057ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057f2:	6413      	str	r3, [r2, #64]	; 0x40
 80057f4:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	697b      	ldr	r3, [r7, #20]
}
 8005800:	e04f      	b.n	80058a2 <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a2d      	ldr	r2, [pc, #180]	; (80058bc <HAL_I2C_MspInit+0x1bc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d14a      	bne.n	80058a2 <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	6313      	str	r3, [r2, #48]	; 0x30
 800581c:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 800581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005832:	f043 0302 	orr.w	r3, r3, #2
 8005836:	6313      	str	r3, [r2, #48]	; 0x30
 8005838:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_LCD_Pin;
 8005844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800584a:	2312      	movs	r3, #18
 800584c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584e:	2300      	movs	r3, #0
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005852:	2303      	movs	r3, #3
 8005854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005856:	2304      	movs	r3, #4
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SCL_LCD_GPIO_Port, &GPIO_InitStruct);
 800585a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800585e:	4619      	mov	r1, r3
 8005860:	4817      	ldr	r0, [pc, #92]	; (80058c0 <HAL_I2C_MspInit+0x1c0>)
 8005862:	f000 fced 	bl	8006240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_LCD_Pin;
 8005866:	2310      	movs	r3, #16
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800586a:	2312      	movs	r3, #18
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800586e:	2300      	movs	r3, #0
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005872:	2303      	movs	r3, #3
 8005874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005876:	2309      	movs	r3, #9
 8005878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SDA_LCD_GPIO_Port, &GPIO_InitStruct);
 800587a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800587e:	4619      	mov	r1, r3
 8005880:	480c      	ldr	r0, [pc, #48]	; (80058b4 <HAL_I2C_MspInit+0x1b4>)
 8005882:	f000 fcdd 	bl	8006240 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	4a08      	ldr	r2, [pc, #32]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
 8005896:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <HAL_I2C_MspInit+0x1b0>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800589e:	60bb      	str	r3, [r7, #8]
 80058a0:	68bb      	ldr	r3, [r7, #8]
}
 80058a2:	bf00      	nop
 80058a4:	3738      	adds	r7, #56	; 0x38
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40005400 	.word	0x40005400
 80058b0:	40023800 	.word	0x40023800
 80058b4:	40020400 	.word	0x40020400
 80058b8:	40005800 	.word	0x40005800
 80058bc:	40005c00 	.word	0x40005c00
 80058c0:	40020000 	.word	0x40020000

080058c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	; 0x28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058cc:	f107 0314 	add.w	r3, r7, #20
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a19      	ldr	r2, [pc, #100]	; (8005948 <HAL_SPI_MspInit+0x84>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d12b      	bne.n	800593e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	4b18      	ldr	r3, [pc, #96]	; (800594c <HAL_SPI_MspInit+0x88>)
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <HAL_SPI_MspInit+0x88>)
 80058f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058f4:	6453      	str	r3, [r2, #68]	; 0x44
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <HAL_SPI_MspInit+0x88>)
 80058f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <HAL_SPI_MspInit+0x88>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	4a10      	ldr	r2, [pc, #64]	; (800594c <HAL_SPI_MspInit+0x88>)
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	6313      	str	r3, [r2, #48]	; 0x30
 8005912:	4b0e      	ldr	r3, [pc, #56]	; (800594c <HAL_SPI_MspInit+0x88>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800591e:	23e0      	movs	r3, #224	; 0xe0
 8005920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005922:	2302      	movs	r3, #2
 8005924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800592a:	2303      	movs	r3, #3
 800592c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800592e:	2305      	movs	r3, #5
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005932:	f107 0314 	add.w	r3, r7, #20
 8005936:	4619      	mov	r1, r3
 8005938:	4805      	ldr	r0, [pc, #20]	; (8005950 <HAL_SPI_MspInit+0x8c>)
 800593a:	f000 fc81 	bl	8006240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800593e:	bf00      	nop
 8005940:	3728      	adds	r7, #40	; 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40013000 	.word	0x40013000
 800594c:	40023800 	.word	0x40023800
 8005950:	40020000 	.word	0x40020000

08005954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005964:	d116      	bne.n	8005994 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <HAL_TIM_Base_MspInit+0x70>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <HAL_TIM_Base_MspInit+0x70>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	6413      	str	r3, [r2, #64]	; 0x40
 8005976:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <HAL_TIM_Base_MspInit+0x70>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005982:	2200      	movs	r2, #0
 8005984:	2100      	movs	r1, #0
 8005986:	201c      	movs	r0, #28
 8005988:	f000 fb9e 	bl	80060c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800598c:	201c      	movs	r0, #28
 800598e:	f000 fbb7 	bl	8006100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005992:	e012      	b.n	80059ba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a0b      	ldr	r2, [pc, #44]	; (80059c8 <HAL_TIM_Base_MspInit+0x74>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d10d      	bne.n	80059ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <HAL_TIM_Base_MspInit+0x70>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <HAL_TIM_Base_MspInit+0x70>)
 80059a8:	f043 0308 	orr.w	r3, r3, #8
 80059ac:	6413      	str	r3, [r2, #64]	; 0x40
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <HAL_TIM_Base_MspInit+0x70>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40000c00 	.word	0x40000c00

080059cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08c      	sub	sp, #48	; 0x30
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d4:	f107 031c 	add.w	r3, r7, #28
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a36      	ldr	r2, [pc, #216]	; (8005ac4 <HAL_UART_MspInit+0xf8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d12d      	bne.n	8005a4a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80059ee:	2300      	movs	r3, #0
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	4b35      	ldr	r3, [pc, #212]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	4a34      	ldr	r2, [pc, #208]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 80059f8:	f043 0310 	orr.w	r3, r3, #16
 80059fc:	6453      	str	r3, [r2, #68]	; 0x44
 80059fe:	4b32      	ldr	r3, [pc, #200]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	4a2d      	ldr	r2, [pc, #180]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_DEBUG_Pin|USART1_RX_DEBUG_Pin;
 8005a26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a34:	2303      	movs	r3, #3
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a38:	2307      	movs	r3, #7
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a3c:	f107 031c 	add.w	r3, r7, #28
 8005a40:	4619      	mov	r1, r3
 8005a42:	4822      	ldr	r0, [pc, #136]	; (8005acc <HAL_UART_MspInit+0x100>)
 8005a44:	f000 fbfc 	bl	8006240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005a48:	e038      	b.n	8005abc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a20      	ldr	r2, [pc, #128]	; (8005ad0 <HAL_UART_MspInit+0x104>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d133      	bne.n	8005abc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a54:	2300      	movs	r3, #0
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	4b1b      	ldr	r3, [pc, #108]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a62:	6413      	str	r3, [r2, #64]	; 0x40
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <HAL_UART_MspInit+0xfc>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_GPS_Pin|USART2_RX_GPS_Pin;
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a90:	2302      	movs	r3, #2
 8005a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a9c:	2307      	movs	r3, #7
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa0:	f107 031c 	add.w	r3, r7, #28
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4809      	ldr	r0, [pc, #36]	; (8005acc <HAL_UART_MspInit+0x100>)
 8005aa8:	f000 fbca 	bl	8006240 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005aac:	2200      	movs	r2, #0
 8005aae:	2100      	movs	r1, #0
 8005ab0:	2026      	movs	r0, #38	; 0x26
 8005ab2:	f000 fb09 	bl	80060c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005ab6:	2026      	movs	r0, #38	; 0x26
 8005ab8:	f000 fb22 	bl	8006100 <HAL_NVIC_EnableIRQ>
}
 8005abc:	bf00      	nop
 8005abe:	3730      	adds	r7, #48	; 0x30
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40011000 	.word	0x40011000
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40020000 	.word	0x40020000
 8005ad0:	40004400 	.word	0x40004400

08005ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08c      	sub	sp, #48	; 0x30
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	4b2e      	ldr	r3, [pc, #184]	; (8005ba4 <HAL_InitTick+0xd0>)
 8005aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aec:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <HAL_InitTick+0xd0>)
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	6453      	str	r3, [r2, #68]	; 0x44
 8005af4:	4b2b      	ldr	r3, [pc, #172]	; (8005ba4 <HAL_InitTick+0xd0>)
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005b00:	f107 020c 	add.w	r2, r7, #12
 8005b04:	f107 0310 	add.w	r3, r7, #16
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f002 ff20 	bl	8008950 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005b10:	f002 ff0a 	bl	8008928 <HAL_RCC_GetPCLK2Freq>
 8005b14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	4a23      	ldr	r2, [pc, #140]	; (8005ba8 <HAL_InitTick+0xd4>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	0c9b      	lsrs	r3, r3, #18
 8005b20:	3b01      	subs	r3, #1
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005b24:	4b21      	ldr	r3, [pc, #132]	; (8005bac <HAL_InitTick+0xd8>)
 8005b26:	4a22      	ldr	r2, [pc, #136]	; (8005bb0 <HAL_InitTick+0xdc>)
 8005b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005b2a:	4b20      	ldr	r3, [pc, #128]	; (8005bac <HAL_InitTick+0xd8>)
 8005b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005b32:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <HAL_InitTick+0xd8>)
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005b38:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <HAL_InitTick+0xd8>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b3e:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <HAL_InitTick+0xd8>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b44:	4b19      	ldr	r3, [pc, #100]	; (8005bac <HAL_InitTick+0xd8>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005b4a:	4818      	ldr	r0, [pc, #96]	; (8005bac <HAL_InitTick+0xd8>)
 8005b4c:	f003 fb64 	bl	8009218 <HAL_TIM_Base_Init>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d11b      	bne.n	8005b96 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005b5e:	4813      	ldr	r0, [pc, #76]	; (8005bac <HAL_InitTick+0xd8>)
 8005b60:	f003 fc04 	bl	800936c <HAL_TIM_Base_Start_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d111      	bne.n	8005b96 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005b72:	2019      	movs	r0, #25
 8005b74:	f000 fac4 	bl	8006100 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b0f      	cmp	r3, #15
 8005b7c:	d808      	bhi.n	8005b90 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005b7e:	2200      	movs	r2, #0
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	2019      	movs	r0, #25
 8005b84:	f000 faa0 	bl	80060c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b88:	4a0a      	ldr	r2, [pc, #40]	; (8005bb4 <HAL_InitTick+0xe0>)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e002      	b.n	8005b96 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3730      	adds	r7, #48	; 0x30
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	431bde83 	.word	0x431bde83
 8005bac:	20002e60 	.word	0x20002e60
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	20000018 	.word	0x20000018

08005bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005bbc:	e7fe      	b.n	8005bbc <NMI_Handler+0x4>

08005bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bc2:	e7fe      	b.n	8005bc2 <HardFault_Handler+0x4>

08005bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bc8:	e7fe      	b.n	8005bc8 <MemManage_Handler+0x4>

08005bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bce:	e7fe      	b.n	8005bce <BusFault_Handler+0x4>

08005bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bd4:	e7fe      	b.n	8005bd4 <UsageFault_Handler+0x4>

08005bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005be8:	bf00      	nop
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005bf6:	bf00      	nop
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)//PB8 Interrupt
{                            //Handler
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	max30102_on_interrupt(&max30102);
 8005c14:	4804      	ldr	r0, [pc, #16]	; (8005c28 <EXTI9_5_IRQHandler+0x18>)
 8005c16:	f7ff f820 	bl	8004c5a <max30102_on_interrupt>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8005c1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005c1e:	f000 fcc5 	bl	80065ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000668 	.word	0x20000668

08005c2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005c30:	4802      	ldr	r0, [pc, #8]	; (8005c3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005c32:	f003 fbfd 	bl	8009430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20002e60 	.word	0x20002e60

08005c40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c44:	4802      	ldr	r0, [pc, #8]	; (8005c50 <TIM2_IRQHandler+0x10>)
 8005c46:	f003 fbf3 	bl	8009430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200003bc 	.word	0x200003bc

08005c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005c58:	4802      	ldr	r0, [pc, #8]	; (8005c64 <USART2_IRQHandler+0x10>)
 8005c5a:	f003 fffb 	bl	8009c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000490 	.word	0x20000490

08005c68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1_Pin);
 8005c6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005c70:	f000 fc9c 	bl	80065ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI_Nabiz_Pin);
 8005c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005c78:	f000 fc98 	bl	80065ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2_Pin);
 8005c7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005c80:	f000 fc94 	bl	80065ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005c84:	bf00      	nop
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return 1;
 8005c8c:	2301      	movs	r3, #1
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <_kill>:

int _kill(int pid, int sig)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ca2:	f008 f94f 	bl	800df44 <__errno>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2216      	movs	r2, #22
 8005caa:	601a      	str	r2, [r3, #0]
  return -1;
 8005cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <_exit>:

void _exit (int status)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff ffe7 	bl	8005c98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005cca:	e7fe      	b.n	8005cca <_exit+0x12>

08005ccc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	e00a      	b.n	8005cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005cde:	f3af 8000 	nop.w
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	60ba      	str	r2, [r7, #8]
 8005cea:	b2ca      	uxtb	r2, r1
 8005cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	dbf0      	blt.n	8005cde <_read+0x12>
  }

  return len;
 8005cfc:	687b      	ldr	r3, [r7, #4]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e009      	b.n	8005d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	60ba      	str	r2, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	dbf1      	blt.n	8005d18 <_write+0x12>
  }
  return len;
 8005d34:	687b      	ldr	r3, [r7, #4]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <_close>:

int _close(int file)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d66:	605a      	str	r2, [r3, #4]
  return 0;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <_isatty>:

int _isatty(int file)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005d7e:	2301      	movs	r3, #1
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005db0:	4a14      	ldr	r2, [pc, #80]	; (8005e04 <_sbrk+0x5c>)
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <_sbrk+0x60>)
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005dbc:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <_sbrk+0x64>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <_sbrk+0x64>)
 8005dc6:	4a12      	ldr	r2, [pc, #72]	; (8005e10 <_sbrk+0x68>)
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <_sbrk+0x64>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d207      	bcs.n	8005de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005dd8:	f008 f8b4 	bl	800df44 <__errno>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	220c      	movs	r2, #12
 8005de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
 8005de6:	e009      	b.n	8005dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005de8:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <_sbrk+0x64>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <_sbrk+0x64>)
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4413      	add	r3, r2
 8005df6:	4a05      	ldr	r2, [pc, #20]	; (8005e0c <_sbrk+0x64>)
 8005df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20020000 	.word	0x20020000
 8005e08:	00000400 	.word	0x00000400
 8005e0c:	20002eac 	.word	0x20002eac
 8005e10:	20003100 	.word	0x20003100

08005e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <SystemInit+0x20>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	4a05      	ldr	r2, [pc, #20]	; (8005e34 <SystemInit+0x20>)
 8005e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e28:	bf00      	nop
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	e000ed00 	.word	0xe000ed00

08005e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e3c:	480d      	ldr	r0, [pc, #52]	; (8005e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e3e:	490e      	ldr	r1, [pc, #56]	; (8005e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e40:	4a0e      	ldr	r2, [pc, #56]	; (8005e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e44:	e002      	b.n	8005e4c <LoopCopyDataInit>

08005e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e4a:	3304      	adds	r3, #4

08005e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e50:	d3f9      	bcc.n	8005e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e52:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e54:	4c0b      	ldr	r4, [pc, #44]	; (8005e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e58:	e001      	b.n	8005e5e <LoopFillZerobss>

08005e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e5c:	3204      	adds	r2, #4

08005e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e60:	d3fb      	bcc.n	8005e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e62:	f7ff ffd7 	bl	8005e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e66:	f008 f873 	bl	800df50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e6a:	f7fd fae9 	bl	8003440 <main>
  bx  lr    
 8005e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e78:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005e7c:	08015fa0 	.word	0x08015fa0
  ldr r2, =_sbss
 8005e80:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005e84:	20003100 	.word	0x20003100

08005e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e88:	e7fe      	b.n	8005e88 <ADC_IRQHandler>
	...

08005e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e90:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <HAL_Init+0x40>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <HAL_Init+0x40>)
 8005e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_Init+0x40>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <HAL_Init+0x40>)
 8005ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_Init+0x40>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <HAL_Init+0x40>)
 8005eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eb4:	2003      	movs	r0, #3
 8005eb6:	f000 f8fc 	bl	80060b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eba:	200f      	movs	r0, #15
 8005ebc:	f7ff fe0a 	bl	8005ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ec0:	f7ff fbf6 	bl	80056b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40023c00 	.word	0x40023c00

08005ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <HAL_IncTick+0x20>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_IncTick+0x24>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4413      	add	r3, r2
 8005ee0:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <HAL_IncTick+0x24>)
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	2000001c 	.word	0x2000001c
 8005ef4:	20002eb0 	.word	0x20002eb0

08005ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return uwTick;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_GetTick+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20002eb0 	.word	0x20002eb0

08005f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f18:	f7ff ffee 	bl	8005ef8 <HAL_GetTick>
 8005f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d005      	beq.n	8005f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f2a:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <HAL_Delay+0x44>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f36:	bf00      	nop
 8005f38:	f7ff ffde 	bl	8005ef8 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d8f7      	bhi.n	8005f38 <HAL_Delay+0x28>
  {
  }
}
 8005f48:	bf00      	nop
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	2000001c 	.word	0x2000001c

08005f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <__NVIC_SetPriorityGrouping+0x44>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f74:	4013      	ands	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f8a:	4a04      	ldr	r2, [pc, #16]	; (8005f9c <__NVIC_SetPriorityGrouping+0x44>)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	60d3      	str	r3, [r2, #12]
}
 8005f90:	bf00      	nop
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	e000ed00 	.word	0xe000ed00

08005fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	f003 0307 	and.w	r3, r3, #7
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	db0b      	blt.n	8005fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	f003 021f 	and.w	r2, r3, #31
 8005fd4:	4907      	ldr	r1, [pc, #28]	; (8005ff4 <__NVIC_EnableIRQ+0x38>)
 8005fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	2001      	movs	r0, #1
 8005fde:	fa00 f202 	lsl.w	r2, r0, r2
 8005fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	e000e100 	.word	0xe000e100

08005ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	6039      	str	r1, [r7, #0]
 8006002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006008:	2b00      	cmp	r3, #0
 800600a:	db0a      	blt.n	8006022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	490c      	ldr	r1, [pc, #48]	; (8006044 <__NVIC_SetPriority+0x4c>)
 8006012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006016:	0112      	lsls	r2, r2, #4
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	440b      	add	r3, r1
 800601c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006020:	e00a      	b.n	8006038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	b2da      	uxtb	r2, r3
 8006026:	4908      	ldr	r1, [pc, #32]	; (8006048 <__NVIC_SetPriority+0x50>)
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	3b04      	subs	r3, #4
 8006030:	0112      	lsls	r2, r2, #4
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	440b      	add	r3, r1
 8006036:	761a      	strb	r2, [r3, #24]
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	e000e100 	.word	0xe000e100
 8006048:	e000ed00 	.word	0xe000ed00

0800604c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800604c:	b480      	push	{r7}
 800604e:	b089      	sub	sp, #36	; 0x24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f1c3 0307 	rsb	r3, r3, #7
 8006066:	2b04      	cmp	r3, #4
 8006068:	bf28      	it	cs
 800606a:	2304      	movcs	r3, #4
 800606c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	3304      	adds	r3, #4
 8006072:	2b06      	cmp	r3, #6
 8006074:	d902      	bls.n	800607c <NVIC_EncodePriority+0x30>
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	3b03      	subs	r3, #3
 800607a:	e000      	b.n	800607e <NVIC_EncodePriority+0x32>
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006080:	f04f 32ff 	mov.w	r2, #4294967295
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	43da      	mvns	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	401a      	ands	r2, r3
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006094:	f04f 31ff 	mov.w	r1, #4294967295
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	43d9      	mvns	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060a4:	4313      	orrs	r3, r2
         );
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3724      	adds	r7, #36	; 0x24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff ff4c 	bl	8005f58 <__NVIC_SetPriorityGrouping>
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060da:	f7ff ff61 	bl	8005fa0 <__NVIC_GetPriorityGrouping>
 80060de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	6978      	ldr	r0, [r7, #20]
 80060e6:	f7ff ffb1 	bl	800604c <NVIC_EncodePriority>
 80060ea:	4602      	mov	r2, r0
 80060ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff ff80 	bl	8005ff8 <__NVIC_SetPriority>
}
 80060f8:	bf00      	nop
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800610a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff ff54 	bl	8005fbc <__NVIC_EnableIRQ>
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800612a:	f7ff fee5 	bl	8005ef8 <HAL_GetTick>
 800612e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d008      	beq.n	800614e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2280      	movs	r2, #128	; 0x80
 8006140:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e052      	b.n	80061f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0216 	bic.w	r2, r2, #22
 800615c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695a      	ldr	r2, [r3, #20]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800616c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d103      	bne.n	800617e <HAL_DMA_Abort+0x62>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0208 	bic.w	r2, r2, #8
 800618c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800619e:	e013      	b.n	80061c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061a0:	f7ff feaa 	bl	8005ef8 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	d90c      	bls.n	80061c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2203      	movs	r2, #3
 80061b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e015      	b.n	80061f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e4      	bne.n	80061a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	223f      	movs	r2, #63	; 0x3f
 80061dc:	409a      	lsls	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d004      	beq.n	800621a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2280      	movs	r2, #128	; 0x80
 8006214:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e00c      	b.n	8006234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2205      	movs	r2, #5
 800621e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006240:	b480      	push	{r7}
 8006242:	b089      	sub	sp, #36	; 0x24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800624e:	2300      	movs	r3, #0
 8006250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e159      	b.n	8006510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800625c:	2201      	movs	r2, #1
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4013      	ands	r3, r2
 800626e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	429a      	cmp	r2, r3
 8006276:	f040 8148 	bne.w	800650a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d005      	beq.n	8006292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800628e:	2b02      	cmp	r3, #2
 8006290:	d130      	bne.n	80062f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	2203      	movs	r2, #3
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062c8:	2201      	movs	r2, #1
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	43db      	mvns	r3, r3
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4013      	ands	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	f003 0201 	and.w	r2, r3, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d017      	beq.n	8006330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	2203      	movs	r2, #3
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4313      	orrs	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d123      	bne.n	8006384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	08da      	lsrs	r2, r3, #3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3208      	adds	r2, #8
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	220f      	movs	r2, #15
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	4013      	ands	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4313      	orrs	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	08da      	lsrs	r2, r3, #3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3208      	adds	r2, #8
 800637e:	69b9      	ldr	r1, [r7, #24]
 8006380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	2203      	movs	r2, #3
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	4013      	ands	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 0203 	and.w	r2, r3, #3
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80a2 	beq.w	800650a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	4b57      	ldr	r3, [pc, #348]	; (8006528 <HAL_GPIO_Init+0x2e8>)
 80063cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ce:	4a56      	ldr	r2, [pc, #344]	; (8006528 <HAL_GPIO_Init+0x2e8>)
 80063d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063d4:	6453      	str	r3, [r2, #68]	; 0x44
 80063d6:	4b54      	ldr	r3, [pc, #336]	; (8006528 <HAL_GPIO_Init+0x2e8>)
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063e2:	4a52      	ldr	r2, [pc, #328]	; (800652c <HAL_GPIO_Init+0x2ec>)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	089b      	lsrs	r3, r3, #2
 80063e8:	3302      	adds	r3, #2
 80063ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	220f      	movs	r2, #15
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4013      	ands	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a49      	ldr	r2, [pc, #292]	; (8006530 <HAL_GPIO_Init+0x2f0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d019      	beq.n	8006442 <HAL_GPIO_Init+0x202>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a48      	ldr	r2, [pc, #288]	; (8006534 <HAL_GPIO_Init+0x2f4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_GPIO_Init+0x1fe>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a47      	ldr	r2, [pc, #284]	; (8006538 <HAL_GPIO_Init+0x2f8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00d      	beq.n	800643a <HAL_GPIO_Init+0x1fa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a46      	ldr	r2, [pc, #280]	; (800653c <HAL_GPIO_Init+0x2fc>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <HAL_GPIO_Init+0x1f6>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a45      	ldr	r2, [pc, #276]	; (8006540 <HAL_GPIO_Init+0x300>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d101      	bne.n	8006432 <HAL_GPIO_Init+0x1f2>
 800642e:	2304      	movs	r3, #4
 8006430:	e008      	b.n	8006444 <HAL_GPIO_Init+0x204>
 8006432:	2307      	movs	r3, #7
 8006434:	e006      	b.n	8006444 <HAL_GPIO_Init+0x204>
 8006436:	2303      	movs	r3, #3
 8006438:	e004      	b.n	8006444 <HAL_GPIO_Init+0x204>
 800643a:	2302      	movs	r3, #2
 800643c:	e002      	b.n	8006444 <HAL_GPIO_Init+0x204>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <HAL_GPIO_Init+0x204>
 8006442:	2300      	movs	r3, #0
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	f002 0203 	and.w	r2, r2, #3
 800644a:	0092      	lsls	r2, r2, #2
 800644c:	4093      	lsls	r3, r2
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006454:	4935      	ldr	r1, [pc, #212]	; (800652c <HAL_GPIO_Init+0x2ec>)
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	3302      	adds	r3, #2
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006462:	4b38      	ldr	r3, [pc, #224]	; (8006544 <HAL_GPIO_Init+0x304>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	43db      	mvns	r3, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4013      	ands	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006486:	4a2f      	ldr	r2, [pc, #188]	; (8006544 <HAL_GPIO_Init+0x304>)
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800648c:	4b2d      	ldr	r3, [pc, #180]	; (8006544 <HAL_GPIO_Init+0x304>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064b0:	4a24      	ldr	r2, [pc, #144]	; (8006544 <HAL_GPIO_Init+0x304>)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064b6:	4b23      	ldr	r3, [pc, #140]	; (8006544 <HAL_GPIO_Init+0x304>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064da:	4a1a      	ldr	r2, [pc, #104]	; (8006544 <HAL_GPIO_Init+0x304>)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064e0:	4b18      	ldr	r3, [pc, #96]	; (8006544 <HAL_GPIO_Init+0x304>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006504:	4a0f      	ldr	r2, [pc, #60]	; (8006544 <HAL_GPIO_Init+0x304>)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3301      	adds	r3, #1
 800650e:	61fb      	str	r3, [r7, #28]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b0f      	cmp	r3, #15
 8006514:	f67f aea2 	bls.w	800625c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	3724      	adds	r7, #36	; 0x24
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	40023800 	.word	0x40023800
 800652c:	40013800 	.word	0x40013800
 8006530:	40020000 	.word	0x40020000
 8006534:	40020400 	.word	0x40020400
 8006538:	40020800 	.word	0x40020800
 800653c:	40020c00 	.word	0x40020c00
 8006540:	40021000 	.word	0x40021000
 8006544:	40013c00 	.word	0x40013c00

08006548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	887b      	ldrh	r3, [r7, #2]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
 8006564:	e001      	b.n	800656a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	807b      	strh	r3, [r7, #2]
 8006584:	4613      	mov	r3, r2
 8006586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006588:	787b      	ldrb	r3, [r7, #1]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006594:	e003      	b.n	800659e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006596:	887b      	ldrh	r3, [r7, #2]
 8006598:	041a      	lsls	r2, r3, #16
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	619a      	str	r2, [r3, #24]
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065b6:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d006      	beq.n	80065d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065c2:	4a05      	ldr	r2, [pc, #20]	; (80065d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe f826 	bl	800461c <HAL_GPIO_EXTI_Callback>
  }
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40013c00 	.word	0x40013c00

080065dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e12b      	b.n	8006846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d106      	bne.n	8006608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff f87c 	bl	8005700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2224      	movs	r2, #36	; 0x24
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800662e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800663e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006640:	f002 f95e 	bl	8008900 <HAL_RCC_GetPCLK1Freq>
 8006644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	4a81      	ldr	r2, [pc, #516]	; (8006850 <HAL_I2C_Init+0x274>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d807      	bhi.n	8006660 <HAL_I2C_Init+0x84>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a80      	ldr	r2, [pc, #512]	; (8006854 <HAL_I2C_Init+0x278>)
 8006654:	4293      	cmp	r3, r2
 8006656:	bf94      	ite	ls
 8006658:	2301      	movls	r3, #1
 800665a:	2300      	movhi	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	e006      	b.n	800666e <HAL_I2C_Init+0x92>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a7d      	ldr	r2, [pc, #500]	; (8006858 <HAL_I2C_Init+0x27c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	bf94      	ite	ls
 8006668:	2301      	movls	r3, #1
 800666a:	2300      	movhi	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e0e7      	b.n	8006846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a78      	ldr	r2, [pc, #480]	; (800685c <HAL_I2C_Init+0x280>)
 800667a:	fba2 2303 	umull	r2, r3, r2, r3
 800667e:	0c9b      	lsrs	r3, r3, #18
 8006680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	4a6a      	ldr	r2, [pc, #424]	; (8006850 <HAL_I2C_Init+0x274>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d802      	bhi.n	80066b0 <HAL_I2C_Init+0xd4>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3301      	adds	r3, #1
 80066ae:	e009      	b.n	80066c4 <HAL_I2C_Init+0xe8>
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066b6:	fb02 f303 	mul.w	r3, r2, r3
 80066ba:	4a69      	ldr	r2, [pc, #420]	; (8006860 <HAL_I2C_Init+0x284>)
 80066bc:	fba2 2303 	umull	r2, r3, r2, r3
 80066c0:	099b      	lsrs	r3, r3, #6
 80066c2:	3301      	adds	r3, #1
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	430b      	orrs	r3, r1
 80066ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	495c      	ldr	r1, [pc, #368]	; (8006850 <HAL_I2C_Init+0x274>)
 80066e0:	428b      	cmp	r3, r1
 80066e2:	d819      	bhi.n	8006718 <HAL_I2C_Init+0x13c>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1e59      	subs	r1, r3, #1
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80066f2:	1c59      	adds	r1, r3, #1
 80066f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066f8:	400b      	ands	r3, r1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <HAL_I2C_Init+0x138>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1e59      	subs	r1, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	fbb1 f3f3 	udiv	r3, r1, r3
 800670c:	3301      	adds	r3, #1
 800670e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006712:	e051      	b.n	80067b8 <HAL_I2C_Init+0x1dc>
 8006714:	2304      	movs	r3, #4
 8006716:	e04f      	b.n	80067b8 <HAL_I2C_Init+0x1dc>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d111      	bne.n	8006744 <HAL_I2C_Init+0x168>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	1e58      	subs	r0, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6859      	ldr	r1, [r3, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	440b      	add	r3, r1
 800672e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006732:	3301      	adds	r3, #1
 8006734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006738:	2b00      	cmp	r3, #0
 800673a:	bf0c      	ite	eq
 800673c:	2301      	moveq	r3, #1
 800673e:	2300      	movne	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	e012      	b.n	800676a <HAL_I2C_Init+0x18e>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	1e58      	subs	r0, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6859      	ldr	r1, [r3, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	0099      	lsls	r1, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	fbb0 f3f3 	udiv	r3, r0, r3
 800675a:	3301      	adds	r3, #1
 800675c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_I2C_Init+0x196>
 800676e:	2301      	movs	r3, #1
 8006770:	e022      	b.n	80067b8 <HAL_I2C_Init+0x1dc>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10e      	bne.n	8006798 <HAL_I2C_Init+0x1bc>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1e58      	subs	r0, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6859      	ldr	r1, [r3, #4]
 8006782:	460b      	mov	r3, r1
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	440b      	add	r3, r1
 8006788:	fbb0 f3f3 	udiv	r3, r0, r3
 800678c:	3301      	adds	r3, #1
 800678e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006796:	e00f      	b.n	80067b8 <HAL_I2C_Init+0x1dc>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	1e58      	subs	r0, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6859      	ldr	r1, [r3, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	0099      	lsls	r1, r3, #2
 80067a8:	440b      	add	r3, r1
 80067aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ae:	3301      	adds	r3, #1
 80067b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	6809      	ldr	r1, [r1, #0]
 80067bc:	4313      	orrs	r3, r2
 80067be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69da      	ldr	r2, [r3, #28]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6911      	ldr	r1, [r2, #16]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68d2      	ldr	r2, [r2, #12]
 80067f2:	4311      	orrs	r1, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	000186a0 	.word	0x000186a0
 8006854:	001e847f 	.word	0x001e847f
 8006858:	003d08ff 	.word	0x003d08ff
 800685c:	431bde83 	.word	0x431bde83
 8006860:	10624dd3 	.word	0x10624dd3

08006864 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	461a      	mov	r2, r3
 8006870:	460b      	mov	r3, r1
 8006872:	817b      	strh	r3, [r7, #10]
 8006874:	4613      	mov	r3, r2
 8006876:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006878:	f7ff fb3e 	bl	8005ef8 <HAL_GetTick>
 800687c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b20      	cmp	r3, #32
 8006888:	f040 80e0 	bne.w	8006a4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	2319      	movs	r3, #25
 8006892:	2201      	movs	r2, #1
 8006894:	4970      	ldr	r1, [pc, #448]	; (8006a58 <HAL_I2C_Master_Transmit+0x1f4>)
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f001 fa24 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80068a2:	2302      	movs	r3, #2
 80068a4:	e0d3      	b.n	8006a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_I2C_Master_Transmit+0x50>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e0cc      	b.n	8006a4e <HAL_I2C_Master_Transmit+0x1ea>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d007      	beq.n	80068da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2221      	movs	r2, #33	; 0x21
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2210      	movs	r2, #16
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	893a      	ldrh	r2, [r7, #8]
 800690a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a50      	ldr	r2, [pc, #320]	; (8006a5c <HAL_I2C_Master_Transmit+0x1f8>)
 800691a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800691c:	8979      	ldrh	r1, [r7, #10]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6a3a      	ldr	r2, [r7, #32]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 ff10 	bl	8007748 <I2C_MasterRequestWrite>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e08d      	b.n	8006a4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006932:	2300      	movs	r3, #0
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006948:	e066      	b.n	8006a18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	6a39      	ldr	r1, [r7, #32]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f001 fa9e 	bl	8007e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00d      	beq.n	8006976 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	2b04      	cmp	r3, #4
 8006960:	d107      	bne.n	8006972 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006970:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e06b      	b.n	8006a4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d11b      	bne.n	80069ec <HAL_I2C_Master_Transmit+0x188>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d017      	beq.n	80069ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	6a39      	ldr	r1, [r7, #32]
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fa8e 	bl	8007f12 <I2C_WaitOnBTFFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00d      	beq.n	8006a18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d107      	bne.n	8006a14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e01a      	b.n	8006a4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d194      	bne.n	800694a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e000      	b.n	8006a4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006a4c:	2302      	movs	r3, #2
  }
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	00100002 	.word	0x00100002
 8006a5c:	ffff0000 	.word	0xffff0000

08006a60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08c      	sub	sp, #48	; 0x30
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	817b      	strh	r3, [r7, #10]
 8006a70:	4613      	mov	r3, r2
 8006a72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a74:	f7ff fa40 	bl	8005ef8 <HAL_GetTick>
 8006a78:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	f040 820b 	bne.w	8006e9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	2319      	movs	r3, #25
 8006a8e:	2201      	movs	r2, #1
 8006a90:	497c      	ldr	r1, [pc, #496]	; (8006c84 <HAL_I2C_Master_Receive+0x224>)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f001 f926 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e1fe      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_I2C_Master_Receive+0x50>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e1f7      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d007      	beq.n	8006ad6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0201 	orr.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2222      	movs	r2, #34	; 0x22
 8006aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2210      	movs	r2, #16
 8006af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	893a      	ldrh	r2, [r7, #8]
 8006b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a5c      	ldr	r2, [pc, #368]	; (8006c88 <HAL_I2C_Master_Receive+0x228>)
 8006b16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b18:	8979      	ldrh	r1, [r7, #10]
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fe94 	bl	800784c <I2C_MasterRequestRead>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e1b8      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d113      	bne.n	8006b5e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b36:	2300      	movs	r3, #0
 8006b38:	623b      	str	r3, [r7, #32]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	623b      	str	r3, [r7, #32]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	623b      	str	r3, [r7, #32]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e18c      	b.n	8006e78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d11b      	bne.n	8006b9e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b76:	2300      	movs	r3, #0
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	61fb      	str	r3, [r7, #28]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e16c      	b.n	8006e78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d11b      	bne.n	8006bde <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	e14c      	b.n	8006e78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c04:	e138      	b.n	8006e78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	f200 80f1 	bhi.w	8006df2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d123      	bne.n	8006c60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f001 f9b9 	bl	8007f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e139      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c5e:	e10b      	b.n	8006e78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d14e      	bne.n	8006d06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	2200      	movs	r2, #0
 8006c70:	4906      	ldr	r1, [pc, #24]	; (8006c8c <HAL_I2C_Master_Receive+0x22c>)
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f001 f836 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e10e      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
 8006c82:	bf00      	nop
 8006c84:	00100002 	.word	0x00100002
 8006c88:	ffff0000 	.word	0xffff0000
 8006c8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d04:	e0b8      	b.n	8006e78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4966      	ldr	r1, [pc, #408]	; (8006ea8 <HAL_I2C_Master_Receive+0x448>)
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 ffe7 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0bf      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691a      	ldr	r2, [r3, #16]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	2200      	movs	r2, #0
 8006d6a:	494f      	ldr	r1, [pc, #316]	; (8006ea8 <HAL_I2C_Master_Receive+0x448>)
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 ffb9 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e091      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006df0:	e042      	b.n	8006e78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f001 f8cc 	bl	8007f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e04c      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d118      	bne.n	8006e78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f47f aec2 	bne.w	8006c06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e000      	b.n	8006ea0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3728      	adds	r7, #40	; 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	00010004 	.word	0x00010004

08006eac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af02      	add	r7, sp, #8
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	817b      	strh	r3, [r7, #10]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	813b      	strh	r3, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ec6:	f7ff f817 	bl	8005ef8 <HAL_GetTick>
 8006eca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	f040 80d9 	bne.w	800708c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2319      	movs	r3, #25
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	496d      	ldr	r1, [pc, #436]	; (8007098 <HAL_I2C_Mem_Write+0x1ec>)
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 fefd 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e0cc      	b.n	800708e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_I2C_Mem_Write+0x56>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e0c5      	b.n	800708e <HAL_I2C_Mem_Write+0x1e2>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d007      	beq.n	8006f28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2221      	movs	r2, #33	; 0x21
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2240      	movs	r2, #64	; 0x40
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6a3a      	ldr	r2, [r7, #32]
 8006f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4a4d      	ldr	r2, [pc, #308]	; (800709c <HAL_I2C_Mem_Write+0x1f0>)
 8006f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f6a:	88f8      	ldrh	r0, [r7, #6]
 8006f6c:	893a      	ldrh	r2, [r7, #8]
 8006f6e:	8979      	ldrh	r1, [r7, #10]
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	9301      	str	r3, [sp, #4]
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	4603      	mov	r3, r0
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fd34 	bl	80079e8 <I2C_RequestMemoryWrite>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d052      	beq.n	800702c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e081      	b.n	800708e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 ff7e 	bl	8007e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00d      	beq.n	8006fb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d107      	bne.n	8006fb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e06b      	b.n	800708e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	781a      	ldrb	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d11b      	bne.n	800702c <HAL_I2C_Mem_Write+0x180>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d017      	beq.n	800702c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1aa      	bne.n	8006f8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 ff6a 	bl	8007f12 <I2C_WaitOnBTFFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007048:	2b04      	cmp	r3, #4
 800704a:	d107      	bne.n	800705c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800705a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e016      	b.n	800708e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800706e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	e000      	b.n	800708e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800708c:	2302      	movs	r3, #2
  }
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	00100002 	.word	0x00100002
 800709c:	ffff0000 	.word	0xffff0000

080070a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08c      	sub	sp, #48	; 0x30
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	4608      	mov	r0, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	461a      	mov	r2, r3
 80070ae:	4603      	mov	r3, r0
 80070b0:	817b      	strh	r3, [r7, #10]
 80070b2:	460b      	mov	r3, r1
 80070b4:	813b      	strh	r3, [r7, #8]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80070ba:	f7fe ff1d 	bl	8005ef8 <HAL_GetTick>
 80070be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	f040 8208 	bne.w	80074de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	2319      	movs	r3, #25
 80070d4:	2201      	movs	r2, #1
 80070d6:	497b      	ldr	r1, [pc, #492]	; (80072c4 <HAL_I2C_Mem_Read+0x224>)
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fe03 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070e4:	2302      	movs	r3, #2
 80070e6:	e1fb      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_I2C_Mem_Read+0x56>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e1f4      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b01      	cmp	r3, #1
 800710a:	d007      	beq.n	800711c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0201 	orr.w	r2, r2, #1
 800711a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800712a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2222      	movs	r2, #34	; 0x22
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2240      	movs	r2, #64	; 0x40
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800714c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a5b      	ldr	r2, [pc, #364]	; (80072c8 <HAL_I2C_Mem_Read+0x228>)
 800715c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800715e:	88f8      	ldrh	r0, [r7, #6]
 8007160:	893a      	ldrh	r2, [r7, #8]
 8007162:	8979      	ldrh	r1, [r7, #10]
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	4603      	mov	r3, r0
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fcd0 	bl	8007b14 <I2C_RequestMemoryRead>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e1b0      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d113      	bne.n	80071ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007186:	2300      	movs	r3, #0
 8007188:	623b      	str	r3, [r7, #32]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	623b      	str	r3, [r7, #32]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	623b      	str	r3, [r7, #32]
 800719a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e184      	b.n	80074b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d11b      	bne.n	80071ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	61fb      	str	r3, [r7, #28]
 80071da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e164      	b.n	80074b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d11b      	bne.n	800722e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007204:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007214:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007216:	2300      	movs	r3, #0
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	e144      	b.n	80074b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007244:	e138      	b.n	80074b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724a:	2b03      	cmp	r3, #3
 800724c:	f200 80f1 	bhi.w	8007432 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007254:	2b01      	cmp	r3, #1
 8007256:	d123      	bne.n	80072a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 fe99 	bl	8007f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e139      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800729e:	e10b      	b.n	80074b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d14e      	bne.n	8007346 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	2200      	movs	r2, #0
 80072b0:	4906      	ldr	r1, [pc, #24]	; (80072cc <HAL_I2C_Mem_Read+0x22c>)
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 fd16 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e10e      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
 80072c2:	bf00      	nop
 80072c4:	00100002 	.word	0x00100002
 80072c8:	ffff0000 	.word	0xffff0000
 80072cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007344:	e0b8      	b.n	80074b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	2200      	movs	r2, #0
 800734e:	4966      	ldr	r1, [pc, #408]	; (80074e8 <HAL_I2C_Mem_Read+0x448>)
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fcc7 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e0bf      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800736e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	691a      	ldr	r2, [r3, #16]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	2200      	movs	r2, #0
 80073aa:	494f      	ldr	r1, [pc, #316]	; (80074e8 <HAL_I2C_Mem_Read+0x448>)
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fc99 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e091      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691a      	ldr	r2, [r3, #16]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007430:	e042      	b.n	80074b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 fdac 	bl	8007f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e04c      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b04      	cmp	r3, #4
 8007484:	d118      	bne.n	80074b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f47f aec2 	bne.w	8007246 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	e000      	b.n	80074e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80074de:	2302      	movs	r3, #2
  }
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3728      	adds	r7, #40	; 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	00010004 	.word	0x00010004

080074ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	460b      	mov	r3, r1
 80074fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80074fc:	f7fe fcfc 	bl	8005ef8 <HAL_GetTick>
 8007500:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b20      	cmp	r3, #32
 8007510:	f040 8111 	bne.w	8007736 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2319      	movs	r3, #25
 800751a:	2201      	movs	r2, #1
 800751c:	4988      	ldr	r1, [pc, #544]	; (8007740 <HAL_I2C_IsDeviceReady+0x254>)
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fbe0 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800752a:	2302      	movs	r3, #2
 800752c:	e104      	b.n	8007738 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_I2C_IsDeviceReady+0x50>
 8007538:	2302      	movs	r3, #2
 800753a:	e0fd      	b.n	8007738 <HAL_I2C_IsDeviceReady+0x24c>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b01      	cmp	r3, #1
 8007550:	d007      	beq.n	8007562 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0201 	orr.w	r2, r2, #1
 8007560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2224      	movs	r2, #36	; 0x24
 8007576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a70      	ldr	r2, [pc, #448]	; (8007744 <HAL_I2C_IsDeviceReady+0x258>)
 8007584:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007594:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2200      	movs	r2, #0
 800759e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fb9e 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00d      	beq.n	80075ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075bc:	d103      	bne.n	80075c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e0b6      	b.n	8007738 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80075da:	f7fe fc8d 	bl	8005ef8 <HAL_GetTick>
 80075de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	bf0c      	ite	eq
 80075ee:	2301      	moveq	r3, #1
 80075f0:	2300      	movne	r3, #0
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007604:	bf0c      	ite	eq
 8007606:	2301      	moveq	r3, #1
 8007608:	2300      	movne	r3, #0
 800760a:	b2db      	uxtb	r3, r3
 800760c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800760e:	e025      	b.n	800765c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007610:	f7fe fc72 	bl	8005ef8 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d302      	bcc.n	8007626 <HAL_I2C_IsDeviceReady+0x13a>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d103      	bne.n	800762e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	22a0      	movs	r2, #160	; 0xa0
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b02      	cmp	r3, #2
 800763a:	bf0c      	ite	eq
 800763c:	2301      	moveq	r3, #1
 800763e:	2300      	movne	r3, #0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2ba0      	cmp	r3, #160	; 0xa0
 8007666:	d005      	beq.n	8007674 <HAL_I2C_IsDeviceReady+0x188>
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <HAL_I2C_IsDeviceReady+0x188>
 800766e:	7dbb      	ldrb	r3, [r7, #22]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0cd      	beq.n	8007610 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b02      	cmp	r3, #2
 8007688:	d129      	bne.n	80076de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007698:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800769a:	2300      	movs	r3, #0
 800769c:	613b      	str	r3, [r7, #16]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	2319      	movs	r3, #25
 80076b6:	2201      	movs	r2, #1
 80076b8:	4921      	ldr	r1, [pc, #132]	; (8007740 <HAL_I2C_IsDeviceReady+0x254>)
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fb12 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e036      	b.n	8007738 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	e02c      	b.n	8007738 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	2319      	movs	r3, #25
 80076fe:	2201      	movs	r2, #1
 8007700:	490f      	ldr	r1, [pc, #60]	; (8007740 <HAL_I2C_IsDeviceReady+0x254>)
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 faee 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e012      	b.n	8007738 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	3301      	adds	r3, #1
 8007716:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	f4ff af32 	bcc.w	8007586 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007736:	2302      	movs	r3, #2
  }
}
 8007738:	4618      	mov	r0, r3
 800773a:	3720      	adds	r7, #32
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	00100002 	.word	0x00100002
 8007744:	ffff0000 	.word	0xffff0000

08007748 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	607a      	str	r2, [r7, #4]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	460b      	mov	r3, r1
 8007756:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b08      	cmp	r3, #8
 8007762:	d006      	beq.n	8007772 <I2C_MasterRequestWrite+0x2a>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d003      	beq.n	8007772 <I2C_MasterRequestWrite+0x2a>
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007770:	d108      	bne.n	8007784 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e00b      	b.n	800779c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	2b12      	cmp	r3, #18
 800778a:	d107      	bne.n	800779c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800779a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fa9b 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00d      	beq.n	80077d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c2:	d103      	bne.n	80077cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e035      	b.n	800783c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077d8:	d108      	bne.n	80077ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077da:	897b      	ldrh	r3, [r7, #10]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077e8:	611a      	str	r2, [r3, #16]
 80077ea:	e01b      	b.n	8007824 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80077ec:	897b      	ldrh	r3, [r7, #10]
 80077ee:	11db      	asrs	r3, r3, #7
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	f003 0306 	and.w	r3, r3, #6
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f063 030f 	orn	r3, r3, #15
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	490e      	ldr	r1, [pc, #56]	; (8007844 <I2C_MasterRequestWrite+0xfc>)
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fac1 	bl	8007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e010      	b.n	800783c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800781a:	897b      	ldrh	r3, [r7, #10]
 800781c:	b2da      	uxtb	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4907      	ldr	r1, [pc, #28]	; (8007848 <I2C_MasterRequestWrite+0x100>)
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fab1 	bl	8007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e000      	b.n	800783c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	00010008 	.word	0x00010008
 8007848:	00010002 	.word	0x00010002

0800784c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	460b      	mov	r3, r1
 800785a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007870:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b08      	cmp	r3, #8
 8007876:	d006      	beq.n	8007886 <I2C_MasterRequestRead+0x3a>
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d003      	beq.n	8007886 <I2C_MasterRequestRead+0x3a>
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007884:	d108      	bne.n	8007898 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	e00b      	b.n	80078b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	2b11      	cmp	r3, #17
 800789e:	d107      	bne.n	80078b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fa11 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00d      	beq.n	80078e4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d6:	d103      	bne.n	80078e0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e079      	b.n	80079d8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078ec:	d108      	bne.n	8007900 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80078ee:	897b      	ldrh	r3, [r7, #10]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	f043 0301 	orr.w	r3, r3, #1
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	611a      	str	r2, [r3, #16]
 80078fe:	e05f      	b.n	80079c0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007900:	897b      	ldrh	r3, [r7, #10]
 8007902:	11db      	asrs	r3, r3, #7
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 0306 	and.w	r3, r3, #6
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f063 030f 	orn	r3, r3, #15
 8007910:	b2da      	uxtb	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	4930      	ldr	r1, [pc, #192]	; (80079e0 <I2C_MasterRequestRead+0x194>)
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fa37 	bl	8007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e054      	b.n	80079d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800792e:	897b      	ldrh	r3, [r7, #10]
 8007930:	b2da      	uxtb	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4929      	ldr	r1, [pc, #164]	; (80079e4 <I2C_MasterRequestRead+0x198>)
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fa27 	bl	8007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e044      	b.n	80079d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800794e:	2300      	movs	r3, #0
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007972:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f9af 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00d      	beq.n	80079a8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799a:	d103      	bne.n	80079a4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e017      	b.n	80079d8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80079a8:	897b      	ldrh	r3, [r7, #10]
 80079aa:	11db      	asrs	r3, r3, #7
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	f003 0306 	and.w	r3, r3, #6
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	f063 030e 	orn	r3, r3, #14
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4907      	ldr	r1, [pc, #28]	; (80079e4 <I2C_MasterRequestRead+0x198>)
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 f9e3 	bl	8007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	00010008 	.word	0x00010008
 80079e4:	00010002 	.word	0x00010002

080079e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	461a      	mov	r2, r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	817b      	strh	r3, [r7, #10]
 80079fa:	460b      	mov	r3, r1
 80079fc:	813b      	strh	r3, [r7, #8]
 80079fe:	4613      	mov	r3, r2
 8007a00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 f960 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00d      	beq.n	8007a46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a38:	d103      	bne.n	8007a42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e05f      	b.n	8007b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a46:	897b      	ldrh	r3, [r7, #10]
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	6a3a      	ldr	r2, [r7, #32]
 8007a5a:	492d      	ldr	r1, [pc, #180]	; (8007b10 <I2C_RequestMemoryWrite+0x128>)
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f998 	bl	8007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e04c      	b.n	8007b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a84:	6a39      	ldr	r1, [r7, #32]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fa02 	bl	8007e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00d      	beq.n	8007aae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d107      	bne.n	8007aaa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e02b      	b.n	8007b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d105      	bne.n	8007ac0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ab4:	893b      	ldrh	r3, [r7, #8]
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	611a      	str	r2, [r3, #16]
 8007abe:	e021      	b.n	8007b04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ac0:	893b      	ldrh	r3, [r7, #8]
 8007ac2:	0a1b      	lsrs	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ad0:	6a39      	ldr	r1, [r7, #32]
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f9dc 	bl	8007e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d107      	bne.n	8007af6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e005      	b.n	8007b06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007afa:	893b      	ldrh	r3, [r7, #8]
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	00010002 	.word	0x00010002

08007b14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	4611      	mov	r1, r2
 8007b20:	461a      	mov	r2, r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	817b      	strh	r3, [r7, #10]
 8007b26:	460b      	mov	r3, r1
 8007b28:	813b      	strh	r3, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 f8c2 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00d      	beq.n	8007b82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b74:	d103      	bne.n	8007b7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e0aa      	b.n	8007cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b82:	897b      	ldrh	r3, [r7, #10]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	6a3a      	ldr	r2, [r7, #32]
 8007b96:	4952      	ldr	r1, [pc, #328]	; (8007ce0 <I2C_RequestMemoryRead+0x1cc>)
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f8fa 	bl	8007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e097      	b.n	8007cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc0:	6a39      	ldr	r1, [r7, #32]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f964 	bl	8007e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	2b04      	cmp	r3, #4
 8007bd4:	d107      	bne.n	8007be6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e076      	b.n	8007cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d105      	bne.n	8007bfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf0:	893b      	ldrh	r3, [r7, #8]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	611a      	str	r2, [r3, #16]
 8007bfa:	e021      	b.n	8007c40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007bfc:	893b      	ldrh	r3, [r7, #8]
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0c:	6a39      	ldr	r1, [r7, #32]
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f93e 	bl	8007e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00d      	beq.n	8007c36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d107      	bne.n	8007c32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e050      	b.n	8007cd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c36:	893b      	ldrh	r3, [r7, #8]
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	6a39      	ldr	r1, [r7, #32]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f923 	bl	8007e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d107      	bne.n	8007c68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e035      	b.n	8007cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f82b 	bl	8007ce4 <I2C_WaitOnFlagUntilTimeout>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00d      	beq.n	8007cb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca2:	d103      	bne.n	8007cac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e013      	b.n	8007cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007cb0:	897b      	ldrh	r3, [r7, #10]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f043 0301 	orr.w	r3, r3, #1
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	6a3a      	ldr	r2, [r7, #32]
 8007cc4:	4906      	ldr	r1, [pc, #24]	; (8007ce0 <I2C_RequestMemoryRead+0x1cc>)
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 f863 	bl	8007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	00010002 	.word	0x00010002

08007ce4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cf4:	e025      	b.n	8007d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d021      	beq.n	8007d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cfe:	f7fe f8fb 	bl	8005ef8 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d302      	bcc.n	8007d14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d116      	bne.n	8007d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	f043 0220 	orr.w	r2, r3, #32
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e023      	b.n	8007d8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	0c1b      	lsrs	r3, r3, #16
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d10d      	bne.n	8007d68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	43da      	mvns	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4013      	ands	r3, r2
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bf0c      	ite	eq
 8007d5e:	2301      	moveq	r3, #1
 8007d60:	2300      	movne	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	e00c      	b.n	8007d82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	43da      	mvns	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4013      	ands	r3, r2
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d0b6      	beq.n	8007cf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007da0:	e051      	b.n	8007e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db0:	d123      	bne.n	8007dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	f043 0204 	orr.w	r2, r3, #4
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e046      	b.n	8007e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e00:	d021      	beq.n	8007e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e02:	f7fe f879 	bl	8005ef8 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d302      	bcc.n	8007e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d116      	bne.n	8007e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	f043 0220 	orr.w	r2, r3, #32
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e020      	b.n	8007e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	0c1b      	lsrs	r3, r3, #16
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10c      	bne.n	8007e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	43da      	mvns	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bf14      	ite	ne
 8007e62:	2301      	movne	r3, #1
 8007e64:	2300      	moveq	r3, #0
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	e00b      	b.n	8007e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	43da      	mvns	r2, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	4013      	ands	r3, r2
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bf14      	ite	ne
 8007e7c:	2301      	movne	r3, #1
 8007e7e:	2300      	moveq	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d18d      	bne.n	8007da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e9c:	e02d      	b.n	8007efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 f8ce 	bl	8008040 <I2C_IsAcknowledgeFailed>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e02d      	b.n	8007f0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb4:	d021      	beq.n	8007efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb6:	f7fe f81f 	bl	8005ef8 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d302      	bcc.n	8007ecc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d116      	bne.n	8007efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	f043 0220 	orr.w	r2, r3, #32
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e007      	b.n	8007f0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	2b80      	cmp	r3, #128	; 0x80
 8007f06:	d1ca      	bne.n	8007e9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f1e:	e02d      	b.n	8007f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f88d 	bl	8008040 <I2C_IsAcknowledgeFailed>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e02d      	b.n	8007f8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d021      	beq.n	8007f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f38:	f7fd ffde 	bl	8005ef8 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d302      	bcc.n	8007f4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d116      	bne.n	8007f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	f043 0220 	orr.w	r2, r3, #32
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e007      	b.n	8007f8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d1ca      	bne.n	8007f20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fa0:	e042      	b.n	8008028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d119      	bne.n	8007fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0210 	mvn.w	r2, #16
 8007fb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e029      	b.n	8008038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe4:	f7fd ff88 	bl	8005ef8 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d302      	bcc.n	8007ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d116      	bne.n	8008028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008014:	f043 0220 	orr.w	r2, r3, #32
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e007      	b.n	8008038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008032:	2b40      	cmp	r3, #64	; 0x40
 8008034:	d1b5      	bne.n	8007fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008056:	d11b      	bne.n	8008090 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008060:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2220      	movs	r2, #32
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	f043 0204 	orr.w	r2, r3, #4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e000      	b.n	8008092 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
	...

080080a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e267      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d075      	beq.n	80081aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080be:	4b88      	ldr	r3, [pc, #544]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 030c 	and.w	r3, r3, #12
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d00c      	beq.n	80080e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ca:	4b85      	ldr	r3, [pc, #532]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080d2:	2b08      	cmp	r3, #8
 80080d4:	d112      	bne.n	80080fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080d6:	4b82      	ldr	r3, [pc, #520]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080e2:	d10b      	bne.n	80080fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e4:	4b7e      	ldr	r3, [pc, #504]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d05b      	beq.n	80081a8 <HAL_RCC_OscConfig+0x108>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d157      	bne.n	80081a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e242      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008104:	d106      	bne.n	8008114 <HAL_RCC_OscConfig+0x74>
 8008106:	4b76      	ldr	r3, [pc, #472]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a75      	ldr	r2, [pc, #468]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 800810c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	e01d      	b.n	8008150 <HAL_RCC_OscConfig+0xb0>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800811c:	d10c      	bne.n	8008138 <HAL_RCC_OscConfig+0x98>
 800811e:	4b70      	ldr	r3, [pc, #448]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a6f      	ldr	r2, [pc, #444]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	4b6d      	ldr	r3, [pc, #436]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a6c      	ldr	r2, [pc, #432]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	e00b      	b.n	8008150 <HAL_RCC_OscConfig+0xb0>
 8008138:	4b69      	ldr	r3, [pc, #420]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a68      	ldr	r2, [pc, #416]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 800813e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	4b66      	ldr	r3, [pc, #408]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a65      	ldr	r2, [pc, #404]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 800814a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800814e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d013      	beq.n	8008180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008158:	f7fd fece 	bl	8005ef8 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008160:	f7fd feca 	bl	8005ef8 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b64      	cmp	r3, #100	; 0x64
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e207      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008172:	4b5b      	ldr	r3, [pc, #364]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d0f0      	beq.n	8008160 <HAL_RCC_OscConfig+0xc0>
 800817e:	e014      	b.n	80081aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008180:	f7fd feba 	bl	8005ef8 <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008188:	f7fd feb6 	bl	8005ef8 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b64      	cmp	r3, #100	; 0x64
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e1f3      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800819a:	4b51      	ldr	r3, [pc, #324]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f0      	bne.n	8008188 <HAL_RCC_OscConfig+0xe8>
 80081a6:	e000      	b.n	80081aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d063      	beq.n	800827e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081b6:	4b4a      	ldr	r3, [pc, #296]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 030c 	and.w	r3, r3, #12
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081c2:	4b47      	ldr	r3, [pc, #284]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d11c      	bne.n	8008208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ce:	4b44      	ldr	r3, [pc, #272]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d116      	bne.n	8008208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081da:	4b41      	ldr	r3, [pc, #260]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <HAL_RCC_OscConfig+0x152>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d001      	beq.n	80081f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e1c7      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f2:	4b3b      	ldr	r3, [pc, #236]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	4937      	ldr	r1, [pc, #220]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008202:	4313      	orrs	r3, r2
 8008204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008206:	e03a      	b.n	800827e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d020      	beq.n	8008252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008210:	4b34      	ldr	r3, [pc, #208]	; (80082e4 <HAL_RCC_OscConfig+0x244>)
 8008212:	2201      	movs	r2, #1
 8008214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008216:	f7fd fe6f 	bl	8005ef8 <HAL_GetTick>
 800821a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800821c:	e008      	b.n	8008230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800821e:	f7fd fe6b 	bl	8005ef8 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e1a8      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008230:	4b2b      	ldr	r3, [pc, #172]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0f0      	beq.n	800821e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800823c:	4b28      	ldr	r3, [pc, #160]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4925      	ldr	r1, [pc, #148]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 800824c:	4313      	orrs	r3, r2
 800824e:	600b      	str	r3, [r1, #0]
 8008250:	e015      	b.n	800827e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <HAL_RCC_OscConfig+0x244>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008258:	f7fd fe4e 	bl	8005ef8 <HAL_GetTick>
 800825c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800825e:	e008      	b.n	8008272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008260:	f7fd fe4a 	bl	8005ef8 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b02      	cmp	r3, #2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e187      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008272:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1f0      	bne.n	8008260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d036      	beq.n	80082f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d016      	beq.n	80082c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008292:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <HAL_RCC_OscConfig+0x248>)
 8008294:	2201      	movs	r2, #1
 8008296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008298:	f7fd fe2e 	bl	8005ef8 <HAL_GetTick>
 800829c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800829e:	e008      	b.n	80082b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082a0:	f7fd fe2a 	bl	8005ef8 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e167      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <HAL_RCC_OscConfig+0x240>)
 80082b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f0      	beq.n	80082a0 <HAL_RCC_OscConfig+0x200>
 80082be:	e01b      	b.n	80082f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <HAL_RCC_OscConfig+0x248>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082c6:	f7fd fe17 	bl	8005ef8 <HAL_GetTick>
 80082ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082cc:	e00e      	b.n	80082ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082ce:	f7fd fe13 	bl	8005ef8 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d907      	bls.n	80082ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e150      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
 80082e0:	40023800 	.word	0x40023800
 80082e4:	42470000 	.word	0x42470000
 80082e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082ec:	4b88      	ldr	r3, [pc, #544]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80082ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1ea      	bne.n	80082ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8097 	beq.w	8008434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008306:	2300      	movs	r3, #0
 8008308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800830a:	4b81      	ldr	r3, [pc, #516]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10f      	bne.n	8008336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008316:	2300      	movs	r3, #0
 8008318:	60bb      	str	r3, [r7, #8]
 800831a:	4b7d      	ldr	r3, [pc, #500]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	4a7c      	ldr	r2, [pc, #496]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 8008320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008324:	6413      	str	r3, [r2, #64]	; 0x40
 8008326:	4b7a      	ldr	r3, [pc, #488]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008332:	2301      	movs	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008336:	4b77      	ldr	r3, [pc, #476]	; (8008514 <HAL_RCC_OscConfig+0x474>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800833e:	2b00      	cmp	r3, #0
 8008340:	d118      	bne.n	8008374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008342:	4b74      	ldr	r3, [pc, #464]	; (8008514 <HAL_RCC_OscConfig+0x474>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a73      	ldr	r2, [pc, #460]	; (8008514 <HAL_RCC_OscConfig+0x474>)
 8008348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800834c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800834e:	f7fd fdd3 	bl	8005ef8 <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008356:	f7fd fdcf 	bl	8005ef8 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e10c      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008368:	4b6a      	ldr	r3, [pc, #424]	; (8008514 <HAL_RCC_OscConfig+0x474>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0f0      	beq.n	8008356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d106      	bne.n	800838a <HAL_RCC_OscConfig+0x2ea>
 800837c:	4b64      	ldr	r3, [pc, #400]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008380:	4a63      	ldr	r2, [pc, #396]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 8008382:	f043 0301 	orr.w	r3, r3, #1
 8008386:	6713      	str	r3, [r2, #112]	; 0x70
 8008388:	e01c      	b.n	80083c4 <HAL_RCC_OscConfig+0x324>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2b05      	cmp	r3, #5
 8008390:	d10c      	bne.n	80083ac <HAL_RCC_OscConfig+0x30c>
 8008392:	4b5f      	ldr	r3, [pc, #380]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	4a5e      	ldr	r2, [pc, #376]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 8008398:	f043 0304 	orr.w	r3, r3, #4
 800839c:	6713      	str	r3, [r2, #112]	; 0x70
 800839e:	4b5c      	ldr	r3, [pc, #368]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80083a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a2:	4a5b      	ldr	r2, [pc, #364]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	6713      	str	r3, [r2, #112]	; 0x70
 80083aa:	e00b      	b.n	80083c4 <HAL_RCC_OscConfig+0x324>
 80083ac:	4b58      	ldr	r3, [pc, #352]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80083ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b0:	4a57      	ldr	r2, [pc, #348]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80083b2:	f023 0301 	bic.w	r3, r3, #1
 80083b6:	6713      	str	r3, [r2, #112]	; 0x70
 80083b8:	4b55      	ldr	r3, [pc, #340]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80083ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083bc:	4a54      	ldr	r2, [pc, #336]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80083be:	f023 0304 	bic.w	r3, r3, #4
 80083c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d015      	beq.n	80083f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083cc:	f7fd fd94 	bl	8005ef8 <HAL_GetTick>
 80083d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d2:	e00a      	b.n	80083ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083d4:	f7fd fd90 	bl	8005ef8 <HAL_GetTick>
 80083d8:	4602      	mov	r2, r0
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e0cb      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ea:	4b49      	ldr	r3, [pc, #292]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80083ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0ee      	beq.n	80083d4 <HAL_RCC_OscConfig+0x334>
 80083f6:	e014      	b.n	8008422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083f8:	f7fd fd7e 	bl	8005ef8 <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083fe:	e00a      	b.n	8008416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008400:	f7fd fd7a 	bl	8005ef8 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	f241 3288 	movw	r2, #5000	; 0x1388
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e0b5      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008416:	4b3e      	ldr	r3, [pc, #248]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	f003 0302 	and.w	r3, r3, #2
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1ee      	bne.n	8008400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008422:	7dfb      	ldrb	r3, [r7, #23]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d105      	bne.n	8008434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008428:	4b39      	ldr	r3, [pc, #228]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 800842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842c:	4a38      	ldr	r2, [pc, #224]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 800842e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008432:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 80a1 	beq.w	8008580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800843e:	4b34      	ldr	r3, [pc, #208]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 030c 	and.w	r3, r3, #12
 8008446:	2b08      	cmp	r3, #8
 8008448:	d05c      	beq.n	8008504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d141      	bne.n	80084d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008452:	4b31      	ldr	r3, [pc, #196]	; (8008518 <HAL_RCC_OscConfig+0x478>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008458:	f7fd fd4e 	bl	8005ef8 <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008460:	f7fd fd4a 	bl	8005ef8 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e087      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008472:	4b27      	ldr	r3, [pc, #156]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69da      	ldr	r2, [r3, #28]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	019b      	lsls	r3, r3, #6
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	3b01      	subs	r3, #1
 8008498:	041b      	lsls	r3, r3, #16
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	061b      	lsls	r3, r3, #24
 80084a2:	491b      	ldr	r1, [pc, #108]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084a8:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <HAL_RCC_OscConfig+0x478>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ae:	f7fd fd23 	bl	8005ef8 <HAL_GetTick>
 80084b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b4:	e008      	b.n	80084c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084b6:	f7fd fd1f 	bl	8005ef8 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d901      	bls.n	80084c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e05c      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084c8:	4b11      	ldr	r3, [pc, #68]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d0f0      	beq.n	80084b6 <HAL_RCC_OscConfig+0x416>
 80084d4:	e054      	b.n	8008580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d6:	4b10      	ldr	r3, [pc, #64]	; (8008518 <HAL_RCC_OscConfig+0x478>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084dc:	f7fd fd0c 	bl	8005ef8 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e4:	f7fd fd08 	bl	8005ef8 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e045      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f6:	4b06      	ldr	r3, [pc, #24]	; (8008510 <HAL_RCC_OscConfig+0x470>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x444>
 8008502:	e03d      	b.n	8008580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d107      	bne.n	800851c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e038      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
 8008510:	40023800 	.word	0x40023800
 8008514:	40007000 	.word	0x40007000
 8008518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800851c:	4b1b      	ldr	r3, [pc, #108]	; (800858c <HAL_RCC_OscConfig+0x4ec>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d028      	beq.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008534:	429a      	cmp	r2, r3
 8008536:	d121      	bne.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008542:	429a      	cmp	r2, r3
 8008544:	d11a      	bne.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008554:	4293      	cmp	r3, r2
 8008556:	d111      	bne.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	3b01      	subs	r3, #1
 8008566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008568:	429a      	cmp	r2, r3
 800856a:	d107      	bne.n	800857c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008578:	429a      	cmp	r2, r3
 800857a:	d001      	beq.n	8008580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e000      	b.n	8008582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40023800 	.word	0x40023800

08008590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e0cc      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085a4:	4b68      	ldr	r3, [pc, #416]	; (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d90c      	bls.n	80085cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085b2:	4b65      	ldr	r3, [pc, #404]	; (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ba:	4b63      	ldr	r3, [pc, #396]	; (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d001      	beq.n	80085cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e0b8      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d020      	beq.n	800861a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085e4:	4b59      	ldr	r3, [pc, #356]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a58      	ldr	r2, [pc, #352]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d005      	beq.n	8008608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085fc:	4b53      	ldr	r3, [pc, #332]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	4a52      	ldr	r2, [pc, #328]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008608:	4b50      	ldr	r3, [pc, #320]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	494d      	ldr	r1, [pc, #308]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	4313      	orrs	r3, r2
 8008618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d044      	beq.n	80086b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d107      	bne.n	800863e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800862e:	4b47      	ldr	r3, [pc, #284]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d119      	bne.n	800866e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e07f      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d003      	beq.n	800864e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800864a:	2b03      	cmp	r3, #3
 800864c:	d107      	bne.n	800865e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800864e:	4b3f      	ldr	r3, [pc, #252]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e06f      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865e:	4b3b      	ldr	r3, [pc, #236]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e067      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800866e:	4b37      	ldr	r3, [pc, #220]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f023 0203 	bic.w	r2, r3, #3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	4934      	ldr	r1, [pc, #208]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 800867c:	4313      	orrs	r3, r2
 800867e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008680:	f7fd fc3a 	bl	8005ef8 <HAL_GetTick>
 8008684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008686:	e00a      	b.n	800869e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008688:	f7fd fc36 	bl	8005ef8 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	f241 3288 	movw	r2, #5000	; 0x1388
 8008696:	4293      	cmp	r3, r2
 8008698:	d901      	bls.n	800869e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e04f      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800869e:	4b2b      	ldr	r3, [pc, #172]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 020c 	and.w	r2, r3, #12
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d1eb      	bne.n	8008688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086b0:	4b25      	ldr	r3, [pc, #148]	; (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d20c      	bcs.n	80086d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086be:	4b22      	ldr	r3, [pc, #136]	; (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c6:	4b20      	ldr	r3, [pc, #128]	; (8008748 <HAL_RCC_ClockConfig+0x1b8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d001      	beq.n	80086d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e032      	b.n	800873e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0304 	and.w	r3, r3, #4
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d008      	beq.n	80086f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086e4:	4b19      	ldr	r3, [pc, #100]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	4916      	ldr	r1, [pc, #88]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008702:	4b12      	ldr	r3, [pc, #72]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	490e      	ldr	r1, [pc, #56]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 8008712:	4313      	orrs	r3, r2
 8008714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008716:	f000 f821 	bl	800875c <HAL_RCC_GetSysClockFreq>
 800871a:	4602      	mov	r2, r0
 800871c:	4b0b      	ldr	r3, [pc, #44]	; (800874c <HAL_RCC_ClockConfig+0x1bc>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	091b      	lsrs	r3, r3, #4
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	490a      	ldr	r1, [pc, #40]	; (8008750 <HAL_RCC_ClockConfig+0x1c0>)
 8008728:	5ccb      	ldrb	r3, [r1, r3]
 800872a:	fa22 f303 	lsr.w	r3, r2, r3
 800872e:	4a09      	ldr	r2, [pc, #36]	; (8008754 <HAL_RCC_ClockConfig+0x1c4>)
 8008730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008732:	4b09      	ldr	r3, [pc, #36]	; (8008758 <HAL_RCC_ClockConfig+0x1c8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f7fd f9cc 	bl	8005ad4 <HAL_InitTick>

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	40023c00 	.word	0x40023c00
 800874c:	40023800 	.word	0x40023800
 8008750:	08015460 	.word	0x08015460
 8008754:	20000014 	.word	0x20000014
 8008758:	20000018 	.word	0x20000018

0800875c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800875c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008760:	b090      	sub	sp, #64	; 0x40
 8008762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
 8008768:	2300      	movs	r3, #0
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800876c:	2300      	movs	r3, #0
 800876e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008774:	4b59      	ldr	r3, [pc, #356]	; (80088dc <HAL_RCC_GetSysClockFreq+0x180>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 030c 	and.w	r3, r3, #12
 800877c:	2b08      	cmp	r3, #8
 800877e:	d00d      	beq.n	800879c <HAL_RCC_GetSysClockFreq+0x40>
 8008780:	2b08      	cmp	r3, #8
 8008782:	f200 80a1 	bhi.w	80088c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_RCC_GetSysClockFreq+0x34>
 800878a:	2b04      	cmp	r3, #4
 800878c:	d003      	beq.n	8008796 <HAL_RCC_GetSysClockFreq+0x3a>
 800878e:	e09b      	b.n	80088c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008790:	4b53      	ldr	r3, [pc, #332]	; (80088e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008792:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008794:	e09b      	b.n	80088ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008796:	4b53      	ldr	r3, [pc, #332]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800879a:	e098      	b.n	80088ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800879c:	4b4f      	ldr	r3, [pc, #316]	; (80088dc <HAL_RCC_GetSysClockFreq+0x180>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087a6:	4b4d      	ldr	r3, [pc, #308]	; (80088dc <HAL_RCC_GetSysClockFreq+0x180>)
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d028      	beq.n	8008804 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087b2:	4b4a      	ldr	r3, [pc, #296]	; (80088dc <HAL_RCC_GetSysClockFreq+0x180>)
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	099b      	lsrs	r3, r3, #6
 80087b8:	2200      	movs	r2, #0
 80087ba:	623b      	str	r3, [r7, #32]
 80087bc:	627a      	str	r2, [r7, #36]	; 0x24
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80087c4:	2100      	movs	r1, #0
 80087c6:	4b47      	ldr	r3, [pc, #284]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80087c8:	fb03 f201 	mul.w	r2, r3, r1
 80087cc:	2300      	movs	r3, #0
 80087ce:	fb00 f303 	mul.w	r3, r0, r3
 80087d2:	4413      	add	r3, r2
 80087d4:	4a43      	ldr	r2, [pc, #268]	; (80088e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80087d6:	fba0 1202 	umull	r1, r2, r0, r2
 80087da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087dc:	460a      	mov	r2, r1
 80087de:	62ba      	str	r2, [r7, #40]	; 0x28
 80087e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087e2:	4413      	add	r3, r2
 80087e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e8:	2200      	movs	r2, #0
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	61fa      	str	r2, [r7, #28]
 80087ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087f6:	f7f8 fa9f 	bl	8000d38 <__aeabi_uldivmod>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4613      	mov	r3, r2
 8008800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008802:	e053      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008804:	4b35      	ldr	r3, [pc, #212]	; (80088dc <HAL_RCC_GetSysClockFreq+0x180>)
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	099b      	lsrs	r3, r3, #6
 800880a:	2200      	movs	r2, #0
 800880c:	613b      	str	r3, [r7, #16]
 800880e:	617a      	str	r2, [r7, #20]
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008816:	f04f 0b00 	mov.w	fp, #0
 800881a:	4652      	mov	r2, sl
 800881c:	465b      	mov	r3, fp
 800881e:	f04f 0000 	mov.w	r0, #0
 8008822:	f04f 0100 	mov.w	r1, #0
 8008826:	0159      	lsls	r1, r3, #5
 8008828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800882c:	0150      	lsls	r0, r2, #5
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	ebb2 080a 	subs.w	r8, r2, sl
 8008836:	eb63 090b 	sbc.w	r9, r3, fp
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	f04f 0300 	mov.w	r3, #0
 8008842:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008846:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800884a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800884e:	ebb2 0408 	subs.w	r4, r2, r8
 8008852:	eb63 0509 	sbc.w	r5, r3, r9
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	f04f 0300 	mov.w	r3, #0
 800885e:	00eb      	lsls	r3, r5, #3
 8008860:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008864:	00e2      	lsls	r2, r4, #3
 8008866:	4614      	mov	r4, r2
 8008868:	461d      	mov	r5, r3
 800886a:	eb14 030a 	adds.w	r3, r4, sl
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	eb45 030b 	adc.w	r3, r5, fp
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	f04f 0200 	mov.w	r2, #0
 800887a:	f04f 0300 	mov.w	r3, #0
 800887e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008882:	4629      	mov	r1, r5
 8008884:	028b      	lsls	r3, r1, #10
 8008886:	4621      	mov	r1, r4
 8008888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800888c:	4621      	mov	r1, r4
 800888e:	028a      	lsls	r2, r1, #10
 8008890:	4610      	mov	r0, r2
 8008892:	4619      	mov	r1, r3
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	2200      	movs	r2, #0
 8008898:	60bb      	str	r3, [r7, #8]
 800889a:	60fa      	str	r2, [r7, #12]
 800889c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088a0:	f7f8 fa4a 	bl	8000d38 <__aeabi_uldivmod>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4613      	mov	r3, r2
 80088aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088ac:	4b0b      	ldr	r3, [pc, #44]	; (80088dc <HAL_RCC_GetSysClockFreq+0x180>)
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	0c1b      	lsrs	r3, r3, #16
 80088b2:	f003 0303 	and.w	r3, r3, #3
 80088b6:	3301      	adds	r3, #1
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80088bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088c6:	e002      	b.n	80088ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088c8:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3740      	adds	r7, #64	; 0x40
 80088d4:	46bd      	mov	sp, r7
 80088d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088da:	bf00      	nop
 80088dc:	40023800 	.word	0x40023800
 80088e0:	00f42400 	.word	0x00f42400
 80088e4:	017d7840 	.word	0x017d7840

080088e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088ec:	4b03      	ldr	r3, [pc, #12]	; (80088fc <HAL_RCC_GetHCLKFreq+0x14>)
 80088ee:	681b      	ldr	r3, [r3, #0]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	20000014 	.word	0x20000014

08008900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008904:	f7ff fff0 	bl	80088e8 <HAL_RCC_GetHCLKFreq>
 8008908:	4602      	mov	r2, r0
 800890a:	4b05      	ldr	r3, [pc, #20]	; (8008920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	0a9b      	lsrs	r3, r3, #10
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	4903      	ldr	r1, [pc, #12]	; (8008924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008916:	5ccb      	ldrb	r3, [r1, r3]
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800891c:	4618      	mov	r0, r3
 800891e:	bd80      	pop	{r7, pc}
 8008920:	40023800 	.word	0x40023800
 8008924:	08015470 	.word	0x08015470

08008928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800892c:	f7ff ffdc 	bl	80088e8 <HAL_RCC_GetHCLKFreq>
 8008930:	4602      	mov	r2, r0
 8008932:	4b05      	ldr	r3, [pc, #20]	; (8008948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	0b5b      	lsrs	r3, r3, #13
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	4903      	ldr	r1, [pc, #12]	; (800894c <HAL_RCC_GetPCLK2Freq+0x24>)
 800893e:	5ccb      	ldrb	r3, [r1, r3]
 8008940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008944:	4618      	mov	r0, r3
 8008946:	bd80      	pop	{r7, pc}
 8008948:	40023800 	.word	0x40023800
 800894c:	08015470 	.word	0x08015470

08008950 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	220f      	movs	r2, #15
 800895e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008960:	4b12      	ldr	r3, [pc, #72]	; (80089ac <HAL_RCC_GetClockConfig+0x5c>)
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f003 0203 	and.w	r2, r3, #3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <HAL_RCC_GetClockConfig+0x5c>)
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008978:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <HAL_RCC_GetClockConfig+0x5c>)
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008984:	4b09      	ldr	r3, [pc, #36]	; (80089ac <HAL_RCC_GetClockConfig+0x5c>)
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	08db      	lsrs	r3, r3, #3
 800898a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008992:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <HAL_RCC_GetClockConfig+0x60>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0207 	and.w	r2, r3, #7
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	601a      	str	r2, [r3, #0]
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40023800 	.word	0x40023800
 80089b0:	40023c00 	.word	0x40023c00

080089b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e07b      	b.n	8008abe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d108      	bne.n	80089e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d6:	d009      	beq.n	80089ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	61da      	str	r2, [r3, #28]
 80089de:	e005      	b.n	80089ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d106      	bne.n	8008a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7fc ff5c 	bl	80058c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a70:	ea42 0103 	orr.w	r1, r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	0c1b      	lsrs	r3, r3, #16
 8008a8a:	f003 0104 	and.w	r1, r3, #4
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	f003 0210 	and.w	r2, r3, #16
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69da      	ldr	r2, [r3, #28]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008aac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b088      	sub	sp, #32
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	60f8      	str	r0, [r7, #12]
 8008ace:	60b9      	str	r1, [r7, #8]
 8008ad0:	603b      	str	r3, [r7, #0]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_SPI_Transmit+0x22>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e126      	b.n	8008d36 <HAL_SPI_Transmit+0x270>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008af0:	f7fd fa02 	bl	8005ef8 <HAL_GetTick>
 8008af4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008af6:	88fb      	ldrh	r3, [r7, #6]
 8008af8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d002      	beq.n	8008b0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b06:	2302      	movs	r3, #2
 8008b08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b0a:	e10b      	b.n	8008d24 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <HAL_SPI_Transmit+0x52>
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d102      	bne.n	8008b1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b1c:	e102      	b.n	8008d24 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2203      	movs	r2, #3
 8008b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	88fa      	ldrh	r2, [r7, #6]
 8008b36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	88fa      	ldrh	r2, [r7, #6]
 8008b3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b64:	d10f      	bne.n	8008b86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b90:	2b40      	cmp	r3, #64	; 0x40
 8008b92:	d007      	beq.n	8008ba4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bac:	d14b      	bne.n	8008c46 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_SPI_Transmit+0xf6>
 8008bb6:	8afb      	ldrh	r3, [r7, #22]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d13e      	bne.n	8008c3a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc0:	881a      	ldrh	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bcc:	1c9a      	adds	r2, r3, #2
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008be0:	e02b      	b.n	8008c3a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d112      	bne.n	8008c16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	881a      	ldrh	r2, [r3, #0]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c00:	1c9a      	adds	r2, r3, #2
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c14:	e011      	b.n	8008c3a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c16:	f7fd f96f 	bl	8005ef8 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d803      	bhi.n	8008c2e <HAL_SPI_Transmit+0x168>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d102      	bne.n	8008c34 <HAL_SPI_Transmit+0x16e>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d102      	bne.n	8008c3a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c38:	e074      	b.n	8008d24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1ce      	bne.n	8008be2 <HAL_SPI_Transmit+0x11c>
 8008c44:	e04c      	b.n	8008ce0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <HAL_SPI_Transmit+0x18e>
 8008c4e:	8afb      	ldrh	r3, [r7, #22]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d140      	bne.n	8008cd6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	330c      	adds	r3, #12
 8008c5e:	7812      	ldrb	r2, [r2, #0]
 8008c60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	3b01      	subs	r3, #1
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c7a:	e02c      	b.n	8008cd6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d113      	bne.n	8008cb2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	330c      	adds	r3, #12
 8008c94:	7812      	ldrb	r2, [r2, #0]
 8008c96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cb0:	e011      	b.n	8008cd6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cb2:	f7fd f921 	bl	8005ef8 <HAL_GetTick>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d803      	bhi.n	8008cca <HAL_SPI_Transmit+0x204>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d102      	bne.n	8008cd0 <HAL_SPI_Transmit+0x20a>
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d102      	bne.n	8008cd6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008cd4:	e026      	b.n	8008d24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1cd      	bne.n	8008c7c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 fa55 	bl	8009194 <SPI_EndRxTxTransaction>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10a      	bne.n	8008d14 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cfe:	2300      	movs	r3, #0
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	77fb      	strb	r3, [r7, #31]
 8008d20:	e000      	b.n	8008d24 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008d22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d34:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b08c      	sub	sp, #48	; 0x30
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	60b9      	str	r1, [r7, #8]
 8008d48:	607a      	str	r2, [r7, #4]
 8008d4a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d101      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x26>
 8008d60:	2302      	movs	r3, #2
 8008d62:	e18a      	b.n	800907a <HAL_SPI_TransmitReceive+0x33c>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d6c:	f7fd f8c4 	bl	8005ef8 <HAL_GetTick>
 8008d70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d82:	887b      	ldrh	r3, [r7, #2]
 8008d84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d00f      	beq.n	8008dae <HAL_SPI_TransmitReceive+0x70>
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d94:	d107      	bne.n	8008da6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d103      	bne.n	8008da6 <HAL_SPI_TransmitReceive+0x68>
 8008d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d003      	beq.n	8008dae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008da6:	2302      	movs	r3, #2
 8008da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008dac:	e15b      	b.n	8009066 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <HAL_SPI_TransmitReceive+0x82>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <HAL_SPI_TransmitReceive+0x82>
 8008dba:	887b      	ldrh	r3, [r7, #2]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008dc6:	e14e      	b.n	8009066 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d003      	beq.n	8008ddc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	887a      	ldrh	r2, [r7, #2]
 8008dec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	887a      	ldrh	r2, [r7, #2]
 8008df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	887a      	ldrh	r2, [r7, #2]
 8008dfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	887a      	ldrh	r2, [r7, #2]
 8008e04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1c:	2b40      	cmp	r3, #64	; 0x40
 8008e1e:	d007      	beq.n	8008e30 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e38:	d178      	bne.n	8008f2c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <HAL_SPI_TransmitReceive+0x10a>
 8008e42:	8b7b      	ldrh	r3, [r7, #26]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d166      	bne.n	8008f16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4c:	881a      	ldrh	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e58:	1c9a      	adds	r2, r3, #2
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e6c:	e053      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d11b      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x176>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d016      	beq.n	8008eb4 <HAL_SPI_TransmitReceive+0x176>
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d113      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	881a      	ldrh	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	1c9a      	adds	r2, r3, #2
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d119      	bne.n	8008ef6 <HAL_SPI_TransmitReceive+0x1b8>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d014      	beq.n	8008ef6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	1c9a      	adds	r2, r3, #2
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ef6:	f7fc ffff 	bl	8005ef8 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d807      	bhi.n	8008f16 <HAL_SPI_TransmitReceive+0x1d8>
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d003      	beq.n	8008f16 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f14:	e0a7      	b.n	8009066 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1a6      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x130>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1a1      	bne.n	8008e6e <HAL_SPI_TransmitReceive+0x130>
 8008f2a:	e07c      	b.n	8009026 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <HAL_SPI_TransmitReceive+0x1fc>
 8008f34:	8b7b      	ldrh	r3, [r7, #26]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d16b      	bne.n	8009012 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	330c      	adds	r3, #12
 8008f44:	7812      	ldrb	r2, [r2, #0]
 8008f46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f60:	e057      	b.n	8009012 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d11c      	bne.n	8008faa <HAL_SPI_TransmitReceive+0x26c>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d017      	beq.n	8008faa <HAL_SPI_TransmitReceive+0x26c>
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d114      	bne.n	8008faa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	330c      	adds	r3, #12
 8008f8a:	7812      	ldrb	r2, [r2, #0]
 8008f8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d119      	bne.n	8008fec <HAL_SPI_TransmitReceive+0x2ae>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d014      	beq.n	8008fec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fec:	f7fc ff84 	bl	8005ef8 <HAL_GetTick>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d803      	bhi.n	8009004 <HAL_SPI_TransmitReceive+0x2c6>
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009002:	d102      	bne.n	800900a <HAL_SPI_TransmitReceive+0x2cc>
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	2b00      	cmp	r3, #0
 8009008:	d103      	bne.n	8009012 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009010:	e029      	b.n	8009066 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009016:	b29b      	uxth	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1a2      	bne.n	8008f62 <HAL_SPI_TransmitReceive+0x224>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d19d      	bne.n	8008f62 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009028:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f8b2 	bl	8009194 <SPI_EndRxTxTransaction>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d006      	beq.n	8009044 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2220      	movs	r2, #32
 8009040:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009042:	e010      	b.n	8009066 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10b      	bne.n	8009064 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	617b      	str	r3, [r7, #20]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	e000      	b.n	8009066 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009064:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009076:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800907a:	4618      	mov	r0, r3
 800907c:	3730      	adds	r7, #48	; 0x30
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	4613      	mov	r3, r2
 8009092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009094:	f7fc ff30 	bl	8005ef8 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	4413      	add	r3, r2
 80090a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090a4:	f7fc ff28 	bl	8005ef8 <HAL_GetTick>
 80090a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090aa:	4b39      	ldr	r3, [pc, #228]	; (8009190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	015b      	lsls	r3, r3, #5
 80090b0:	0d1b      	lsrs	r3, r3, #20
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	fb02 f303 	mul.w	r3, r2, r3
 80090b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090ba:	e054      	b.n	8009166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c2:	d050      	beq.n	8009166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80090c4:	f7fc ff18 	bl	8005ef8 <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d902      	bls.n	80090da <SPI_WaitFlagStateUntilTimeout+0x56>
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d13d      	bne.n	8009156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090f2:	d111      	bne.n	8009118 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090fc:	d004      	beq.n	8009108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009106:	d107      	bne.n	8009118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009120:	d10f      	bne.n	8009142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e017      	b.n	8009186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	3b01      	subs	r3, #1
 8009164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4013      	ands	r3, r2
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	429a      	cmp	r2, r3
 8009174:	bf0c      	ite	eq
 8009176:	2301      	moveq	r3, #1
 8009178:	2300      	movne	r3, #0
 800917a:	b2db      	uxtb	r3, r3
 800917c:	461a      	mov	r2, r3
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	429a      	cmp	r2, r3
 8009182:	d19b      	bne.n	80090bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3720      	adds	r7, #32
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20000014 	.word	0x20000014

08009194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af02      	add	r7, sp, #8
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091a0:	4b1b      	ldr	r3, [pc, #108]	; (8009210 <SPI_EndRxTxTransaction+0x7c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1b      	ldr	r2, [pc, #108]	; (8009214 <SPI_EndRxTxTransaction+0x80>)
 80091a6:	fba2 2303 	umull	r2, r3, r2, r3
 80091aa:	0d5b      	lsrs	r3, r3, #21
 80091ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80091b0:	fb02 f303 	mul.w	r3, r2, r3
 80091b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091be:	d112      	bne.n	80091e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2200      	movs	r2, #0
 80091c8:	2180      	movs	r1, #128	; 0x80
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff ff5a 	bl	8009084 <SPI_WaitFlagStateUntilTimeout>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d016      	beq.n	8009204 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091da:	f043 0220 	orr.w	r2, r3, #32
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e00f      	b.n	8009206 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fc:	2b80      	cmp	r3, #128	; 0x80
 80091fe:	d0f2      	beq.n	80091e6 <SPI_EndRxTxTransaction+0x52>
 8009200:	e000      	b.n	8009204 <SPI_EndRxTxTransaction+0x70>
        break;
 8009202:	bf00      	nop
  }

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000014 	.word	0x20000014
 8009214:	165e9f81 	.word	0x165e9f81

08009218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e041      	b.n	80092ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fc fb88 	bl	8005954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3304      	adds	r3, #4
 8009254:	4619      	mov	r1, r3
 8009256:	4610      	mov	r0, r2
 8009258:	f000 fae2 	bl	8009820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d001      	beq.n	80092d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e03c      	b.n	800934a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a1e      	ldr	r2, [pc, #120]	; (8009358 <HAL_TIM_Base_Start+0xa0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d018      	beq.n	8009314 <HAL_TIM_Base_Start+0x5c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ea:	d013      	beq.n	8009314 <HAL_TIM_Base_Start+0x5c>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a1a      	ldr	r2, [pc, #104]	; (800935c <HAL_TIM_Base_Start+0xa4>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00e      	beq.n	8009314 <HAL_TIM_Base_Start+0x5c>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a19      	ldr	r2, [pc, #100]	; (8009360 <HAL_TIM_Base_Start+0xa8>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d009      	beq.n	8009314 <HAL_TIM_Base_Start+0x5c>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a17      	ldr	r2, [pc, #92]	; (8009364 <HAL_TIM_Base_Start+0xac>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_TIM_Base_Start+0x5c>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a16      	ldr	r2, [pc, #88]	; (8009368 <HAL_TIM_Base_Start+0xb0>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d111      	bne.n	8009338 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 0307 	and.w	r3, r3, #7
 800931e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b06      	cmp	r3, #6
 8009324:	d010      	beq.n	8009348 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f042 0201 	orr.w	r2, r2, #1
 8009334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009336:	e007      	b.n	8009348 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0201 	orr.w	r2, r2, #1
 8009346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	40010000 	.word	0x40010000
 800935c:	40000400 	.word	0x40000400
 8009360:	40000800 	.word	0x40000800
 8009364:	40000c00 	.word	0x40000c00
 8009368:	40014000 	.word	0x40014000

0800936c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b01      	cmp	r3, #1
 800937e:	d001      	beq.n	8009384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e044      	b.n	800940e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f042 0201 	orr.w	r2, r2, #1
 800939a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a1e      	ldr	r2, [pc, #120]	; (800941c <HAL_TIM_Base_Start_IT+0xb0>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d018      	beq.n	80093d8 <HAL_TIM_Base_Start_IT+0x6c>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ae:	d013      	beq.n	80093d8 <HAL_TIM_Base_Start_IT+0x6c>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a1a      	ldr	r2, [pc, #104]	; (8009420 <HAL_TIM_Base_Start_IT+0xb4>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00e      	beq.n	80093d8 <HAL_TIM_Base_Start_IT+0x6c>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a19      	ldr	r2, [pc, #100]	; (8009424 <HAL_TIM_Base_Start_IT+0xb8>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d009      	beq.n	80093d8 <HAL_TIM_Base_Start_IT+0x6c>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a17      	ldr	r2, [pc, #92]	; (8009428 <HAL_TIM_Base_Start_IT+0xbc>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d004      	beq.n	80093d8 <HAL_TIM_Base_Start_IT+0x6c>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a16      	ldr	r2, [pc, #88]	; (800942c <HAL_TIM_Base_Start_IT+0xc0>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d111      	bne.n	80093fc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b06      	cmp	r3, #6
 80093e8:	d010      	beq.n	800940c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f042 0201 	orr.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093fa:	e007      	b.n	800940c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0201 	orr.w	r2, r2, #1
 800940a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	40010000 	.word	0x40010000
 8009420:	40000400 	.word	0x40000400
 8009424:	40000800 	.word	0x40000800
 8009428:	40000c00 	.word	0x40000c00
 800942c:	40014000 	.word	0x40014000

08009430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b02      	cmp	r3, #2
 8009444:	d122      	bne.n	800948c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b02      	cmp	r3, #2
 8009452:	d11b      	bne.n	800948c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0202 	mvn.w	r2, #2
 800945c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9b5 	bl	80097e2 <HAL_TIM_IC_CaptureCallback>
 8009478:	e005      	b.n	8009486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f9a7 	bl	80097ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9b8 	bl	80097f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0304 	and.w	r3, r3, #4
 8009496:	2b04      	cmp	r3, #4
 8009498:	d122      	bne.n	80094e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d11b      	bne.n	80094e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0204 	mvn.w	r2, #4
 80094b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2202      	movs	r2, #2
 80094b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f98b 	bl	80097e2 <HAL_TIM_IC_CaptureCallback>
 80094cc:	e005      	b.n	80094da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f97d 	bl	80097ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 f98e 	bl	80097f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f003 0308 	and.w	r3, r3, #8
 80094ea:	2b08      	cmp	r3, #8
 80094ec:	d122      	bne.n	8009534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d11b      	bne.n	8009534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f06f 0208 	mvn.w	r2, #8
 8009504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2204      	movs	r2, #4
 800950a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f003 0303 	and.w	r3, r3, #3
 8009516:	2b00      	cmp	r3, #0
 8009518:	d003      	beq.n	8009522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f961 	bl	80097e2 <HAL_TIM_IC_CaptureCallback>
 8009520:	e005      	b.n	800952e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f953 	bl	80097ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f964 	bl	80097f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f003 0310 	and.w	r3, r3, #16
 800953e:	2b10      	cmp	r3, #16
 8009540:	d122      	bne.n	8009588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f003 0310 	and.w	r3, r3, #16
 800954c:	2b10      	cmp	r3, #16
 800954e:	d11b      	bne.n	8009588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f06f 0210 	mvn.w	r2, #16
 8009558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2208      	movs	r2, #8
 800955e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f937 	bl	80097e2 <HAL_TIM_IC_CaptureCallback>
 8009574:	e005      	b.n	8009582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f929 	bl	80097ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f93a 	bl	80097f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b01      	cmp	r3, #1
 8009594:	d10e      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d107      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f06f 0201 	mvn.w	r2, #1
 80095ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7fb fa42 	bl	8004a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095be:	2b80      	cmp	r3, #128	; 0x80
 80095c0:	d10e      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095cc:	2b80      	cmp	r3, #128	; 0x80
 80095ce:	d107      	bne.n	80095e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fab2 	bl	8009b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ea:	2b40      	cmp	r3, #64	; 0x40
 80095ec:	d10e      	bne.n	800960c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f8:	2b40      	cmp	r3, #64	; 0x40
 80095fa:	d107      	bne.n	800960c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f8ff 	bl	800980a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b20      	cmp	r3, #32
 8009618:	d10e      	bne.n	8009638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b20      	cmp	r3, #32
 8009626:	d107      	bne.n	8009638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f06f 0220 	mvn.w	r2, #32
 8009630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fa7c 	bl	8009b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d101      	bne.n	800965c <HAL_TIM_ConfigClockSource+0x1c>
 8009658:	2302      	movs	r3, #2
 800965a:	e0b4      	b.n	80097c6 <HAL_TIM_ConfigClockSource+0x186>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800967a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009694:	d03e      	beq.n	8009714 <HAL_TIM_ConfigClockSource+0xd4>
 8009696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800969a:	f200 8087 	bhi.w	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 800969e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a2:	f000 8086 	beq.w	80097b2 <HAL_TIM_ConfigClockSource+0x172>
 80096a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096aa:	d87f      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096ac:	2b70      	cmp	r3, #112	; 0x70
 80096ae:	d01a      	beq.n	80096e6 <HAL_TIM_ConfigClockSource+0xa6>
 80096b0:	2b70      	cmp	r3, #112	; 0x70
 80096b2:	d87b      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096b4:	2b60      	cmp	r3, #96	; 0x60
 80096b6:	d050      	beq.n	800975a <HAL_TIM_ConfigClockSource+0x11a>
 80096b8:	2b60      	cmp	r3, #96	; 0x60
 80096ba:	d877      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096bc:	2b50      	cmp	r3, #80	; 0x50
 80096be:	d03c      	beq.n	800973a <HAL_TIM_ConfigClockSource+0xfa>
 80096c0:	2b50      	cmp	r3, #80	; 0x50
 80096c2:	d873      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096c4:	2b40      	cmp	r3, #64	; 0x40
 80096c6:	d058      	beq.n	800977a <HAL_TIM_ConfigClockSource+0x13a>
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d86f      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096cc:	2b30      	cmp	r3, #48	; 0x30
 80096ce:	d064      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x15a>
 80096d0:	2b30      	cmp	r3, #48	; 0x30
 80096d2:	d86b      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d060      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x15a>
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d867      	bhi.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d05c      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x15a>
 80096e0:	2b10      	cmp	r3, #16
 80096e2:	d05a      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x15a>
 80096e4:	e062      	b.n	80097ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	6899      	ldr	r1, [r3, #8]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f000 f98d 	bl	8009a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	609a      	str	r2, [r3, #8]
      break;
 8009712:	e04f      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	6899      	ldr	r1, [r3, #8]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f000 f976 	bl	8009a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689a      	ldr	r2, [r3, #8]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009736:	609a      	str	r2, [r3, #8]
      break;
 8009738:	e03c      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	6859      	ldr	r1, [r3, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	461a      	mov	r2, r3
 8009748:	f000 f8ea 	bl	8009920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2150      	movs	r1, #80	; 0x50
 8009752:	4618      	mov	r0, r3
 8009754:	f000 f943 	bl	80099de <TIM_ITRx_SetConfig>
      break;
 8009758:	e02c      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	6859      	ldr	r1, [r3, #4]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	461a      	mov	r2, r3
 8009768:	f000 f909 	bl	800997e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2160      	movs	r1, #96	; 0x60
 8009772:	4618      	mov	r0, r3
 8009774:	f000 f933 	bl	80099de <TIM_ITRx_SetConfig>
      break;
 8009778:	e01c      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	6859      	ldr	r1, [r3, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	461a      	mov	r2, r3
 8009788:	f000 f8ca 	bl	8009920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2140      	movs	r1, #64	; 0x40
 8009792:	4618      	mov	r0, r3
 8009794:	f000 f923 	bl	80099de <TIM_ITRx_SetConfig>
      break;
 8009798:	e00c      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f000 f91a 	bl	80099de <TIM_ITRx_SetConfig>
      break;
 80097aa:	e003      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	73fb      	strb	r3, [r7, #15]
      break;
 80097b0:	e000      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b083      	sub	sp, #12
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097ea:	bf00      	nop
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097fe:	bf00      	nop
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
	...

08009820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a34      	ldr	r2, [pc, #208]	; (8009904 <TIM_Base_SetConfig+0xe4>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00f      	beq.n	8009858 <TIM_Base_SetConfig+0x38>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983e:	d00b      	beq.n	8009858 <TIM_Base_SetConfig+0x38>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a31      	ldr	r2, [pc, #196]	; (8009908 <TIM_Base_SetConfig+0xe8>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d007      	beq.n	8009858 <TIM_Base_SetConfig+0x38>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a30      	ldr	r2, [pc, #192]	; (800990c <TIM_Base_SetConfig+0xec>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d003      	beq.n	8009858 <TIM_Base_SetConfig+0x38>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a2f      	ldr	r2, [pc, #188]	; (8009910 <TIM_Base_SetConfig+0xf0>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d108      	bne.n	800986a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a25      	ldr	r2, [pc, #148]	; (8009904 <TIM_Base_SetConfig+0xe4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d01b      	beq.n	80098aa <TIM_Base_SetConfig+0x8a>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009878:	d017      	beq.n	80098aa <TIM_Base_SetConfig+0x8a>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a22      	ldr	r2, [pc, #136]	; (8009908 <TIM_Base_SetConfig+0xe8>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d013      	beq.n	80098aa <TIM_Base_SetConfig+0x8a>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a21      	ldr	r2, [pc, #132]	; (800990c <TIM_Base_SetConfig+0xec>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d00f      	beq.n	80098aa <TIM_Base_SetConfig+0x8a>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a20      	ldr	r2, [pc, #128]	; (8009910 <TIM_Base_SetConfig+0xf0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d00b      	beq.n	80098aa <TIM_Base_SetConfig+0x8a>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a1f      	ldr	r2, [pc, #124]	; (8009914 <TIM_Base_SetConfig+0xf4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d007      	beq.n	80098aa <TIM_Base_SetConfig+0x8a>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a1e      	ldr	r2, [pc, #120]	; (8009918 <TIM_Base_SetConfig+0xf8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d003      	beq.n	80098aa <TIM_Base_SetConfig+0x8a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a1d      	ldr	r2, [pc, #116]	; (800991c <TIM_Base_SetConfig+0xfc>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d108      	bne.n	80098bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a08      	ldr	r2, [pc, #32]	; (8009904 <TIM_Base_SetConfig+0xe4>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d103      	bne.n	80098f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	691a      	ldr	r2, [r3, #16]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	615a      	str	r2, [r3, #20]
}
 80098f6:	bf00      	nop
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	40010000 	.word	0x40010000
 8009908:	40000400 	.word	0x40000400
 800990c:	40000800 	.word	0x40000800
 8009910:	40000c00 	.word	0x40000c00
 8009914:	40014000 	.word	0x40014000
 8009918:	40014400 	.word	0x40014400
 800991c:	40014800 	.word	0x40014800

08009920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	f023 0201 	bic.w	r2, r3, #1
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800994a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	4313      	orrs	r3, r2
 8009954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f023 030a 	bic.w	r3, r3, #10
 800995c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	621a      	str	r2, [r3, #32]
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800997e:	b480      	push	{r7}
 8009980:	b087      	sub	sp, #28
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	f023 0210 	bic.w	r2, r3, #16
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6a1b      	ldr	r3, [r3, #32]
 80099a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	031b      	lsls	r3, r3, #12
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	621a      	str	r2, [r3, #32]
}
 80099d2:	bf00      	nop
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	f043 0307 	orr.w	r3, r3, #7
 8009a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	609a      	str	r2, [r3, #8]
}
 8009a08:	bf00      	nop
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	021a      	lsls	r2, r3, #8
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	431a      	orrs	r2, r3
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	609a      	str	r2, [r3, #8]
}
 8009a48:	bf00      	nop
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e050      	b.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a1c      	ldr	r2, [pc, #112]	; (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d018      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab8:	d013      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a18      	ldr	r2, [pc, #96]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00e      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a16      	ldr	r2, [pc, #88]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d009      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a15      	ldr	r2, [pc, #84]	; (8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d004      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a13      	ldr	r2, [pc, #76]	; (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d10c      	bne.n	8009afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40000400 	.word	0x40000400
 8009b24:	40000800 	.word	0x40000800
 8009b28:	40000c00 	.word	0x40000c00
 8009b2c:	40014000 	.word	0x40014000

08009b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e03f      	b.n	8009bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d106      	bne.n	8009b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7fb ff24 	bl	80059cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2224      	movs	r2, #36	; 0x24
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fcdf 	bl	800a560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	695a      	ldr	r2, [r3, #20]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2220      	movs	r2, #32
 8009bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b084      	sub	sp, #16
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b20      	cmp	r3, #32
 8009c0a:	d11d      	bne.n	8009c48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <HAL_UART_Receive_IT+0x26>
 8009c12:	88fb      	ldrh	r3, [r7, #6]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e016      	b.n	8009c4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d101      	bne.n	8009c2a <HAL_UART_Receive_IT+0x38>
 8009c26:	2302      	movs	r3, #2
 8009c28:	e00f      	b.n	8009c4a <HAL_UART_Receive_IT+0x58>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c38:	88fb      	ldrh	r3, [r7, #6]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	68b9      	ldr	r1, [r7, #8]
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 fab6 	bl	800a1b0 <UART_Start_Receive_IT>
 8009c44:	4603      	mov	r3, r0
 8009c46:	e000      	b.n	8009c4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009c48:	2302      	movs	r3, #2
  }
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b0ba      	sub	sp, #232	; 0xe8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10f      	bne.n	8009cba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c9e:	f003 0320 	and.w	r3, r3, #32
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d009      	beq.n	8009cba <HAL_UART_IRQHandler+0x66>
 8009ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fb99 	bl	800a3ea <UART_Receive_IT>
      return;
 8009cb8:	e256      	b.n	800a168 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 80de 	beq.w	8009e80 <HAL_UART_IRQHandler+0x22c>
 8009cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 80d1 	beq.w	8009e80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00b      	beq.n	8009d02 <HAL_UART_IRQHandler+0xae>
 8009cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfa:	f043 0201 	orr.w	r2, r3, #1
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <HAL_UART_IRQHandler+0xd2>
 8009d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d005      	beq.n	8009d26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	f043 0202 	orr.w	r2, r3, #2
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <HAL_UART_IRQHandler+0xf6>
 8009d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d005      	beq.n	8009d4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	f043 0204 	orr.w	r2, r3, #4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d4e:	f003 0308 	and.w	r3, r3, #8
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d011      	beq.n	8009d7a <HAL_UART_IRQHandler+0x126>
 8009d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d5a:	f003 0320 	and.w	r3, r3, #32
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d105      	bne.n	8009d6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d005      	beq.n	8009d7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d72:	f043 0208 	orr.w	r2, r3, #8
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 81ed 	beq.w	800a15e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d008      	beq.n	8009da2 <HAL_UART_IRQHandler+0x14e>
 8009d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d94:	f003 0320 	and.w	r3, r3, #32
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fb24 	bl	800a3ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dac:	2b40      	cmp	r3, #64	; 0x40
 8009dae:	bf0c      	ite	eq
 8009db0:	2301      	moveq	r3, #1
 8009db2:	2300      	movne	r3, #0
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f003 0308 	and.w	r3, r3, #8
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d103      	bne.n	8009dce <HAL_UART_IRQHandler+0x17a>
 8009dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d04f      	beq.n	8009e6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fa2c 	bl	800a22c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d141      	bne.n	8009e66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3314      	adds	r3, #20
 8009de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3314      	adds	r3, #20
 8009e0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1d9      	bne.n	8009de2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d013      	beq.n	8009e5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3a:	4a7d      	ldr	r2, [pc, #500]	; (800a030 <HAL_UART_IRQHandler+0x3dc>)
 8009e3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fc f9da 	bl	80061fc <HAL_DMA_Abort_IT>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d016      	beq.n	8009e7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e5c:	e00e      	b.n	8009e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f990 	bl	800a184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e64:	e00a      	b.n	8009e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f98c 	bl	800a184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e6c:	e006      	b.n	8009e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f988 	bl	800a184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009e7a:	e170      	b.n	800a15e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e7c:	bf00      	nop
    return;
 8009e7e:	e16e      	b.n	800a15e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	f040 814a 	bne.w	800a11e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 8143 	beq.w	800a11e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e9c:	f003 0310 	and.w	r3, r3, #16
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 813c 	beq.w	800a11e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60bb      	str	r3, [r7, #8]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60bb      	str	r3, [r7, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	60bb      	str	r3, [r7, #8]
 8009eba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec6:	2b40      	cmp	r3, #64	; 0x40
 8009ec8:	f040 80b4 	bne.w	800a034 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ed8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 8140 	beq.w	800a162 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009eea:	429a      	cmp	r2, r3
 8009eec:	f080 8139 	bcs.w	800a162 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ef6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f02:	f000 8088 	beq.w	800a016 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	330c      	adds	r3, #12
 8009f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f14:	e853 3f00 	ldrex	r3, [r3]
 8009f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	330c      	adds	r3, #12
 8009f2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1d9      	bne.n	8009f06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3314      	adds	r3, #20
 8009f58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f64:	f023 0301 	bic.w	r3, r3, #1
 8009f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3314      	adds	r3, #20
 8009f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f82:	e841 2300 	strex	r3, r2, [r1]
 8009f86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d1e1      	bne.n	8009f52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3314      	adds	r3, #20
 8009f94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f98:	e853 3f00 	ldrex	r3, [r3]
 8009f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	3314      	adds	r3, #20
 8009fae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009fb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009fb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e3      	bne.n	8009f8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	330c      	adds	r3, #12
 8009fda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe6:	f023 0310 	bic.w	r3, r3, #16
 8009fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	330c      	adds	r3, #12
 8009ff4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ff8:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ffa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ffe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a000:	e841 2300 	strex	r3, r2, [r1]
 800a004:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e3      	bne.n	8009fd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a010:	4618      	mov	r0, r3
 800a012:	f7fc f883 	bl	800611c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a01e:	b29b      	uxth	r3, r3
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	b29b      	uxth	r3, r3
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f8b6 	bl	800a198 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a02c:	e099      	b.n	800a162 <HAL_UART_IRQHandler+0x50e>
 800a02e:	bf00      	nop
 800a030:	0800a2f3 	.word	0x0800a2f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a048:	b29b      	uxth	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 808b 	beq.w	800a166 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 8086 	beq.w	800a166 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	330c      	adds	r3, #12
 800a060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	330c      	adds	r3, #12
 800a07a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a07e:	647a      	str	r2, [r7, #68]	; 0x44
 800a080:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e3      	bne.n	800a05a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3314      	adds	r3, #20
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	e853 3f00 	ldrex	r3, [r3]
 800a0a0:	623b      	str	r3, [r7, #32]
   return(result);
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	f023 0301 	bic.w	r3, r3, #1
 800a0a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3314      	adds	r3, #20
 800a0b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a0b6:	633a      	str	r2, [r7, #48]	; 0x30
 800a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e3      	bne.n	800a092 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	330c      	adds	r3, #12
 800a0de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0310 	bic.w	r3, r3, #16
 800a0ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	330c      	adds	r3, #12
 800a0f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a0fc:	61fa      	str	r2, [r7, #28]
 800a0fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	69b9      	ldr	r1, [r7, #24]
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	617b      	str	r3, [r7, #20]
   return(result);
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e3      	bne.n	800a0d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f83e 	bl	800a198 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a11c:	e023      	b.n	800a166 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <HAL_UART_IRQHandler+0x4ea>
 800a12a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f8ef 	bl	800a31a <UART_Transmit_IT>
    return;
 800a13c:	e014      	b.n	800a168 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00e      	beq.n	800a168 <HAL_UART_IRQHandler+0x514>
 800a14a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d008      	beq.n	800a168 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f92f 	bl	800a3ba <UART_EndTransmit_IT>
    return;
 800a15c:	e004      	b.n	800a168 <HAL_UART_IRQHandler+0x514>
    return;
 800a15e:	bf00      	nop
 800a160:	e002      	b.n	800a168 <HAL_UART_IRQHandler+0x514>
      return;
 800a162:	bf00      	nop
 800a164:	e000      	b.n	800a168 <HAL_UART_IRQHandler+0x514>
      return;
 800a166:	bf00      	nop
  }
}
 800a168:	37e8      	adds	r7, #232	; 0xe8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop

0800a170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	88fa      	ldrh	r2, [r7, #6]
 800a1c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	88fa      	ldrh	r2, [r7, #6]
 800a1ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2222      	movs	r2, #34	; 0x22
 800a1da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d007      	beq.n	800a1fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	695a      	ldr	r2, [r3, #20]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f042 0201 	orr.w	r2, r2, #1
 800a20c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f042 0220 	orr.w	r2, r2, #32
 800a21c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b095      	sub	sp, #84	; 0x54
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	330c      	adds	r3, #12
 800a23a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a24a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	330c      	adds	r3, #12
 800a252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a254:	643a      	str	r2, [r7, #64]	; 0x40
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a25a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a25c:	e841 2300 	strex	r3, r2, [r1]
 800a260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1e5      	bne.n	800a234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3314      	adds	r3, #20
 800a26e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	e853 3f00 	ldrex	r3, [r3]
 800a276:	61fb      	str	r3, [r7, #28]
   return(result);
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	f023 0301 	bic.w	r3, r3, #1
 800a27e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	3314      	adds	r3, #20
 800a286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a28e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a290:	e841 2300 	strex	r3, r2, [r1]
 800a294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1e5      	bne.n	800a268 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d119      	bne.n	800a2d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f023 0310 	bic.w	r3, r3, #16
 800a2ba:	647b      	str	r3, [r7, #68]	; 0x44
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	330c      	adds	r3, #12
 800a2c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2c4:	61ba      	str	r2, [r7, #24]
 800a2c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6979      	ldr	r1, [r7, #20]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e5      	bne.n	800a2a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a2e6:	bf00      	nop
 800a2e8:	3754      	adds	r7, #84	; 0x54
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff ff39 	bl	800a184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a312:	bf00      	nop
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b21      	cmp	r3, #33	; 0x21
 800a32c:	d13e      	bne.n	800a3ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a336:	d114      	bne.n	800a362 <UART_Transmit_IT+0x48>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d110      	bne.n	800a362 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	1c9a      	adds	r2, r3, #2
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	621a      	str	r2, [r3, #32]
 800a360:	e008      	b.n	800a374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	1c59      	adds	r1, r3, #1
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	6211      	str	r1, [r2, #32]
 800a36c:	781a      	ldrb	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a378:	b29b      	uxth	r3, r3
 800a37a:	3b01      	subs	r3, #1
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	4619      	mov	r1, r3
 800a382:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10f      	bne.n	800a3a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e000      	b.n	800a3ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3ac:	2302      	movs	r3, #2
  }
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2220      	movs	r2, #32
 800a3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7ff fec8 	bl	800a170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b08c      	sub	sp, #48	; 0x30
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b22      	cmp	r3, #34	; 0x22
 800a3fc:	f040 80ab 	bne.w	800a556 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a408:	d117      	bne.n	800a43a <UART_Receive_IT+0x50>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d113      	bne.n	800a43a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	b29b      	uxth	r3, r3
 800a424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a428:	b29a      	uxth	r2, r3
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a432:	1c9a      	adds	r2, r3, #2
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	629a      	str	r2, [r3, #40]	; 0x28
 800a438:	e026      	b.n	800a488 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a440:	2300      	movs	r3, #0
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44c:	d007      	beq.n	800a45e <UART_Receive_IT+0x74>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <UART_Receive_IT+0x82>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d106      	bne.n	800a46c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	b2da      	uxtb	r2, r3
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	e008      	b.n	800a47e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29b      	uxth	r3, r3
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	4619      	mov	r1, r3
 800a496:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d15a      	bne.n	800a552 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68da      	ldr	r2, [r3, #12]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f022 0220 	bic.w	r2, r2, #32
 800a4aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68da      	ldr	r2, [r3, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	695a      	ldr	r2, [r3, #20]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f022 0201 	bic.w	r2, r2, #1
 800a4ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d135      	bne.n	800a548 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	330c      	adds	r3, #12
 800a4e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	e853 3f00 	ldrex	r3, [r3]
 800a4f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f023 0310 	bic.w	r3, r3, #16
 800a4f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	330c      	adds	r3, #12
 800a500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a502:	623a      	str	r2, [r7, #32]
 800a504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a506:	69f9      	ldr	r1, [r7, #28]
 800a508:	6a3a      	ldr	r2, [r7, #32]
 800a50a:	e841 2300 	strex	r3, r2, [r1]
 800a50e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e5      	bne.n	800a4e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0310 	and.w	r3, r3, #16
 800a520:	2b10      	cmp	r3, #16
 800a522:	d10a      	bne.n	800a53a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a524:	2300      	movs	r3, #0
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff fe29 	bl	800a198 <HAL_UARTEx_RxEventCallback>
 800a546:	e002      	b.n	800a54e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7f8 fe31 	bl	80031b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a54e:	2300      	movs	r3, #0
 800a550:	e002      	b.n	800a558 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	e000      	b.n	800a558 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a556:	2302      	movs	r3, #2
  }
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3730      	adds	r7, #48	; 0x30
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a564:	b0c0      	sub	sp, #256	; 0x100
 800a566:	af00      	add	r7, sp, #0
 800a568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a57c:	68d9      	ldr	r1, [r3, #12]
 800a57e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	ea40 0301 	orr.w	r3, r0, r1
 800a588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a58a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a58e:	689a      	ldr	r2, [r3, #8]
 800a590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	431a      	orrs	r2, r3
 800a598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a4:	69db      	ldr	r3, [r3, #28]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5b8:	f021 010c 	bic.w	r1, r1, #12
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5c6:	430b      	orrs	r3, r1
 800a5c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a5d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5da:	6999      	ldr	r1, [r3, #24]
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	ea40 0301 	orr.w	r3, r0, r1
 800a5e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	4b8f      	ldr	r3, [pc, #572]	; (800a82c <UART_SetConfig+0x2cc>)
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d005      	beq.n	800a600 <UART_SetConfig+0xa0>
 800a5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4b8d      	ldr	r3, [pc, #564]	; (800a830 <UART_SetConfig+0x2d0>)
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d104      	bne.n	800a60a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a600:	f7fe f992 	bl	8008928 <HAL_RCC_GetPCLK2Freq>
 800a604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a608:	e003      	b.n	800a612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a60a:	f7fe f979 	bl	8008900 <HAL_RCC_GetPCLK1Freq>
 800a60e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a61c:	f040 810c 	bne.w	800a838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a624:	2200      	movs	r2, #0
 800a626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a62a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a62e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a632:	4622      	mov	r2, r4
 800a634:	462b      	mov	r3, r5
 800a636:	1891      	adds	r1, r2, r2
 800a638:	65b9      	str	r1, [r7, #88]	; 0x58
 800a63a:	415b      	adcs	r3, r3
 800a63c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a63e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a642:	4621      	mov	r1, r4
 800a644:	eb12 0801 	adds.w	r8, r2, r1
 800a648:	4629      	mov	r1, r5
 800a64a:	eb43 0901 	adc.w	r9, r3, r1
 800a64e:	f04f 0200 	mov.w	r2, #0
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a65a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a65e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a662:	4690      	mov	r8, r2
 800a664:	4699      	mov	r9, r3
 800a666:	4623      	mov	r3, r4
 800a668:	eb18 0303 	adds.w	r3, r8, r3
 800a66c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a670:	462b      	mov	r3, r5
 800a672:	eb49 0303 	adc.w	r3, r9, r3
 800a676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a68a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a68e:	460b      	mov	r3, r1
 800a690:	18db      	adds	r3, r3, r3
 800a692:	653b      	str	r3, [r7, #80]	; 0x50
 800a694:	4613      	mov	r3, r2
 800a696:	eb42 0303 	adc.w	r3, r2, r3
 800a69a:	657b      	str	r3, [r7, #84]	; 0x54
 800a69c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a6a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a6a4:	f7f6 fb48 	bl	8000d38 <__aeabi_uldivmod>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4b61      	ldr	r3, [pc, #388]	; (800a834 <UART_SetConfig+0x2d4>)
 800a6ae:	fba3 2302 	umull	r2, r3, r3, r2
 800a6b2:	095b      	lsrs	r3, r3, #5
 800a6b4:	011c      	lsls	r4, r3, #4
 800a6b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a6c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	1891      	adds	r1, r2, r2
 800a6ce:	64b9      	str	r1, [r7, #72]	; 0x48
 800a6d0:	415b      	adcs	r3, r3
 800a6d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a6d8:	4641      	mov	r1, r8
 800a6da:	eb12 0a01 	adds.w	sl, r2, r1
 800a6de:	4649      	mov	r1, r9
 800a6e0:	eb43 0b01 	adc.w	fp, r3, r1
 800a6e4:	f04f 0200 	mov.w	r2, #0
 800a6e8:	f04f 0300 	mov.w	r3, #0
 800a6ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a6f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a6f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6f8:	4692      	mov	sl, r2
 800a6fa:	469b      	mov	fp, r3
 800a6fc:	4643      	mov	r3, r8
 800a6fe:	eb1a 0303 	adds.w	r3, sl, r3
 800a702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a706:	464b      	mov	r3, r9
 800a708:	eb4b 0303 	adc.w	r3, fp, r3
 800a70c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a71c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a724:	460b      	mov	r3, r1
 800a726:	18db      	adds	r3, r3, r3
 800a728:	643b      	str	r3, [r7, #64]	; 0x40
 800a72a:	4613      	mov	r3, r2
 800a72c:	eb42 0303 	adc.w	r3, r2, r3
 800a730:	647b      	str	r3, [r7, #68]	; 0x44
 800a732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a73a:	f7f6 fafd 	bl	8000d38 <__aeabi_uldivmod>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4611      	mov	r1, r2
 800a744:	4b3b      	ldr	r3, [pc, #236]	; (800a834 <UART_SetConfig+0x2d4>)
 800a746:	fba3 2301 	umull	r2, r3, r3, r1
 800a74a:	095b      	lsrs	r3, r3, #5
 800a74c:	2264      	movs	r2, #100	; 0x64
 800a74e:	fb02 f303 	mul.w	r3, r2, r3
 800a752:	1acb      	subs	r3, r1, r3
 800a754:	00db      	lsls	r3, r3, #3
 800a756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a75a:	4b36      	ldr	r3, [pc, #216]	; (800a834 <UART_SetConfig+0x2d4>)
 800a75c:	fba3 2302 	umull	r2, r3, r3, r2
 800a760:	095b      	lsrs	r3, r3, #5
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a768:	441c      	add	r4, r3
 800a76a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a77c:	4642      	mov	r2, r8
 800a77e:	464b      	mov	r3, r9
 800a780:	1891      	adds	r1, r2, r2
 800a782:	63b9      	str	r1, [r7, #56]	; 0x38
 800a784:	415b      	adcs	r3, r3
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a78c:	4641      	mov	r1, r8
 800a78e:	1851      	adds	r1, r2, r1
 800a790:	6339      	str	r1, [r7, #48]	; 0x30
 800a792:	4649      	mov	r1, r9
 800a794:	414b      	adcs	r3, r1
 800a796:	637b      	str	r3, [r7, #52]	; 0x34
 800a798:	f04f 0200 	mov.w	r2, #0
 800a79c:	f04f 0300 	mov.w	r3, #0
 800a7a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	00cb      	lsls	r3, r1, #3
 800a7a8:	4651      	mov	r1, sl
 800a7aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7ae:	4651      	mov	r1, sl
 800a7b0:	00ca      	lsls	r2, r1, #3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	189b      	adds	r3, r3, r2
 800a7bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	460a      	mov	r2, r1
 800a7c4:	eb42 0303 	adc.w	r3, r2, r3
 800a7c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a7d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a7dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	18db      	adds	r3, r3, r3
 800a7e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	eb42 0303 	adc.w	r3, r2, r3
 800a7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a7f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a7f6:	f7f6 fa9f 	bl	8000d38 <__aeabi_uldivmod>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <UART_SetConfig+0x2d4>)
 800a800:	fba3 1302 	umull	r1, r3, r3, r2
 800a804:	095b      	lsrs	r3, r3, #5
 800a806:	2164      	movs	r1, #100	; 0x64
 800a808:	fb01 f303 	mul.w	r3, r1, r3
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	3332      	adds	r3, #50	; 0x32
 800a812:	4a08      	ldr	r2, [pc, #32]	; (800a834 <UART_SetConfig+0x2d4>)
 800a814:	fba2 2303 	umull	r2, r3, r2, r3
 800a818:	095b      	lsrs	r3, r3, #5
 800a81a:	f003 0207 	and.w	r2, r3, #7
 800a81e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4422      	add	r2, r4
 800a826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a828:	e105      	b.n	800aa36 <UART_SetConfig+0x4d6>
 800a82a:	bf00      	nop
 800a82c:	40011000 	.word	0x40011000
 800a830:	40011400 	.word	0x40011400
 800a834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a83c:	2200      	movs	r2, #0
 800a83e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a84a:	4642      	mov	r2, r8
 800a84c:	464b      	mov	r3, r9
 800a84e:	1891      	adds	r1, r2, r2
 800a850:	6239      	str	r1, [r7, #32]
 800a852:	415b      	adcs	r3, r3
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
 800a856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a85a:	4641      	mov	r1, r8
 800a85c:	1854      	adds	r4, r2, r1
 800a85e:	4649      	mov	r1, r9
 800a860:	eb43 0501 	adc.w	r5, r3, r1
 800a864:	f04f 0200 	mov.w	r2, #0
 800a868:	f04f 0300 	mov.w	r3, #0
 800a86c:	00eb      	lsls	r3, r5, #3
 800a86e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a872:	00e2      	lsls	r2, r4, #3
 800a874:	4614      	mov	r4, r2
 800a876:	461d      	mov	r5, r3
 800a878:	4643      	mov	r3, r8
 800a87a:	18e3      	adds	r3, r4, r3
 800a87c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a880:	464b      	mov	r3, r9
 800a882:	eb45 0303 	adc.w	r3, r5, r3
 800a886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a89a:	f04f 0200 	mov.w	r2, #0
 800a89e:	f04f 0300 	mov.w	r3, #0
 800a8a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	008b      	lsls	r3, r1, #2
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	008a      	lsls	r2, r1, #2
 800a8b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8b8:	f7f6 fa3e 	bl	8000d38 <__aeabi_uldivmod>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4b60      	ldr	r3, [pc, #384]	; (800aa44 <UART_SetConfig+0x4e4>)
 800a8c2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8c6:	095b      	lsrs	r3, r3, #5
 800a8c8:	011c      	lsls	r4, r3, #4
 800a8ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a8d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a8d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a8dc:	4642      	mov	r2, r8
 800a8de:	464b      	mov	r3, r9
 800a8e0:	1891      	adds	r1, r2, r2
 800a8e2:	61b9      	str	r1, [r7, #24]
 800a8e4:	415b      	adcs	r3, r3
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8ec:	4641      	mov	r1, r8
 800a8ee:	1851      	adds	r1, r2, r1
 800a8f0:	6139      	str	r1, [r7, #16]
 800a8f2:	4649      	mov	r1, r9
 800a8f4:	414b      	adcs	r3, r1
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	f04f 0200 	mov.w	r2, #0
 800a8fc:	f04f 0300 	mov.w	r3, #0
 800a900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a904:	4659      	mov	r1, fp
 800a906:	00cb      	lsls	r3, r1, #3
 800a908:	4651      	mov	r1, sl
 800a90a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a90e:	4651      	mov	r1, sl
 800a910:	00ca      	lsls	r2, r1, #3
 800a912:	4610      	mov	r0, r2
 800a914:	4619      	mov	r1, r3
 800a916:	4603      	mov	r3, r0
 800a918:	4642      	mov	r2, r8
 800a91a:	189b      	adds	r3, r3, r2
 800a91c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a920:	464b      	mov	r3, r9
 800a922:	460a      	mov	r2, r1
 800a924:	eb42 0303 	adc.w	r3, r2, r3
 800a928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	67bb      	str	r3, [r7, #120]	; 0x78
 800a936:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a938:	f04f 0200 	mov.w	r2, #0
 800a93c:	f04f 0300 	mov.w	r3, #0
 800a940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a944:	4649      	mov	r1, r9
 800a946:	008b      	lsls	r3, r1, #2
 800a948:	4641      	mov	r1, r8
 800a94a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a94e:	4641      	mov	r1, r8
 800a950:	008a      	lsls	r2, r1, #2
 800a952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a956:	f7f6 f9ef 	bl	8000d38 <__aeabi_uldivmod>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4b39      	ldr	r3, [pc, #228]	; (800aa44 <UART_SetConfig+0x4e4>)
 800a960:	fba3 1302 	umull	r1, r3, r3, r2
 800a964:	095b      	lsrs	r3, r3, #5
 800a966:	2164      	movs	r1, #100	; 0x64
 800a968:	fb01 f303 	mul.w	r3, r1, r3
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	011b      	lsls	r3, r3, #4
 800a970:	3332      	adds	r3, #50	; 0x32
 800a972:	4a34      	ldr	r2, [pc, #208]	; (800aa44 <UART_SetConfig+0x4e4>)
 800a974:	fba2 2303 	umull	r2, r3, r2, r3
 800a978:	095b      	lsrs	r3, r3, #5
 800a97a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a97e:	441c      	add	r4, r3
 800a980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a984:	2200      	movs	r2, #0
 800a986:	673b      	str	r3, [r7, #112]	; 0x70
 800a988:	677a      	str	r2, [r7, #116]	; 0x74
 800a98a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a98e:	4642      	mov	r2, r8
 800a990:	464b      	mov	r3, r9
 800a992:	1891      	adds	r1, r2, r2
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	415b      	adcs	r3, r3
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a99e:	4641      	mov	r1, r8
 800a9a0:	1851      	adds	r1, r2, r1
 800a9a2:	6039      	str	r1, [r7, #0]
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	414b      	adcs	r3, r1
 800a9a8:	607b      	str	r3, [r7, #4]
 800a9aa:	f04f 0200 	mov.w	r2, #0
 800a9ae:	f04f 0300 	mov.w	r3, #0
 800a9b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9b6:	4659      	mov	r1, fp
 800a9b8:	00cb      	lsls	r3, r1, #3
 800a9ba:	4651      	mov	r1, sl
 800a9bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9c0:	4651      	mov	r1, sl
 800a9c2:	00ca      	lsls	r2, r1, #3
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	4642      	mov	r2, r8
 800a9cc:	189b      	adds	r3, r3, r2
 800a9ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	eb42 0303 	adc.w	r3, r2, r3
 800a9d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	663b      	str	r3, [r7, #96]	; 0x60
 800a9e4:	667a      	str	r2, [r7, #100]	; 0x64
 800a9e6:	f04f 0200 	mov.w	r2, #0
 800a9ea:	f04f 0300 	mov.w	r3, #0
 800a9ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	008b      	lsls	r3, r1, #2
 800a9f6:	4641      	mov	r1, r8
 800a9f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9fc:	4641      	mov	r1, r8
 800a9fe:	008a      	lsls	r2, r1, #2
 800aa00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aa04:	f7f6 f998 	bl	8000d38 <__aeabi_uldivmod>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <UART_SetConfig+0x4e4>)
 800aa0e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa12:	095b      	lsrs	r3, r3, #5
 800aa14:	2164      	movs	r1, #100	; 0x64
 800aa16:	fb01 f303 	mul.w	r3, r1, r3
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	011b      	lsls	r3, r3, #4
 800aa1e:	3332      	adds	r3, #50	; 0x32
 800aa20:	4a08      	ldr	r2, [pc, #32]	; (800aa44 <UART_SetConfig+0x4e4>)
 800aa22:	fba2 2303 	umull	r2, r3, r2, r3
 800aa26:	095b      	lsrs	r3, r3, #5
 800aa28:	f003 020f 	and.w	r2, r3, #15
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4422      	add	r2, r4
 800aa34:	609a      	str	r2, [r3, #8]
}
 800aa36:	bf00      	nop
 800aa38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa42:	bf00      	nop
 800aa44:	51eb851f 	.word	0x51eb851f

0800aa48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa4c:	4904      	ldr	r1, [pc, #16]	; (800aa60 <MX_FATFS_Init+0x18>)
 800aa4e:	4805      	ldr	r0, [pc, #20]	; (800aa64 <MX_FATFS_Init+0x1c>)
 800aa50:	f003 f9a2 	bl	800dd98 <FATFS_LinkDriver>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461a      	mov	r2, r3
 800aa58:	4b03      	ldr	r3, [pc, #12]	; (800aa68 <MX_FATFS_Init+0x20>)
 800aa5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa5c:	bf00      	nop
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	20002eb8 	.word	0x20002eb8
 800aa64:	20000020 	.word	0x20000020
 800aa68:	20002eb4 	.word	0x20002eb4

0800aa6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7f7 facb 	bl	8002024 <SD_disk_initialize>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b082      	sub	sp, #8
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7f7 fba8 	bl	80021fc <SD_disk_status>
 800aaac:	4603      	mov	r3, r0
 800aaae:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	607a      	str	r2, [r7, #4]
 800aac2:	603b      	str	r3, [r7, #0]
 800aac4:	4603      	mov	r3, r0
 800aac6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800aac8:	7bf8      	ldrb	r0, [r7, #15]
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	f7f7 fbaa 	bl	8002228 <SD_disk_read>
 800aad4:	4603      	mov	r3, r0
 800aad6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800aaf0:	7bf8      	ldrb	r0, [r7, #15]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	f7f7 fc00 	bl	80022fc <SD_disk_write>
 800aafc:	4603      	mov	r3, r0
 800aafe:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	603a      	str	r2, [r7, #0]
 800ab12:	71fb      	strb	r3, [r7, #7]
 800ab14:	460b      	mov	r3, r1
 800ab16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	79b9      	ldrb	r1, [r7, #6]
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f7 fc70 	bl	8002404 <SD_disk_ioctl>
 800ab24:	4603      	mov	r3, r0
 800ab26:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	4a08      	ldr	r2, [pc, #32]	; (800ab60 <disk_status+0x30>)
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4413      	add	r3, r2
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	79fa      	ldrb	r2, [r7, #7]
 800ab48:	4905      	ldr	r1, [pc, #20]	; (800ab60 <disk_status+0x30>)
 800ab4a:	440a      	add	r2, r1
 800ab4c:	7a12      	ldrb	r2, [r2, #8]
 800ab4e:	4610      	mov	r0, r2
 800ab50:	4798      	blx	r3
 800ab52:	4603      	mov	r3, r0
 800ab54:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	200030e4 	.word	0x200030e4

0800ab64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab72:	79fb      	ldrb	r3, [r7, #7]
 800ab74:	4a0d      	ldr	r2, [pc, #52]	; (800abac <disk_initialize+0x48>)
 800ab76:	5cd3      	ldrb	r3, [r2, r3]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d111      	bne.n	800aba0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab7c:	79fb      	ldrb	r3, [r7, #7]
 800ab7e:	4a0b      	ldr	r2, [pc, #44]	; (800abac <disk_initialize+0x48>)
 800ab80:	2101      	movs	r1, #1
 800ab82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	4a09      	ldr	r2, [pc, #36]	; (800abac <disk_initialize+0x48>)
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	79fa      	ldrb	r2, [r7, #7]
 800ab92:	4906      	ldr	r1, [pc, #24]	; (800abac <disk_initialize+0x48>)
 800ab94:	440a      	add	r2, r1
 800ab96:	7a12      	ldrb	r2, [r2, #8]
 800ab98:	4610      	mov	r0, r2
 800ab9a:	4798      	blx	r3
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	200030e4 	.word	0x200030e4

0800abb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800abb0:	b590      	push	{r4, r7, lr}
 800abb2:	b087      	sub	sp, #28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60b9      	str	r1, [r7, #8]
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	4a0a      	ldr	r2, [pc, #40]	; (800abec <disk_read+0x3c>)
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	689c      	ldr	r4, [r3, #8]
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4a07      	ldr	r2, [pc, #28]	; (800abec <disk_read+0x3c>)
 800abd0:	4413      	add	r3, r2
 800abd2:	7a18      	ldrb	r0, [r3, #8]
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	68b9      	ldr	r1, [r7, #8]
 800abda:	47a0      	blx	r4
 800abdc:	4603      	mov	r3, r0
 800abde:	75fb      	strb	r3, [r7, #23]
  return res;
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	371c      	adds	r7, #28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd90      	pop	{r4, r7, pc}
 800abea:	bf00      	nop
 800abec:	200030e4 	.word	0x200030e4

0800abf0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	607a      	str	r2, [r7, #4]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	4603      	mov	r3, r0
 800abfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
 800ac02:	4a0a      	ldr	r2, [pc, #40]	; (800ac2c <disk_write+0x3c>)
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	68dc      	ldr	r4, [r3, #12]
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	4a07      	ldr	r2, [pc, #28]	; (800ac2c <disk_write+0x3c>)
 800ac10:	4413      	add	r3, r2
 800ac12:	7a18      	ldrb	r0, [r3, #8]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	68b9      	ldr	r1, [r7, #8]
 800ac1a:	47a0      	blx	r4
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	371c      	adds	r7, #28
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd90      	pop	{r4, r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	200030e4 	.word	0x200030e4

0800ac30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	603a      	str	r2, [r7, #0]
 800ac3a:	71fb      	strb	r3, [r7, #7]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	4a09      	ldr	r2, [pc, #36]	; (800ac68 <disk_ioctl+0x38>)
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	79fa      	ldrb	r2, [r7, #7]
 800ac4e:	4906      	ldr	r1, [pc, #24]	; (800ac68 <disk_ioctl+0x38>)
 800ac50:	440a      	add	r2, r1
 800ac52:	7a10      	ldrb	r0, [r2, #8]
 800ac54:	79b9      	ldrb	r1, [r7, #6]
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	4798      	blx	r3
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	200030e4 	.word	0x200030e4

0800ac6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3301      	adds	r3, #1
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac7c:	89fb      	ldrh	r3, [r7, #14]
 800ac7e:	021b      	lsls	r3, r3, #8
 800ac80:	b21a      	sxth	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	b21b      	sxth	r3, r3
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	b21b      	sxth	r3, r3
 800ac8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac8e:	89fb      	ldrh	r3, [r7, #14]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3303      	adds	r3, #3
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	3202      	adds	r2, #2
 800acb4:	7812      	ldrb	r2, [r2, #0]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	3201      	adds	r2, #1
 800acc2:	7812      	ldrb	r2, [r2, #0]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	021b      	lsls	r3, r3, #8
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	7812      	ldrb	r2, [r2, #0]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
	return rv;
 800acd4:	68fb      	ldr	r3, [r7, #12]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	460b      	mov	r3, r1
 800acec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	887a      	ldrh	r2, [r7, #2]
 800acf6:	b2d2      	uxtb	r2, r2
 800acf8:	701a      	strb	r2, [r3, #0]
 800acfa:	887b      	ldrh	r3, [r7, #2]
 800acfc:	0a1b      	lsrs	r3, r3, #8
 800acfe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	607a      	str	r2, [r7, #4]
 800ad06:	887a      	ldrh	r2, [r7, #2]
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	b2d2      	uxtb	r2, r2
 800ad2c:	701a      	strb	r2, [r3, #0]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	0a1b      	lsrs	r3, r3, #8
 800ad32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	607a      	str	r2, [r7, #4]
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	b2d2      	uxtb	r2, r2
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	0a1b      	lsrs	r3, r3, #8
 800ad44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	1c5a      	adds	r2, r3, #1
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	0a1b      	lsrs	r3, r3, #8
 800ad56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	607a      	str	r2, [r7, #4]
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	b2d2      	uxtb	r2, r2
 800ad62:	701a      	strb	r2, [r3, #0]
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00d      	beq.n	800ada6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	1c53      	adds	r3, r2, #1
 800ad8e:	613b      	str	r3, [r7, #16]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	1c59      	adds	r1, r3, #1
 800ad94:	6179      	str	r1, [r7, #20]
 800ad96:	7812      	ldrb	r2, [r2, #0]
 800ad98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	607b      	str	r3, [r7, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1f1      	bne.n	800ad8a <mem_cpy+0x1a>
	}
}
 800ada6:	bf00      	nop
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800adb2:	b480      	push	{r7}
 800adb4:	b087      	sub	sp, #28
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	60f8      	str	r0, [r7, #12]
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	1c5a      	adds	r2, r3, #1
 800adc6:	617a      	str	r2, [r7, #20]
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	b2d2      	uxtb	r2, r2
 800adcc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3b01      	subs	r3, #1
 800add2:	607b      	str	r3, [r7, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1f3      	bne.n	800adc2 <mem_set+0x10>
}
 800adda:	bf00      	nop
 800addc:	bf00      	nop
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ade8:	b480      	push	{r7}
 800adea:	b089      	sub	sp, #36	; 0x24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	61fb      	str	r3, [r7, #28]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	61fa      	str	r2, [r7, #28]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	61ba      	str	r2, [r7, #24]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	1acb      	subs	r3, r1, r3
 800ae14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	607b      	str	r3, [r7, #4]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d002      	beq.n	800ae28 <mem_cmp+0x40>
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d0eb      	beq.n	800ae00 <mem_cmp+0x18>

	return r;
 800ae28:	697b      	ldr	r3, [r7, #20]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3724      	adds	r7, #36	; 0x24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae40:	e002      	b.n	800ae48 <chk_chr+0x12>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	3301      	adds	r3, #1
 800ae46:	607b      	str	r3, [r7, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d005      	beq.n	800ae5c <chk_chr+0x26>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d1f2      	bne.n	800ae42 <chk_chr+0xc>
	return *str;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae76:	2300      	movs	r3, #0
 800ae78:	60bb      	str	r3, [r7, #8]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	e029      	b.n	800aed4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ae80:	4a27      	ldr	r2, [pc, #156]	; (800af20 <chk_lock+0xb4>)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	011b      	lsls	r3, r3, #4
 800ae86:	4413      	add	r3, r2
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d01d      	beq.n	800aeca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae8e:	4a24      	ldr	r2, [pc, #144]	; (800af20 <chk_lock+0xb4>)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	4413      	add	r3, r2
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d116      	bne.n	800aece <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aea0:	4a1f      	ldr	r2, [pc, #124]	; (800af20 <chk_lock+0xb4>)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	011b      	lsls	r3, r3, #4
 800aea6:	4413      	add	r3, r2
 800aea8:	3304      	adds	r3, #4
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d10c      	bne.n	800aece <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aeb4:	4a1a      	ldr	r2, [pc, #104]	; (800af20 <chk_lock+0xb4>)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	011b      	lsls	r3, r3, #4
 800aeba:	4413      	add	r3, r2
 800aebc:	3308      	adds	r3, #8
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d102      	bne.n	800aece <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aec8:	e007      	b.n	800aeda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aeca:	2301      	movs	r3, #1
 800aecc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3301      	adds	r3, #1
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d9d2      	bls.n	800ae80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d109      	bne.n	800aef4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d102      	bne.n	800aeec <chk_lock+0x80>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d101      	bne.n	800aef0 <chk_lock+0x84>
 800aeec:	2300      	movs	r3, #0
 800aeee:	e010      	b.n	800af12 <chk_lock+0xa6>
 800aef0:	2312      	movs	r3, #18
 800aef2:	e00e      	b.n	800af12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d108      	bne.n	800af0c <chk_lock+0xa0>
 800aefa:	4a09      	ldr	r2, [pc, #36]	; (800af20 <chk_lock+0xb4>)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	011b      	lsls	r3, r3, #4
 800af00:	4413      	add	r3, r2
 800af02:	330c      	adds	r3, #12
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af0a:	d101      	bne.n	800af10 <chk_lock+0xa4>
 800af0c:	2310      	movs	r3, #16
 800af0e:	e000      	b.n	800af12 <chk_lock+0xa6>
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	20002ec4 	.word	0x20002ec4

0800af24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af2a:	2300      	movs	r3, #0
 800af2c:	607b      	str	r3, [r7, #4]
 800af2e:	e002      	b.n	800af36 <enq_lock+0x12>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3301      	adds	r3, #1
 800af34:	607b      	str	r3, [r7, #4]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d806      	bhi.n	800af4a <enq_lock+0x26>
 800af3c:	4a09      	ldr	r2, [pc, #36]	; (800af64 <enq_lock+0x40>)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	4413      	add	r3, r2
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1f2      	bne.n	800af30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	bf14      	ite	ne
 800af50:	2301      	movne	r3, #1
 800af52:	2300      	moveq	r3, #0
 800af54:	b2db      	uxtb	r3, r3
}
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20002ec4 	.word	0x20002ec4

0800af68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af72:	2300      	movs	r3, #0
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	e01f      	b.n	800afb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800af78:	4a41      	ldr	r2, [pc, #260]	; (800b080 <inc_lock+0x118>)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	011b      	lsls	r3, r3, #4
 800af7e:	4413      	add	r3, r2
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d113      	bne.n	800afb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800af8a:	4a3d      	ldr	r2, [pc, #244]	; (800b080 <inc_lock+0x118>)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	011b      	lsls	r3, r3, #4
 800af90:	4413      	add	r3, r2
 800af92:	3304      	adds	r3, #4
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d109      	bne.n	800afb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800af9e:	4a38      	ldr	r2, [pc, #224]	; (800b080 <inc_lock+0x118>)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	011b      	lsls	r3, r3, #4
 800afa4:	4413      	add	r3, r2
 800afa6:	3308      	adds	r3, #8
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afae:	429a      	cmp	r2, r3
 800afb0:	d006      	beq.n	800afc0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3301      	adds	r3, #1
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d9dc      	bls.n	800af78 <inc_lock+0x10>
 800afbe:	e000      	b.n	800afc2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afc0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d132      	bne.n	800b02e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]
 800afcc:	e002      	b.n	800afd4 <inc_lock+0x6c>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3301      	adds	r3, #1
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d806      	bhi.n	800afe8 <inc_lock+0x80>
 800afda:	4a29      	ldr	r2, [pc, #164]	; (800b080 <inc_lock+0x118>)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	011b      	lsls	r3, r3, #4
 800afe0:	4413      	add	r3, r2
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1f2      	bne.n	800afce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d101      	bne.n	800aff2 <inc_lock+0x8a>
 800afee:	2300      	movs	r3, #0
 800aff0:	e040      	b.n	800b074 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	4922      	ldr	r1, [pc, #136]	; (800b080 <inc_lock+0x118>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	440b      	add	r3, r1
 800affe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689a      	ldr	r2, [r3, #8]
 800b004:	491e      	ldr	r1, [pc, #120]	; (800b080 <inc_lock+0x118>)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	011b      	lsls	r3, r3, #4
 800b00a:	440b      	add	r3, r1
 800b00c:	3304      	adds	r3, #4
 800b00e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	695a      	ldr	r2, [r3, #20]
 800b014:	491a      	ldr	r1, [pc, #104]	; (800b080 <inc_lock+0x118>)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	440b      	add	r3, r1
 800b01c:	3308      	adds	r3, #8
 800b01e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b020:	4a17      	ldr	r2, [pc, #92]	; (800b080 <inc_lock+0x118>)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	011b      	lsls	r3, r3, #4
 800b026:	4413      	add	r3, r2
 800b028:	330c      	adds	r3, #12
 800b02a:	2200      	movs	r2, #0
 800b02c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d009      	beq.n	800b048 <inc_lock+0xe0>
 800b034:	4a12      	ldr	r2, [pc, #72]	; (800b080 <inc_lock+0x118>)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	4413      	add	r3, r2
 800b03c:	330c      	adds	r3, #12
 800b03e:	881b      	ldrh	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <inc_lock+0xe0>
 800b044:	2300      	movs	r3, #0
 800b046:	e015      	b.n	800b074 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d108      	bne.n	800b060 <inc_lock+0xf8>
 800b04e:	4a0c      	ldr	r2, [pc, #48]	; (800b080 <inc_lock+0x118>)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	4413      	add	r3, r2
 800b056:	330c      	adds	r3, #12
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	3301      	adds	r3, #1
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	e001      	b.n	800b064 <inc_lock+0xfc>
 800b060:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b064:	4906      	ldr	r1, [pc, #24]	; (800b080 <inc_lock+0x118>)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	011b      	lsls	r3, r3, #4
 800b06a:	440b      	add	r3, r1
 800b06c:	330c      	adds	r3, #12
 800b06e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3301      	adds	r3, #1
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr
 800b080:	20002ec4 	.word	0x20002ec4

0800b084 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3b01      	subs	r3, #1
 800b090:	607b      	str	r3, [r7, #4]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d825      	bhi.n	800b0e4 <dec_lock+0x60>
		n = Files[i].ctr;
 800b098:	4a17      	ldr	r2, [pc, #92]	; (800b0f8 <dec_lock+0x74>)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	4413      	add	r3, r2
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0a6:	89fb      	ldrh	r3, [r7, #14]
 800b0a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ac:	d101      	bne.n	800b0b2 <dec_lock+0x2e>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0b2:	89fb      	ldrh	r3, [r7, #14]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <dec_lock+0x3a>
 800b0b8:	89fb      	ldrh	r3, [r7, #14]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0be:	4a0e      	ldr	r2, [pc, #56]	; (800b0f8 <dec_lock+0x74>)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	011b      	lsls	r3, r3, #4
 800b0c4:	4413      	add	r3, r2
 800b0c6:	330c      	adds	r3, #12
 800b0c8:	89fa      	ldrh	r2, [r7, #14]
 800b0ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0cc:	89fb      	ldrh	r3, [r7, #14]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d105      	bne.n	800b0de <dec_lock+0x5a>
 800b0d2:	4a09      	ldr	r2, [pc, #36]	; (800b0f8 <dec_lock+0x74>)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	4413      	add	r3, r2
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	737b      	strb	r3, [r7, #13]
 800b0e2:	e001      	b.n	800b0e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b0e8:	7b7b      	ldrb	r3, [r7, #13]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	20002ec4 	.word	0x20002ec4

0800b0fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b104:	2300      	movs	r3, #0
 800b106:	60fb      	str	r3, [r7, #12]
 800b108:	e010      	b.n	800b12c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b10a:	4a0d      	ldr	r2, [pc, #52]	; (800b140 <clear_lock+0x44>)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	011b      	lsls	r3, r3, #4
 800b110:	4413      	add	r3, r2
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	429a      	cmp	r2, r3
 800b118:	d105      	bne.n	800b126 <clear_lock+0x2a>
 800b11a:	4a09      	ldr	r2, [pc, #36]	; (800b140 <clear_lock+0x44>)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	4413      	add	r3, r2
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3301      	adds	r3, #1
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d9eb      	bls.n	800b10a <clear_lock+0xe>
	}
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	20002ec4 	.word	0x20002ec4

0800b144 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	78db      	ldrb	r3, [r3, #3]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d034      	beq.n	800b1c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	7858      	ldrb	r0, [r3, #1]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b168:	2301      	movs	r3, #1
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	f7ff fd40 	bl	800abf0 <disk_write>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <sync_window+0x38>
			res = FR_DISK_ERR;
 800b176:	2301      	movs	r3, #1
 800b178:	73fb      	strb	r3, [r7, #15]
 800b17a:	e022      	b.n	800b1c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	1ad2      	subs	r2, r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d217      	bcs.n	800b1c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	789b      	ldrb	r3, [r3, #2]
 800b196:	613b      	str	r3, [r7, #16]
 800b198:	e010      	b.n	800b1bc <sync_window+0x78>
					wsect += fs->fsize;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7858      	ldrb	r0, [r3, #1]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	f7ff fd1d 	bl	800abf0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	613b      	str	r3, [r7, #16]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d8eb      	bhi.n	800b19a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1de:	683a      	ldr	r2, [r7, #0]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d01b      	beq.n	800b21c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ffad 	bl	800b144 <sync_window>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d113      	bne.n	800b21c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	7858      	ldrb	r0, [r3, #1]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b1fe:	2301      	movs	r3, #1
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	f7ff fcd5 	bl	800abb0 <disk_read>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d004      	beq.n	800b216 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b20c:	f04f 33ff 	mov.w	r3, #4294967295
 800b210:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b212:	2301      	movs	r3, #1
 800b214:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7ff ff87 	bl	800b144 <sync_window>
 800b236:	4603      	mov	r3, r0
 800b238:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d159      	bne.n	800b2f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b03      	cmp	r3, #3
 800b246:	d149      	bne.n	800b2dc <sync_fs+0xb4>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	791b      	ldrb	r3, [r3, #4]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d145      	bne.n	800b2dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	899b      	ldrh	r3, [r3, #12]
 800b25a:	461a      	mov	r2, r3
 800b25c:	2100      	movs	r1, #0
 800b25e:	f7ff fda8 	bl	800adb2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3338      	adds	r3, #56	; 0x38
 800b266:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b26a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fd37 	bl	800ace2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3338      	adds	r3, #56	; 0x38
 800b278:	4921      	ldr	r1, [pc, #132]	; (800b300 <sync_fs+0xd8>)
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff fd4c 	bl	800ad18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3338      	adds	r3, #56	; 0x38
 800b284:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b288:	491e      	ldr	r1, [pc, #120]	; (800b304 <sync_fs+0xdc>)
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff fd44 	bl	800ad18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3338      	adds	r3, #56	; 0x38
 800b294:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	4619      	mov	r1, r3
 800b29e:	4610      	mov	r0, r2
 800b2a0:	f7ff fd3a 	bl	800ad18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3338      	adds	r3, #56	; 0x38
 800b2a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	f7ff fd30 	bl	800ad18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	7858      	ldrb	r0, [r3, #1]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f7ff fc8d 	bl	800abf0 <disk_write>
			fs->fsi_flag = 0;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	785b      	ldrb	r3, [r3, #1]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7ff fca3 	bl	800ac30 <disk_ioctl>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <sync_fs+0xcc>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	41615252 	.word	0x41615252
 800b304:	61417272 	.word	0x61417272

0800b308 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	3b02      	subs	r3, #2
 800b316:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	69db      	ldr	r3, [r3, #28]
 800b31c:	3b02      	subs	r3, #2
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	429a      	cmp	r2, r3
 800b322:	d301      	bcc.n	800b328 <clust2sect+0x20>
 800b324:	2300      	movs	r3, #0
 800b326:	e008      	b.n	800b33a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	895b      	ldrh	r3, [r3, #10]
 800b32c:	461a      	mov	r2, r3
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	fb03 f202 	mul.w	r2, r3, r2
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b338:	4413      	add	r3, r2
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d904      	bls.n	800b366 <get_fat+0x20>
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	429a      	cmp	r2, r3
 800b364:	d302      	bcc.n	800b36c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b366:	2301      	movs	r3, #1
 800b368:	617b      	str	r3, [r7, #20]
 800b36a:	e0bb      	b.n	800b4e4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295
 800b370:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b03      	cmp	r3, #3
 800b378:	f000 8083 	beq.w	800b482 <get_fat+0x13c>
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	f300 80a7 	bgt.w	800b4d0 <get_fat+0x18a>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d002      	beq.n	800b38c <get_fat+0x46>
 800b386:	2b02      	cmp	r3, #2
 800b388:	d056      	beq.n	800b438 <get_fat+0xf2>
 800b38a:	e0a1      	b.n	800b4d0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	899b      	ldrh	r3, [r3, #12]
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3aa:	4413      	add	r3, r2
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6938      	ldr	r0, [r7, #16]
 800b3b0:	f7ff ff0c 	bl	800b1cc <move_window>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 808d 	bne.w	800b4d6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	60fa      	str	r2, [r7, #12]
 800b3c2:	693a      	ldr	r2, [r7, #16]
 800b3c4:	8992      	ldrh	r2, [r2, #12]
 800b3c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3ca:	fb01 f202 	mul.w	r2, r1, r2
 800b3ce:	1a9b      	subs	r3, r3, r2
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b3d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	899b      	ldrh	r3, [r3, #12]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3ea:	4413      	add	r3, r2
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6938      	ldr	r0, [r7, #16]
 800b3f0:	f7ff feec 	bl	800b1cc <move_window>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d16f      	bne.n	800b4da <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	899b      	ldrh	r3, [r3, #12]
 800b3fe:	461a      	mov	r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	fbb3 f1f2 	udiv	r1, r3, r2
 800b406:	fb01 f202 	mul.w	r2, r1, r2
 800b40a:	1a9b      	subs	r3, r3, r2
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	4413      	add	r3, r2
 800b410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b414:	021b      	lsls	r3, r3, #8
 800b416:	461a      	mov	r2, r3
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	f003 0301 	and.w	r3, r3, #1
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <get_fat+0xe8>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	091b      	lsrs	r3, r3, #4
 800b42c:	e002      	b.n	800b434 <get_fat+0xee>
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b434:	617b      	str	r3, [r7, #20]
			break;
 800b436:	e055      	b.n	800b4e4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	899b      	ldrh	r3, [r3, #12]
 800b440:	085b      	lsrs	r3, r3, #1
 800b442:	b29b      	uxth	r3, r3
 800b444:	4619      	mov	r1, r3
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	fbb3 f3f1 	udiv	r3, r3, r1
 800b44c:	4413      	add	r3, r2
 800b44e:	4619      	mov	r1, r3
 800b450:	6938      	ldr	r0, [r7, #16]
 800b452:	f7ff febb 	bl	800b1cc <move_window>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d140      	bne.n	800b4de <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	8992      	ldrh	r2, [r2, #12]
 800b46a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b46e:	fb00 f202 	mul.w	r2, r0, r2
 800b472:	1a9b      	subs	r3, r3, r2
 800b474:	440b      	add	r3, r1
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff fbf8 	bl	800ac6c <ld_word>
 800b47c:	4603      	mov	r3, r0
 800b47e:	617b      	str	r3, [r7, #20]
			break;
 800b480:	e030      	b.n	800b4e4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	899b      	ldrh	r3, [r3, #12]
 800b48a:	089b      	lsrs	r3, r3, #2
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	4619      	mov	r1, r3
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	fbb3 f3f1 	udiv	r3, r3, r1
 800b496:	4413      	add	r3, r2
 800b498:	4619      	mov	r1, r3
 800b49a:	6938      	ldr	r0, [r7, #16]
 800b49c:	f7ff fe96 	bl	800b1cc <move_window>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d11d      	bne.n	800b4e2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	8992      	ldrh	r2, [r2, #12]
 800b4b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4b8:	fb00 f202 	mul.w	r2, r0, r2
 800b4bc:	1a9b      	subs	r3, r3, r2
 800b4be:	440b      	add	r3, r1
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff fbeb 	bl	800ac9c <ld_dword>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b4cc:	617b      	str	r3, [r7, #20]
			break;
 800b4ce:	e009      	b.n	800b4e4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	617b      	str	r3, [r7, #20]
 800b4d4:	e006      	b.n	800b4e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4d6:	bf00      	nop
 800b4d8:	e004      	b.n	800b4e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4da:	bf00      	nop
 800b4dc:	e002      	b.n	800b4e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4de:	bf00      	nop
 800b4e0:	e000      	b.n	800b4e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4e2:	bf00      	nop
		}
	}

	return val;
 800b4e4:	697b      	ldr	r3, [r7, #20]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3718      	adds	r7, #24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b4ee:	b590      	push	{r4, r7, lr}
 800b4f0:	b089      	sub	sp, #36	; 0x24
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	60f8      	str	r0, [r7, #12]
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2b01      	cmp	r3, #1
 800b502:	f240 8102 	bls.w	800b70a <put_fat+0x21c>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	f080 80fc 	bcs.w	800b70a <put_fat+0x21c>
		switch (fs->fs_type) {
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	2b03      	cmp	r3, #3
 800b518:	f000 80b6 	beq.w	800b688 <put_fat+0x19a>
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	f300 80fd 	bgt.w	800b71c <put_fat+0x22e>
 800b522:	2b01      	cmp	r3, #1
 800b524:	d003      	beq.n	800b52e <put_fat+0x40>
 800b526:	2b02      	cmp	r3, #2
 800b528:	f000 8083 	beq.w	800b632 <put_fat+0x144>
 800b52c:	e0f6      	b.n	800b71c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	61bb      	str	r3, [r7, #24]
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	085b      	lsrs	r3, r3, #1
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	4413      	add	r3, r2
 800b53a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	899b      	ldrh	r3, [r3, #12]
 800b544:	4619      	mov	r1, r3
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	fbb3 f3f1 	udiv	r3, r3, r1
 800b54c:	4413      	add	r3, r2
 800b54e:	4619      	mov	r1, r3
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f7ff fe3b 	bl	800b1cc <move_window>
 800b556:	4603      	mov	r3, r0
 800b558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b55a:	7ffb      	ldrb	r3, [r7, #31]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f040 80d6 	bne.w	800b70e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	61ba      	str	r2, [r7, #24]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	8992      	ldrh	r2, [r2, #12]
 800b572:	fbb3 f0f2 	udiv	r0, r3, r2
 800b576:	fb00 f202 	mul.w	r2, r0, r2
 800b57a:	1a9b      	subs	r3, r3, r2
 800b57c:	440b      	add	r3, r1
 800b57e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00d      	beq.n	800b5a6 <put_fat+0xb8>
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	b25b      	sxtb	r3, r3
 800b590:	f003 030f 	and.w	r3, r3, #15
 800b594:	b25a      	sxtb	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	011b      	lsls	r3, r3, #4
 800b59c:	b25b      	sxtb	r3, r3
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	e001      	b.n	800b5aa <put_fat+0xbc>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	899b      	ldrh	r3, [r3, #12]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5c4:	4413      	add	r3, r2
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7ff fdff 	bl	800b1cc <move_window>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5d2:	7ffb      	ldrb	r3, [r7, #31]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f040 809c 	bne.w	800b712 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	899b      	ldrh	r3, [r3, #12]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	69bb      	ldr	r3, [r7, #24]
 800b5e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5ec:	fb00 f202 	mul.w	r2, r0, r2
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	440b      	add	r3, r1
 800b5f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	f003 0301 	and.w	r3, r3, #1
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <put_fat+0x11a>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	091b      	lsrs	r3, r3, #4
 800b604:	b2db      	uxtb	r3, r3
 800b606:	e00e      	b.n	800b626 <put_fat+0x138>
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	b25b      	sxtb	r3, r3
 800b60e:	f023 030f 	bic.w	r3, r3, #15
 800b612:	b25a      	sxtb	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	0a1b      	lsrs	r3, r3, #8
 800b618:	b25b      	sxtb	r3, r3
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	b25b      	sxtb	r3, r3
 800b620:	4313      	orrs	r3, r2
 800b622:	b25b      	sxtb	r3, r3
 800b624:	b2db      	uxtb	r3, r3
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2201      	movs	r2, #1
 800b62e:	70da      	strb	r2, [r3, #3]
			break;
 800b630:	e074      	b.n	800b71c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	899b      	ldrh	r3, [r3, #12]
 800b63a:	085b      	lsrs	r3, r3, #1
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	4619      	mov	r1, r3
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	fbb3 f3f1 	udiv	r3, r3, r1
 800b646:	4413      	add	r3, r2
 800b648:	4619      	mov	r1, r3
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7ff fdbe 	bl	800b1cc <move_window>
 800b650:	4603      	mov	r3, r0
 800b652:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b654:	7ffb      	ldrb	r3, [r7, #31]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d15d      	bne.n	800b716 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	005b      	lsls	r3, r3, #1
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	8992      	ldrh	r2, [r2, #12]
 800b668:	fbb3 f0f2 	udiv	r0, r3, r2
 800b66c:	fb00 f202 	mul.w	r2, r0, r2
 800b670:	1a9b      	subs	r3, r3, r2
 800b672:	440b      	add	r3, r1
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	b292      	uxth	r2, r2
 800b678:	4611      	mov	r1, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff fb31 	bl	800ace2 <st_word>
			fs->wflag = 1;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2201      	movs	r2, #1
 800b684:	70da      	strb	r2, [r3, #3]
			break;
 800b686:	e049      	b.n	800b71c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	899b      	ldrh	r3, [r3, #12]
 800b690:	089b      	lsrs	r3, r3, #2
 800b692:	b29b      	uxth	r3, r3
 800b694:	4619      	mov	r1, r3
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	fbb3 f3f1 	udiv	r3, r3, r1
 800b69c:	4413      	add	r3, r2
 800b69e:	4619      	mov	r1, r3
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f7ff fd93 	bl	800b1cc <move_window>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6aa:	7ffb      	ldrb	r3, [r7, #31]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d134      	bne.n	800b71a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	8992      	ldrh	r2, [r2, #12]
 800b6c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6c8:	fb00 f202 	mul.w	r2, r0, r2
 800b6cc:	1a9b      	subs	r3, r3, r2
 800b6ce:	440b      	add	r3, r1
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff fae3 	bl	800ac9c <ld_dword>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6dc:	4323      	orrs	r3, r4
 800b6de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	8992      	ldrh	r2, [r2, #12]
 800b6ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6f2:	fb00 f202 	mul.w	r2, r0, r2
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	440b      	add	r3, r1
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7ff fb0b 	bl	800ad18 <st_dword>
			fs->wflag = 1;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2201      	movs	r2, #1
 800b706:	70da      	strb	r2, [r3, #3]
			break;
 800b708:	e008      	b.n	800b71c <put_fat+0x22e>
		}
	}
 800b70a:	bf00      	nop
 800b70c:	e006      	b.n	800b71c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b70e:	bf00      	nop
 800b710:	e004      	b.n	800b71c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b712:	bf00      	nop
 800b714:	e002      	b.n	800b71c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b716:	bf00      	nop
 800b718:	e000      	b.n	800b71c <put_fat+0x22e>
			if (res != FR_OK) break;
 800b71a:	bf00      	nop
	return res;
 800b71c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3724      	adds	r7, #36	; 0x24
 800b722:	46bd      	mov	sp, r7
 800b724:	bd90      	pop	{r4, r7, pc}

0800b726 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b088      	sub	sp, #32
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	60b9      	str	r1, [r7, #8]
 800b730:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d904      	bls.n	800b74c <remove_chain+0x26>
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d301      	bcc.n	800b750 <remove_chain+0x2a>
 800b74c:	2302      	movs	r3, #2
 800b74e:	e04b      	b.n	800b7e8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00c      	beq.n	800b770 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b756:	f04f 32ff 	mov.w	r2, #4294967295
 800b75a:	6879      	ldr	r1, [r7, #4]
 800b75c:	69b8      	ldr	r0, [r7, #24]
 800b75e:	f7ff fec6 	bl	800b4ee <put_fat>
 800b762:	4603      	mov	r3, r0
 800b764:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b766:	7ffb      	ldrb	r3, [r7, #31]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <remove_chain+0x4a>
 800b76c:	7ffb      	ldrb	r3, [r7, #31]
 800b76e:	e03b      	b.n	800b7e8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b770:	68b9      	ldr	r1, [r7, #8]
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7ff fde7 	bl	800b346 <get_fat>
 800b778:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d031      	beq.n	800b7e4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d101      	bne.n	800b78a <remove_chain+0x64>
 800b786:	2302      	movs	r3, #2
 800b788:	e02e      	b.n	800b7e8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b790:	d101      	bne.n	800b796 <remove_chain+0x70>
 800b792:	2301      	movs	r3, #1
 800b794:	e028      	b.n	800b7e8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b796:	2200      	movs	r2, #0
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	69b8      	ldr	r0, [r7, #24]
 800b79c:	f7ff fea7 	bl	800b4ee <put_fat>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b7a4:	7ffb      	ldrb	r3, [r7, #31]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <remove_chain+0x88>
 800b7aa:	7ffb      	ldrb	r3, [r7, #31]
 800b7ac:	e01c      	b.n	800b7e8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	699a      	ldr	r2, [r3, #24]
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	69db      	ldr	r3, [r3, #28]
 800b7b6:	3b02      	subs	r3, #2
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d20b      	bcs.n	800b7d4 <remove_chain+0xae>
			fs->free_clst++;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	791b      	ldrb	r3, [r3, #4]
 800b7ca:	f043 0301 	orr.w	r3, r3, #1
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	69db      	ldr	r3, [r3, #28]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d3c6      	bcc.n	800b770 <remove_chain+0x4a>
 800b7e2:	e000      	b.n	800b7e6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b7e4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3720      	adds	r7, #32
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10d      	bne.n	800b822 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d004      	beq.n	800b81c <create_chain+0x2c>
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	69db      	ldr	r3, [r3, #28]
 800b816:	69ba      	ldr	r2, [r7, #24]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d31b      	bcc.n	800b854 <create_chain+0x64>
 800b81c:	2301      	movs	r3, #1
 800b81e:	61bb      	str	r3, [r7, #24]
 800b820:	e018      	b.n	800b854 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff fd8e 	bl	800b346 <get_fat>
 800b82a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d801      	bhi.n	800b836 <create_chain+0x46>
 800b832:	2301      	movs	r3, #1
 800b834:	e070      	b.n	800b918 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83c:	d101      	bne.n	800b842 <create_chain+0x52>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	e06a      	b.n	800b918 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	69db      	ldr	r3, [r3, #28]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d201      	bcs.n	800b850 <create_chain+0x60>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	e063      	b.n	800b918 <create_chain+0x128>
		scl = clst;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	3301      	adds	r3, #1
 800b85c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	429a      	cmp	r2, r3
 800b866:	d307      	bcc.n	800b878 <create_chain+0x88>
				ncl = 2;
 800b868:	2302      	movs	r3, #2
 800b86a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b86c:	69fa      	ldr	r2, [r7, #28]
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	429a      	cmp	r2, r3
 800b872:	d901      	bls.n	800b878 <create_chain+0x88>
 800b874:	2300      	movs	r3, #0
 800b876:	e04f      	b.n	800b918 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b878:	69f9      	ldr	r1, [r7, #28]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fd63 	bl	800b346 <get_fat>
 800b880:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00e      	beq.n	800b8a6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d003      	beq.n	800b896 <create_chain+0xa6>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b894:	d101      	bne.n	800b89a <create_chain+0xaa>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	e03e      	b.n	800b918 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b89a:	69fa      	ldr	r2, [r7, #28]
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d1da      	bne.n	800b858 <create_chain+0x68>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e038      	b.n	800b918 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b8a6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ac:	69f9      	ldr	r1, [r7, #28]
 800b8ae:	6938      	ldr	r0, [r7, #16]
 800b8b0:	f7ff fe1d 	bl	800b4ee <put_fat>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d109      	bne.n	800b8d2 <create_chain+0xe2>
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d006      	beq.n	800b8d2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b8c4:	69fa      	ldr	r2, [r7, #28]
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6938      	ldr	r0, [r7, #16]
 800b8ca:	f7ff fe10 	bl	800b4ee <put_fat>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d116      	bne.n	800b906 <create_chain+0x116>
		fs->last_clst = ncl;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	699a      	ldr	r2, [r3, #24]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	3b02      	subs	r3, #2
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d804      	bhi.n	800b8f6 <create_chain+0x106>
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	699b      	ldr	r3, [r3, #24]
 800b8f0:	1e5a      	subs	r2, r3, #1
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	791b      	ldrb	r3, [r3, #4]
 800b8fa:	f043 0301 	orr.w	r3, r3, #1
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	711a      	strb	r2, [r3, #4]
 800b904:	e007      	b.n	800b916 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d102      	bne.n	800b912 <create_chain+0x122>
 800b90c:	f04f 33ff 	mov.w	r3, #4294967295
 800b910:	e000      	b.n	800b914 <create_chain+0x124>
 800b912:	2301      	movs	r3, #1
 800b914:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b916:	69fb      	ldr	r3, [r7, #28]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3720      	adds	r7, #32
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b920:	b480      	push	{r7}
 800b922:	b087      	sub	sp, #28
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b934:	3304      	adds	r3, #4
 800b936:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	899b      	ldrh	r3, [r3, #12]
 800b93c:	461a      	mov	r2, r3
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	fbb3 f3f2 	udiv	r3, r3, r2
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	8952      	ldrh	r2, [r2, #10]
 800b948:	fbb3 f3f2 	udiv	r3, r3, r2
 800b94c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	1d1a      	adds	r2, r3, #4
 800b952:	613a      	str	r2, [r7, #16]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <clmt_clust+0x42>
 800b95e:	2300      	movs	r3, #0
 800b960:	e010      	b.n	800b984 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	429a      	cmp	r2, r3
 800b968:	d307      	bcc.n	800b97a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	617b      	str	r3, [r7, #20]
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	3304      	adds	r3, #4
 800b976:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b978:	e7e9      	b.n	800b94e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b97a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	4413      	add	r3, r2
}
 800b984:	4618      	mov	r0, r3
 800b986:	371c      	adds	r7, #28
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9a6:	d204      	bcs.n	800b9b2 <dir_sdi+0x22>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	f003 031f 	and.w	r3, r3, #31
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	e071      	b.n	800ba9a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d106      	bne.n	800b9d6 <dir_sdi+0x46>
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d902      	bls.n	800b9d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10c      	bne.n	800b9f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	095b      	lsrs	r3, r3, #5
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	8912      	ldrh	r2, [r2, #8]
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d301      	bcc.n	800b9ec <dir_sdi+0x5c>
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	e056      	b.n	800ba9a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	61da      	str	r2, [r3, #28]
 800b9f4:	e02d      	b.n	800ba52 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	895b      	ldrh	r3, [r3, #10]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	899b      	ldrh	r3, [r3, #12]
 800ba00:	fb02 f303 	mul.w	r3, r2, r3
 800ba04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba06:	e019      	b.n	800ba3c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6979      	ldr	r1, [r7, #20]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff fc9a 	bl	800b346 <get_fat>
 800ba12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1a:	d101      	bne.n	800ba20 <dir_sdi+0x90>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e03c      	b.n	800ba9a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d904      	bls.n	800ba30 <dir_sdi+0xa0>
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	69db      	ldr	r3, [r3, #28]
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d301      	bcc.n	800ba34 <dir_sdi+0xa4>
 800ba30:	2302      	movs	r3, #2
 800ba32:	e032      	b.n	800ba9a <dir_sdi+0x10a>
			ofs -= csz;
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d2e1      	bcs.n	800ba08 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ba44:	6979      	ldr	r1, [r7, #20]
 800ba46:	6938      	ldr	r0, [r7, #16]
 800ba48:	f7ff fc5e 	bl	800b308 <clust2sect>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	697a      	ldr	r2, [r7, #20]
 800ba56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	69db      	ldr	r3, [r3, #28]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <dir_sdi+0xd4>
 800ba60:	2302      	movs	r3, #2
 800ba62:	e01a      	b.n	800ba9a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	69da      	ldr	r2, [r3, #28]
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	899b      	ldrh	r3, [r3, #12]
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba74:	441a      	add	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	899b      	ldrh	r3, [r3, #12]
 800ba84:	461a      	mov	r2, r3
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba8c:	fb00 f202 	mul.w	r2, r0, r2
 800ba90:	1a9b      	subs	r3, r3, r2
 800ba92:	18ca      	adds	r2, r1, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b086      	sub	sp, #24
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	3320      	adds	r3, #32
 800bab8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <dir_next+0x28>
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bac8:	d301      	bcc.n	800bace <dir_next+0x2c>
 800baca:	2304      	movs	r3, #4
 800bacc:	e0bb      	b.n	800bc46 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	899b      	ldrh	r3, [r3, #12]
 800bad2:	461a      	mov	r2, r3
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bada:	fb01 f202 	mul.w	r2, r1, r2
 800bade:	1a9b      	subs	r3, r3, r2
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f040 809d 	bne.w	800bc20 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10b      	bne.n	800bb10 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	095b      	lsrs	r3, r3, #5
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	8912      	ldrh	r2, [r2, #8]
 800bb00:	4293      	cmp	r3, r2
 800bb02:	f0c0 808d 	bcc.w	800bc20 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	61da      	str	r2, [r3, #28]
 800bb0c:	2304      	movs	r3, #4
 800bb0e:	e09a      	b.n	800bc46 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	899b      	ldrh	r3, [r3, #12]
 800bb14:	461a      	mov	r2, r3
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	8952      	ldrh	r2, [r2, #10]
 800bb20:	3a01      	subs	r2, #1
 800bb22:	4013      	ands	r3, r2
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d17b      	bne.n	800bc20 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	4610      	mov	r0, r2
 800bb32:	f7ff fc08 	bl	800b346 <get_fat>
 800bb36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d801      	bhi.n	800bb42 <dir_next+0xa0>
 800bb3e:	2302      	movs	r3, #2
 800bb40:	e081      	b.n	800bc46 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb48:	d101      	bne.n	800bb4e <dir_next+0xac>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e07b      	b.n	800bc46 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d359      	bcc.n	800bc0c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d104      	bne.n	800bb68 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	61da      	str	r2, [r3, #28]
 800bb64:	2304      	movs	r3, #4
 800bb66:	e06e      	b.n	800bc46 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	699b      	ldr	r3, [r3, #24]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4610      	mov	r0, r2
 800bb72:	f7ff fe3d 	bl	800b7f0 <create_chain>
 800bb76:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <dir_next+0xe0>
 800bb7e:	2307      	movs	r3, #7
 800bb80:	e061      	b.n	800bc46 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d101      	bne.n	800bb8c <dir_next+0xea>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e05c      	b.n	800bc46 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb92:	d101      	bne.n	800bb98 <dir_next+0xf6>
 800bb94:	2301      	movs	r3, #1
 800bb96:	e056      	b.n	800bc46 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7ff fad3 	bl	800b144 <sync_window>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d001      	beq.n	800bba8 <dir_next+0x106>
 800bba4:	2301      	movs	r3, #1
 800bba6:	e04e      	b.n	800bc46 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	899b      	ldrh	r3, [r3, #12]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	f7ff f8fc 	bl	800adb2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbba:	2300      	movs	r3, #0
 800bbbc:	613b      	str	r3, [r7, #16]
 800bbbe:	6979      	ldr	r1, [r7, #20]
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f7ff fba1 	bl	800b308 <clust2sect>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	635a      	str	r2, [r3, #52]	; 0x34
 800bbcc:	e012      	b.n	800bbf4 <dir_next+0x152>
						fs->wflag = 1;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f7ff fab5 	bl	800b144 <sync_window>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <dir_next+0x142>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e030      	b.n	800bc46 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	613b      	str	r3, [r7, #16]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	635a      	str	r2, [r3, #52]	; 0x34
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	895b      	ldrh	r3, [r3, #10]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d3e6      	bcc.n	800bbce <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	1ad2      	subs	r2, r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bc12:	6979      	ldr	r1, [r7, #20]
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f7ff fb77 	bl	800b308 <clust2sect>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	899b      	ldrh	r3, [r3, #12]
 800bc30:	461a      	mov	r2, r3
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc38:	fb00 f202 	mul.w	r2, r0, r2
 800bc3c:	1a9b      	subs	r3, r3, r2
 800bc3e:	18ca      	adds	r2, r1, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b086      	sub	sp, #24
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bc5e:	2100      	movs	r1, #0
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7ff fe95 	bl	800b990 <dir_sdi>
 800bc66:	4603      	mov	r3, r0
 800bc68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d12b      	bne.n	800bcc8 <dir_alloc+0x7a>
		n = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7ff faa6 	bl	800b1cc <move_window>
 800bc80:	4603      	mov	r3, r0
 800bc82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bc84:	7dfb      	ldrb	r3, [r7, #23]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d11d      	bne.n	800bcc6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	2be5      	cmp	r3, #229	; 0xe5
 800bc92:	d004      	beq.n	800bc9e <dir_alloc+0x50>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a1b      	ldr	r3, [r3, #32]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d107      	bne.n	800bcae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	3301      	adds	r3, #1
 800bca2:	613b      	str	r3, [r7, #16]
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d102      	bne.n	800bcb2 <dir_alloc+0x64>
 800bcac:	e00c      	b.n	800bcc8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bcae:	2300      	movs	r3, #0
 800bcb0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7ff fef4 	bl	800baa2 <dir_next>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d0d7      	beq.n	800bc74 <dir_alloc+0x26>
 800bcc4:	e000      	b.n	800bcc8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bcc6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	2b04      	cmp	r3, #4
 800bccc:	d101      	bne.n	800bcd2 <dir_alloc+0x84>
 800bcce:	2307      	movs	r3, #7
 800bcd0:	75fb      	strb	r3, [r7, #23]
	return res;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	331a      	adds	r3, #26
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe ffbe 	bl	800ac6c <ld_word>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	d109      	bne.n	800bd10 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	3314      	adds	r3, #20
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fe ffb3 	bl	800ac6c <ld_word>
 800bd06:	4603      	mov	r3, r0
 800bd08:	041b      	lsls	r3, r3, #16
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bd10:	68fb      	ldr	r3, [r7, #12]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	331a      	adds	r3, #26
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	b292      	uxth	r2, r2
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fe ffd6 	bl	800ace2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	d109      	bne.n	800bd52 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f103 0214 	add.w	r2, r3, #20
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	0c1b      	lsrs	r3, r3, #16
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7fe ffc8 	bl	800ace2 <st_word>
	}
}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	331a      	adds	r3, #26
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fe ff7e 	bl	800ac6c <ld_word>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <cmp_lfn+0x1e>
 800bd76:	2300      	movs	r3, #0
 800bd78:	e059      	b.n	800be2e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd82:	1e5a      	subs	r2, r3, #1
 800bd84:	4613      	mov	r3, r2
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	4413      	add	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd90:	2301      	movs	r3, #1
 800bd92:	81fb      	strh	r3, [r7, #14]
 800bd94:	2300      	movs	r3, #0
 800bd96:	613b      	str	r3, [r7, #16]
 800bd98:	e033      	b.n	800be02 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bd9a:	4a27      	ldr	r2, [pc, #156]	; (800be38 <cmp_lfn+0xdc>)
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	4413      	add	r3, r2
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	4413      	add	r3, r2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fe ff5f 	bl	800ac6c <ld_word>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bdb2:	89fb      	ldrh	r3, [r7, #14]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d01a      	beq.n	800bdee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2bfe      	cmp	r3, #254	; 0xfe
 800bdbc:	d812      	bhi.n	800bde4 <cmp_lfn+0x88>
 800bdbe:	89bb      	ldrh	r3, [r7, #12]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f002 f835 	bl	800de30 <ff_wtoupper>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	461c      	mov	r4, r3
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	1c5a      	adds	r2, r3, #1
 800bdce:	617a      	str	r2, [r7, #20]
 800bdd0:	005b      	lsls	r3, r3, #1
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f002 f829 	bl	800de30 <ff_wtoupper>
 800bdde:	4603      	mov	r3, r0
 800bde0:	429c      	cmp	r4, r3
 800bde2:	d001      	beq.n	800bde8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bde4:	2300      	movs	r3, #0
 800bde6:	e022      	b.n	800be2e <cmp_lfn+0xd2>
			}
			wc = uc;
 800bde8:	89bb      	ldrh	r3, [r7, #12]
 800bdea:	81fb      	strh	r3, [r7, #14]
 800bdec:	e006      	b.n	800bdfc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bdee:	89bb      	ldrh	r3, [r7, #12]
 800bdf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d001      	beq.n	800bdfc <cmp_lfn+0xa0>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e018      	b.n	800be2e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	3301      	adds	r3, #1
 800be00:	613b      	str	r3, [r7, #16]
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	2b0c      	cmp	r3, #12
 800be06:	d9c8      	bls.n	800bd9a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00b      	beq.n	800be2c <cmp_lfn+0xd0>
 800be14:	89fb      	ldrh	r3, [r7, #14]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d008      	beq.n	800be2c <cmp_lfn+0xd0>
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	4413      	add	r3, r2
 800be22:	881b      	ldrh	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <cmp_lfn+0xd0>
 800be28:	2300      	movs	r3, #0
 800be2a:	e000      	b.n	800be2e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800be2c:	2301      	movs	r3, #1
}
 800be2e:	4618      	mov	r0, r3
 800be30:	371c      	adds	r7, #28
 800be32:	46bd      	mov	sp, r7
 800be34:	bd90      	pop	{r4, r7, pc}
 800be36:	bf00      	nop
 800be38:	080154f8 	.word	0x080154f8

0800be3c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4611      	mov	r1, r2
 800be48:	461a      	mov	r2, r3
 800be4a:	460b      	mov	r3, r1
 800be4c:	71fb      	strb	r3, [r7, #7]
 800be4e:	4613      	mov	r3, r2
 800be50:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	330d      	adds	r3, #13
 800be56:	79ba      	ldrb	r2, [r7, #6]
 800be58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	330b      	adds	r3, #11
 800be5e:	220f      	movs	r2, #15
 800be60:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	330c      	adds	r3, #12
 800be66:	2200      	movs	r2, #0
 800be68:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	331a      	adds	r3, #26
 800be6e:	2100      	movs	r1, #0
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe ff36 	bl	800ace2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	1e5a      	subs	r2, r3, #1
 800be7a:	4613      	mov	r3, r2
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800be86:	2300      	movs	r3, #0
 800be88:	82fb      	strh	r3, [r7, #22]
 800be8a:	2300      	movs	r3, #0
 800be8c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800be8e:	8afb      	ldrh	r3, [r7, #22]
 800be90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be94:	4293      	cmp	r3, r2
 800be96:	d007      	beq.n	800bea8 <put_lfn+0x6c>
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	61fa      	str	r2, [r7, #28]
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	4413      	add	r3, r2
 800bea4:	881b      	ldrh	r3, [r3, #0]
 800bea6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bea8:	4a17      	ldr	r2, [pc, #92]	; (800bf08 <put_lfn+0xcc>)
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	4413      	add	r3, r2
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	461a      	mov	r2, r3
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	4413      	add	r3, r2
 800beb6:	8afa      	ldrh	r2, [r7, #22]
 800beb8:	4611      	mov	r1, r2
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fe ff11 	bl	800ace2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bec0:	8afb      	ldrh	r3, [r7, #22]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <put_lfn+0x90>
 800bec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800beca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	3301      	adds	r3, #1
 800bed0:	61bb      	str	r3, [r7, #24]
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	2b0c      	cmp	r3, #12
 800bed6:	d9da      	bls.n	800be8e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bed8:	8afb      	ldrh	r3, [r7, #22]
 800beda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bede:	4293      	cmp	r3, r2
 800bee0:	d006      	beq.n	800bef0 <put_lfn+0xb4>
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	4413      	add	r3, r2
 800beea:	881b      	ldrh	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d103      	bne.n	800bef8 <put_lfn+0xbc>
 800bef0:	79fb      	ldrb	r3, [r7, #7]
 800bef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	79fa      	ldrb	r2, [r7, #7]
 800befc:	701a      	strb	r2, [r3, #0]
}
 800befe:	bf00      	nop
 800bf00:	3720      	adds	r7, #32
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	080154f8 	.word	0x080154f8

0800bf0c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08c      	sub	sp, #48	; 0x30
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bf1a:	220b      	movs	r2, #11
 800bf1c:	68b9      	ldr	r1, [r7, #8]
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f7fe ff26 	bl	800ad70 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	2b05      	cmp	r3, #5
 800bf28:	d92b      	bls.n	800bf82 <gen_numname+0x76>
		sr = seq;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bf2e:	e022      	b.n	800bf76 <gen_numname+0x6a>
			wc = *lfn++;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	1c9a      	adds	r2, r3, #2
 800bf34:	607a      	str	r2, [r7, #4]
 800bf36:	881b      	ldrh	r3, [r3, #0]
 800bf38:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf3e:	e017      	b.n	800bf70 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	005a      	lsls	r2, r3, #1
 800bf44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	4413      	add	r3, r2
 800bf4c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bf4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf50:	085b      	lsrs	r3, r3, #1
 800bf52:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d005      	beq.n	800bf6a <gen_numname+0x5e>
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bf64:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bf68:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	2b0f      	cmp	r3, #15
 800bf74:	d9e4      	bls.n	800bf40 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	881b      	ldrh	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1d8      	bne.n	800bf30 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bf82:	2307      	movs	r3, #7
 800bf84:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	f003 030f 	and.w	r3, r3, #15
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	3330      	adds	r3, #48	; 0x30
 800bf92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bf96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf9a:	2b39      	cmp	r3, #57	; 0x39
 800bf9c:	d904      	bls.n	800bfa8 <gen_numname+0x9c>
 800bf9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfa2:	3307      	adds	r3, #7
 800bfa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	1e5a      	subs	r2, r3, #1
 800bfac:	62ba      	str	r2, [r7, #40]	; 0x28
 800bfae:	3330      	adds	r3, #48	; 0x30
 800bfb0:	443b      	add	r3, r7
 800bfb2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bfb6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	091b      	lsrs	r3, r3, #4
 800bfbe:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1df      	bne.n	800bf86 <gen_numname+0x7a>
	ns[i] = '~';
 800bfc6:	f107 0214 	add.w	r2, r7, #20
 800bfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfcc:	4413      	add	r3, r2
 800bfce:	227e      	movs	r2, #126	; 0x7e
 800bfd0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bfd6:	e002      	b.n	800bfde <gen_numname+0xd2>
 800bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfda:	3301      	adds	r3, #1
 800bfdc:	627b      	str	r3, [r7, #36]	; 0x24
 800bfde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d205      	bcs.n	800bff2 <gen_numname+0xe6>
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	4413      	add	r3, r2
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d1f2      	bne.n	800bfd8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff4:	2b07      	cmp	r3, #7
 800bff6:	d807      	bhi.n	800c008 <gen_numname+0xfc>
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	62ba      	str	r2, [r7, #40]	; 0x28
 800bffe:	3330      	adds	r3, #48	; 0x30
 800c000:	443b      	add	r3, r7
 800c002:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c006:	e000      	b.n	800c00a <gen_numname+0xfe>
 800c008:	2120      	movs	r1, #32
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	1c5a      	adds	r2, r3, #1
 800c00e:	627a      	str	r2, [r7, #36]	; 0x24
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	4413      	add	r3, r2
 800c014:	460a      	mov	r2, r1
 800c016:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	2b07      	cmp	r3, #7
 800c01c:	d9e9      	bls.n	800bff2 <gen_numname+0xe6>
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	3730      	adds	r7, #48	; 0x30
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c034:	230b      	movs	r3, #11
 800c036:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	0852      	lsrs	r2, r2, #1
 800c03e:	01db      	lsls	r3, r3, #7
 800c040:	4313      	orrs	r3, r2
 800c042:	b2da      	uxtb	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	1c59      	adds	r1, r3, #1
 800c048:	6079      	str	r1, [r7, #4]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	4413      	add	r3, r2
 800c04e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	3b01      	subs	r3, #1
 800c054:	60bb      	str	r3, [r7, #8]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1ed      	bne.n	800c038 <sum_sfn+0x10>
	return sum;
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b086      	sub	sp, #24
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c078:	2100      	movs	r1, #0
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff fc88 	bl	800b990 <dir_sdi>
 800c080:	4603      	mov	r3, r0
 800c082:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c084:	7dfb      	ldrb	r3, [r7, #23]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <dir_find+0x24>
 800c08a:	7dfb      	ldrb	r3, [r7, #23]
 800c08c:	e0a9      	b.n	800c1e2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c08e:	23ff      	movs	r3, #255	; 0xff
 800c090:	753b      	strb	r3, [r7, #20]
 800c092:	7d3b      	ldrb	r3, [r7, #20]
 800c094:	757b      	strb	r3, [r7, #21]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f04f 32ff 	mov.w	r2, #4294967295
 800c09c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6938      	ldr	r0, [r7, #16]
 800c0a6:	f7ff f891 	bl	800b1cc <move_window>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f040 8090 	bne.w	800c1d6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c0be:	7dbb      	ldrb	r3, [r7, #22]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <dir_find+0x60>
 800c0c4:	2304      	movs	r3, #4
 800c0c6:	75fb      	strb	r3, [r7, #23]
 800c0c8:	e08a      	b.n	800c1e0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a1b      	ldr	r3, [r3, #32]
 800c0ce:	330b      	adds	r3, #11
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0d6:	73fb      	strb	r3, [r7, #15]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	7bfa      	ldrb	r2, [r7, #15]
 800c0dc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c0de:	7dbb      	ldrb	r3, [r7, #22]
 800c0e0:	2be5      	cmp	r3, #229	; 0xe5
 800c0e2:	d007      	beq.n	800c0f4 <dir_find+0x8a>
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	f003 0308 	and.w	r3, r3, #8
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d009      	beq.n	800c102 <dir_find+0x98>
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	2b0f      	cmp	r3, #15
 800c0f2:	d006      	beq.n	800c102 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0f4:	23ff      	movs	r3, #255	; 0xff
 800c0f6:	757b      	strb	r3, [r7, #21]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fe:	631a      	str	r2, [r3, #48]	; 0x30
 800c100:	e05e      	b.n	800c1c0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c102:	7bfb      	ldrb	r3, [r7, #15]
 800c104:	2b0f      	cmp	r3, #15
 800c106:	d136      	bne.n	800c176 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c112:	2b00      	cmp	r3, #0
 800c114:	d154      	bne.n	800c1c0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c116:	7dbb      	ldrb	r3, [r7, #22]
 800c118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00d      	beq.n	800c13c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	7b5b      	ldrb	r3, [r3, #13]
 800c126:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c128:	7dbb      	ldrb	r3, [r7, #22]
 800c12a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c12e:	75bb      	strb	r3, [r7, #22]
 800c130:	7dbb      	ldrb	r3, [r7, #22]
 800c132:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	695a      	ldr	r2, [r3, #20]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c13c:	7dba      	ldrb	r2, [r7, #22]
 800c13e:	7d7b      	ldrb	r3, [r7, #21]
 800c140:	429a      	cmp	r2, r3
 800c142:	d115      	bne.n	800c170 <dir_find+0x106>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a1b      	ldr	r3, [r3, #32]
 800c148:	330d      	adds	r3, #13
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	7d3a      	ldrb	r2, [r7, #20]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d10e      	bne.n	800c170 <dir_find+0x106>
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	691a      	ldr	r2, [r3, #16]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a1b      	ldr	r3, [r3, #32]
 800c15a:	4619      	mov	r1, r3
 800c15c:	4610      	mov	r0, r2
 800c15e:	f7ff fdfd 	bl	800bd5c <cmp_lfn>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d003      	beq.n	800c170 <dir_find+0x106>
 800c168:	7d7b      	ldrb	r3, [r7, #21]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	e000      	b.n	800c172 <dir_find+0x108>
 800c170:	23ff      	movs	r3, #255	; 0xff
 800c172:	757b      	strb	r3, [r7, #21]
 800c174:	e024      	b.n	800c1c0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c176:	7d7b      	ldrb	r3, [r7, #21]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d109      	bne.n	800c190 <dir_find+0x126>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff ff51 	bl	800c028 <sum_sfn>
 800c186:	4603      	mov	r3, r0
 800c188:	461a      	mov	r2, r3
 800c18a:	7d3b      	ldrb	r3, [r7, #20]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d024      	beq.n	800c1da <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10a      	bne.n	800c1b4 <dir_find+0x14a>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a18      	ldr	r0, [r3, #32]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	3324      	adds	r3, #36	; 0x24
 800c1a6:	220b      	movs	r2, #11
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f7fe fe1d 	bl	800ade8 <mem_cmp>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d014      	beq.n	800c1de <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1b4:	23ff      	movs	r3, #255	; 0xff
 800c1b6:	757b      	strb	r3, [r7, #21]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c1be:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7ff fc6d 	bl	800baa2 <dir_next>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c1cc:	7dfb      	ldrb	r3, [r7, #23]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f43f af65 	beq.w	800c09e <dir_find+0x34>
 800c1d4:	e004      	b.n	800c1e0 <dir_find+0x176>
		if (res != FR_OK) break;
 800c1d6:	bf00      	nop
 800c1d8:	e002      	b.n	800c1e0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c1da:	bf00      	nop
 800c1dc:	e000      	b.n	800c1e0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1de:	bf00      	nop

	return res;
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08c      	sub	sp, #48	; 0x30
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c200:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d001      	beq.n	800c20c <dir_register+0x20>
 800c208:	2306      	movs	r3, #6
 800c20a:	e0e0      	b.n	800c3ce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c20c:	2300      	movs	r3, #0
 800c20e:	627b      	str	r3, [r7, #36]	; 0x24
 800c210:	e002      	b.n	800c218 <dir_register+0x2c>
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	3301      	adds	r3, #1
 800c216:	627b      	str	r3, [r7, #36]	; 0x24
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	691a      	ldr	r2, [r3, #16]
 800c21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	4413      	add	r3, r2
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1f4      	bne.n	800c212 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c22e:	f107 030c 	add.w	r3, r7, #12
 800c232:	220c      	movs	r2, #12
 800c234:	4618      	mov	r0, r3
 800c236:	f7fe fd9b 	bl	800ad70 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	2b00      	cmp	r3, #0
 800c242:	d032      	beq.n	800c2aa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2240      	movs	r2, #64	; 0x40
 800c248:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c24c:	2301      	movs	r3, #1
 800c24e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c250:	e016      	b.n	800c280 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	691a      	ldr	r2, [r3, #16]
 800c25c:	f107 010c 	add.w	r1, r7, #12
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	f7ff fe53 	bl	800bf0c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7ff feff 	bl	800c06a <dir_find>
 800c26c:	4603      	mov	r3, r0
 800c26e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	3301      	adds	r3, #1
 800c27e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	2b63      	cmp	r3, #99	; 0x63
 800c284:	d9e5      	bls.n	800c252 <dir_register+0x66>
 800c286:	e000      	b.n	800c28a <dir_register+0x9e>
			if (res != FR_OK) break;
 800c288:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28c:	2b64      	cmp	r3, #100	; 0x64
 800c28e:	d101      	bne.n	800c294 <dir_register+0xa8>
 800c290:	2307      	movs	r3, #7
 800c292:	e09c      	b.n	800c3ce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c298:	2b04      	cmp	r3, #4
 800c29a:	d002      	beq.n	800c2a2 <dir_register+0xb6>
 800c29c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2a0:	e095      	b.n	800c3ce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c2a2:	7dfa      	ldrb	r2, [r7, #23]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	f003 0302 	and.w	r3, r3, #2
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d007      	beq.n	800c2c4 <dir_register+0xd8>
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	330c      	adds	r3, #12
 800c2b8:	4a47      	ldr	r2, [pc, #284]	; (800c3d8 <dir_register+0x1ec>)
 800c2ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c2be:	089b      	lsrs	r3, r3, #2
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	e000      	b.n	800c2c6 <dir_register+0xda>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c2c8:	6a39      	ldr	r1, [r7, #32]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff fcbf 	bl	800bc4e <dir_alloc>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c2d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d148      	bne.n	800c370 <dir_register+0x184>
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	623b      	str	r3, [r7, #32]
 800c2e4:	6a3b      	ldr	r3, [r7, #32]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d042      	beq.n	800c370 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	695a      	ldr	r2, [r3, #20]
 800c2ee:	6a3b      	ldr	r3, [r7, #32]
 800c2f0:	015b      	lsls	r3, r3, #5
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7ff fb4a 	bl	800b990 <dir_sdi>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c306:	2b00      	cmp	r3, #0
 800c308:	d132      	bne.n	800c370 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	3324      	adds	r3, #36	; 0x24
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff fe8a 	bl	800c028 <sum_sfn>
 800c314:	4603      	mov	r3, r0
 800c316:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	69db      	ldr	r3, [r3, #28]
 800c31c:	4619      	mov	r1, r3
 800c31e:	69f8      	ldr	r0, [r7, #28]
 800c320:	f7fe ff54 	bl	800b1cc <move_window>
 800c324:	4603      	mov	r3, r0
 800c326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c32a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d11d      	bne.n	800c36e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	6918      	ldr	r0, [r3, #16]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a19      	ldr	r1, [r3, #32]
 800c33a:	6a3b      	ldr	r3, [r7, #32]
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	7efb      	ldrb	r3, [r7, #27]
 800c340:	f7ff fd7c 	bl	800be3c <put_lfn>
				fs->wflag = 1;
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	2201      	movs	r2, #1
 800c348:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c34a:	2100      	movs	r1, #0
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff fba8 	bl	800baa2 <dir_next>
 800c352:	4603      	mov	r3, r0
 800c354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d107      	bne.n	800c370 <dir_register+0x184>
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	3b01      	subs	r3, #1
 800c364:	623b      	str	r3, [r7, #32]
 800c366:	6a3b      	ldr	r3, [r7, #32]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1d5      	bne.n	800c318 <dir_register+0x12c>
 800c36c:	e000      	b.n	800c370 <dir_register+0x184>
				if (res != FR_OK) break;
 800c36e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c374:	2b00      	cmp	r3, #0
 800c376:	d128      	bne.n	800c3ca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	69db      	ldr	r3, [r3, #28]
 800c37c:	4619      	mov	r1, r3
 800c37e:	69f8      	ldr	r0, [r7, #28]
 800c380:	f7fe ff24 	bl	800b1cc <move_window>
 800c384:	4603      	mov	r3, r0
 800c386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c38a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d11b      	bne.n	800c3ca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a1b      	ldr	r3, [r3, #32]
 800c396:	2220      	movs	r2, #32
 800c398:	2100      	movs	r1, #0
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fe fd09 	bl	800adb2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a18      	ldr	r0, [r3, #32]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	3324      	adds	r3, #36	; 0x24
 800c3a8:	220b      	movs	r2, #11
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	f7fe fce0 	bl	800ad70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	330c      	adds	r3, #12
 800c3bc:	f002 0218 	and.w	r2, r2, #24
 800c3c0:	b2d2      	uxtb	r2, r2
 800c3c2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c3ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3730      	adds	r7, #48	; 0x30
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	4ec4ec4f 	.word	0x4ec4ec4f

0800c3dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b08a      	sub	sp, #40	; 0x28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	613b      	str	r3, [r7, #16]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	617b      	str	r3, [r7, #20]
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	61ba      	str	r2, [r7, #24]
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	4413      	add	r3, r2
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c40a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c40c:	2b1f      	cmp	r3, #31
 800c40e:	d940      	bls.n	800c492 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c412:	2b2f      	cmp	r3, #47	; 0x2f
 800c414:	d006      	beq.n	800c424 <create_name+0x48>
 800c416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c418:	2b5c      	cmp	r3, #92	; 0x5c
 800c41a:	d110      	bne.n	800c43e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c41c:	e002      	b.n	800c424 <create_name+0x48>
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	3301      	adds	r3, #1
 800c422:	61bb      	str	r3, [r7, #24]
 800c424:	693a      	ldr	r2, [r7, #16]
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	4413      	add	r3, r2
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	2b2f      	cmp	r3, #47	; 0x2f
 800c42e:	d0f6      	beq.n	800c41e <create_name+0x42>
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	4413      	add	r3, r2
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b5c      	cmp	r3, #92	; 0x5c
 800c43a:	d0f0      	beq.n	800c41e <create_name+0x42>
			break;
 800c43c:	e02a      	b.n	800c494 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2bfe      	cmp	r3, #254	; 0xfe
 800c442:	d901      	bls.n	800c448 <create_name+0x6c>
 800c444:	2306      	movs	r3, #6
 800c446:	e17d      	b.n	800c744 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c450:	2101      	movs	r1, #1
 800c452:	4618      	mov	r0, r3
 800c454:	f001 fcb0 	bl	800ddb8 <ff_convert>
 800c458:	4603      	mov	r3, r0
 800c45a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <create_name+0x8a>
 800c462:	2306      	movs	r3, #6
 800c464:	e16e      	b.n	800c744 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c468:	2b7f      	cmp	r3, #127	; 0x7f
 800c46a:	d809      	bhi.n	800c480 <create_name+0xa4>
 800c46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c46e:	4619      	mov	r1, r3
 800c470:	488d      	ldr	r0, [pc, #564]	; (800c6a8 <create_name+0x2cc>)
 800c472:	f7fe fce0 	bl	800ae36 <chk_chr>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <create_name+0xa4>
 800c47c:	2306      	movs	r3, #6
 800c47e:	e161      	b.n	800c744 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	1c5a      	adds	r2, r3, #1
 800c484:	617a      	str	r2, [r7, #20]
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c48e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c490:	e7b4      	b.n	800c3fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c492:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	441a      	add	r2, r3
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c49e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a0:	2b1f      	cmp	r3, #31
 800c4a2:	d801      	bhi.n	800c4a8 <create_name+0xcc>
 800c4a4:	2304      	movs	r3, #4
 800c4a6:	e000      	b.n	800c4aa <create_name+0xce>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c4ae:	e011      	b.n	800c4d4 <create_name+0xf8>
		w = lfn[di - 1];
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	005b      	lsls	r3, r3, #1
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	4413      	add	r3, r2
 800c4be:	881b      	ldrh	r3, [r3, #0]
 800c4c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c4c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4c4:	2b20      	cmp	r3, #32
 800c4c6:	d002      	beq.n	800c4ce <create_name+0xf2>
 800c4c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c4cc:	d106      	bne.n	800c4dc <create_name+0x100>
		di--;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1ea      	bne.n	800c4b0 <create_name+0xd4>
 800c4da:	e000      	b.n	800c4de <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c4dc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d101      	bne.n	800c4f4 <create_name+0x118>
 800c4f0:	2306      	movs	r3, #6
 800c4f2:	e127      	b.n	800c744 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	3324      	adds	r3, #36	; 0x24
 800c4f8:	220b      	movs	r2, #11
 800c4fa:	2120      	movs	r1, #32
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fe fc58 	bl	800adb2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c502:	2300      	movs	r3, #0
 800c504:	61bb      	str	r3, [r7, #24]
 800c506:	e002      	b.n	800c50e <create_name+0x132>
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	3301      	adds	r3, #1
 800c50c:	61bb      	str	r3, [r7, #24]
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	4413      	add	r3, r2
 800c516:	881b      	ldrh	r3, [r3, #0]
 800c518:	2b20      	cmp	r3, #32
 800c51a:	d0f5      	beq.n	800c508 <create_name+0x12c>
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	005b      	lsls	r3, r3, #1
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	4413      	add	r3, r2
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	2b2e      	cmp	r3, #46	; 0x2e
 800c528:	d0ee      	beq.n	800c508 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d009      	beq.n	800c544 <create_name+0x168>
 800c530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c534:	f043 0303 	orr.w	r3, r3, #3
 800c538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c53c:	e002      	b.n	800c544 <create_name+0x168>
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	3b01      	subs	r3, #1
 800c542:	617b      	str	r3, [r7, #20]
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d009      	beq.n	800c55e <create_name+0x182>
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c550:	3b01      	subs	r3, #1
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4413      	add	r3, r2
 800c558:	881b      	ldrh	r3, [r3, #0]
 800c55a:	2b2e      	cmp	r3, #46	; 0x2e
 800c55c:	d1ef      	bne.n	800c53e <create_name+0x162>

	i = b = 0; ni = 8;
 800c55e:	2300      	movs	r3, #0
 800c560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c564:	2300      	movs	r3, #0
 800c566:	623b      	str	r3, [r7, #32]
 800c568:	2308      	movs	r3, #8
 800c56a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	61ba      	str	r2, [r7, #24]
 800c572:	005b      	lsls	r3, r3, #1
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4413      	add	r3, r2
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c57c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 8090 	beq.w	800c6a4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c586:	2b20      	cmp	r3, #32
 800c588:	d006      	beq.n	800c598 <create_name+0x1bc>
 800c58a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c58c:	2b2e      	cmp	r3, #46	; 0x2e
 800c58e:	d10a      	bne.n	800c5a6 <create_name+0x1ca>
 800c590:	69ba      	ldr	r2, [r7, #24]
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	429a      	cmp	r2, r3
 800c596:	d006      	beq.n	800c5a6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c59c:	f043 0303 	orr.w	r3, r3, #3
 800c5a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5a4:	e07d      	b.n	800c6a2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c5a6:	6a3a      	ldr	r2, [r7, #32]
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d203      	bcs.n	800c5b6 <create_name+0x1da>
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d123      	bne.n	800c5fe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	2b0b      	cmp	r3, #11
 800c5ba:	d106      	bne.n	800c5ca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5c0:	f043 0303 	orr.w	r3, r3, #3
 800c5c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5c8:	e075      	b.n	800c6b6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c5ca:	69ba      	ldr	r2, [r7, #24]
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d005      	beq.n	800c5de <create_name+0x202>
 800c5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d6:	f043 0303 	orr.w	r3, r3, #3
 800c5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c5de:	69ba      	ldr	r2, [r7, #24]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d866      	bhi.n	800c6b4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	61bb      	str	r3, [r7, #24]
 800c5ea:	2308      	movs	r3, #8
 800c5ec:	623b      	str	r3, [r7, #32]
 800c5ee:	230b      	movs	r3, #11
 800c5f0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c5f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5fc:	e051      	b.n	800c6a2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c5fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c600:	2b7f      	cmp	r3, #127	; 0x7f
 800c602:	d914      	bls.n	800c62e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c606:	2100      	movs	r1, #0
 800c608:	4618      	mov	r0, r3
 800c60a:	f001 fbd5 	bl	800ddb8 <ff_convert>
 800c60e:	4603      	mov	r3, r0
 800c610:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c614:	2b00      	cmp	r3, #0
 800c616:	d004      	beq.n	800c622 <create_name+0x246>
 800c618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c61a:	3b80      	subs	r3, #128	; 0x80
 800c61c:	4a23      	ldr	r2, [pc, #140]	; (800c6ac <create_name+0x2d0>)
 800c61e:	5cd3      	ldrb	r3, [r2, r3]
 800c620:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c626:	f043 0302 	orr.w	r3, r3, #2
 800c62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c62e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c630:	2b00      	cmp	r3, #0
 800c632:	d007      	beq.n	800c644 <create_name+0x268>
 800c634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c636:	4619      	mov	r1, r3
 800c638:	481d      	ldr	r0, [pc, #116]	; (800c6b0 <create_name+0x2d4>)
 800c63a:	f7fe fbfc 	bl	800ae36 <chk_chr>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d008      	beq.n	800c656 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c644:	235f      	movs	r3, #95	; 0x5f
 800c646:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c64c:	f043 0303 	orr.w	r3, r3, #3
 800c650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c654:	e01b      	b.n	800c68e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c658:	2b40      	cmp	r3, #64	; 0x40
 800c65a:	d909      	bls.n	800c670 <create_name+0x294>
 800c65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c65e:	2b5a      	cmp	r3, #90	; 0x5a
 800c660:	d806      	bhi.n	800c670 <create_name+0x294>
					b |= 2;
 800c662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c666:	f043 0302 	orr.w	r3, r3, #2
 800c66a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c66e:	e00e      	b.n	800c68e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c672:	2b60      	cmp	r3, #96	; 0x60
 800c674:	d90b      	bls.n	800c68e <create_name+0x2b2>
 800c676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c678:	2b7a      	cmp	r3, #122	; 0x7a
 800c67a:	d808      	bhi.n	800c68e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c67c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c680:	f043 0301 	orr.w	r3, r3, #1
 800c684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c68a:	3b20      	subs	r3, #32
 800c68c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	623a      	str	r2, [r7, #32]
 800c694:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c696:	b2d1      	uxtb	r1, r2
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	4413      	add	r3, r2
 800c69c:	460a      	mov	r2, r1
 800c69e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c6a2:	e763      	b.n	800c56c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c6a4:	bf00      	nop
 800c6a6:	e006      	b.n	800c6b6 <create_name+0x2da>
 800c6a8:	08014cac 	.word	0x08014cac
 800c6ac:	08015478 	.word	0x08015478
 800c6b0:	08014cb8 	.word	0x08014cb8
			if (si > di) break;			/* No extension */
 800c6b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c6bc:	2be5      	cmp	r3, #229	; 0xe5
 800c6be:	d103      	bne.n	800c6c8 <create_name+0x2ec>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2205      	movs	r2, #5
 800c6c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	2b08      	cmp	r3, #8
 800c6cc:	d104      	bne.n	800c6d8 <create_name+0x2fc>
 800c6ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c6d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6dc:	f003 030c 	and.w	r3, r3, #12
 800c6e0:	2b0c      	cmp	r3, #12
 800c6e2:	d005      	beq.n	800c6f0 <create_name+0x314>
 800c6e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6e8:	f003 0303 	and.w	r3, r3, #3
 800c6ec:	2b03      	cmp	r3, #3
 800c6ee:	d105      	bne.n	800c6fc <create_name+0x320>
 800c6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6f4:	f043 0302 	orr.w	r3, r3, #2
 800c6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c700:	f003 0302 	and.w	r3, r3, #2
 800c704:	2b00      	cmp	r3, #0
 800c706:	d117      	bne.n	800c738 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c70c:	f003 0303 	and.w	r3, r3, #3
 800c710:	2b01      	cmp	r3, #1
 800c712:	d105      	bne.n	800c720 <create_name+0x344>
 800c714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c718:	f043 0310 	orr.w	r3, r3, #16
 800c71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c724:	f003 030c 	and.w	r3, r3, #12
 800c728:	2b04      	cmp	r3, #4
 800c72a:	d105      	bne.n	800c738 <create_name+0x35c>
 800c72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c730:	f043 0308 	orr.w	r3, r3, #8
 800c734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c73e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c742:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c744:	4618      	mov	r0, r3
 800c746:	3728      	adds	r7, #40	; 0x28
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c760:	e002      	b.n	800c768 <follow_path+0x1c>
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	3301      	adds	r3, #1
 800c766:	603b      	str	r3, [r7, #0]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	2b2f      	cmp	r3, #47	; 0x2f
 800c76e:	d0f8      	beq.n	800c762 <follow_path+0x16>
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b5c      	cmp	r3, #92	; 0x5c
 800c776:	d0f4      	beq.n	800c762 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	2200      	movs	r2, #0
 800c77c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b1f      	cmp	r3, #31
 800c784:	d80a      	bhi.n	800c79c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2280      	movs	r2, #128	; 0x80
 800c78a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c78e:	2100      	movs	r1, #0
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff f8fd 	bl	800b990 <dir_sdi>
 800c796:	4603      	mov	r3, r0
 800c798:	75fb      	strb	r3, [r7, #23]
 800c79a:	e048      	b.n	800c82e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c79c:	463b      	mov	r3, r7
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff fe1b 	bl	800c3dc <create_name>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7aa:	7dfb      	ldrb	r3, [r7, #23]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d139      	bne.n	800c824 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7ff fc5a 	bl	800c06a <dir_find>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c7c8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ca:	2b04      	cmp	r3, #4
 800c7cc:	d12c      	bne.n	800c828 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7ce:	7afb      	ldrb	r3, [r7, #11]
 800c7d0:	f003 0304 	and.w	r3, r3, #4
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d127      	bne.n	800c828 <follow_path+0xdc>
 800c7d8:	2305      	movs	r3, #5
 800c7da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7dc:	e024      	b.n	800c828 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7de:	7afb      	ldrb	r3, [r7, #11]
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d121      	bne.n	800c82c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	799b      	ldrb	r3, [r3, #6]
 800c7ec:	f003 0310 	and.w	r3, r3, #16
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d102      	bne.n	800c7fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c7f4:	2305      	movs	r3, #5
 800c7f6:	75fb      	strb	r3, [r7, #23]
 800c7f8:	e019      	b.n	800c82e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	695b      	ldr	r3, [r3, #20]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	8992      	ldrh	r2, [r2, #12]
 800c808:	fbb3 f0f2 	udiv	r0, r3, r2
 800c80c:	fb00 f202 	mul.w	r2, r0, r2
 800c810:	1a9b      	subs	r3, r3, r2
 800c812:	440b      	add	r3, r1
 800c814:	4619      	mov	r1, r3
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f7ff fa60 	bl	800bcdc <ld_clust>
 800c81c:	4602      	mov	r2, r0
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c822:	e7bb      	b.n	800c79c <follow_path+0x50>
			if (res != FR_OK) break;
 800c824:	bf00      	nop
 800c826:	e002      	b.n	800c82e <follow_path+0xe2>
				break;
 800c828:	bf00      	nop
 800c82a:	e000      	b.n	800c82e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c82c:	bf00      	nop
			}
		}
	}

	return res;
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3718      	adds	r7, #24
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c838:	b480      	push	{r7}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c840:	f04f 33ff 	mov.w	r3, #4294967295
 800c844:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d031      	beq.n	800c8b2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	e002      	b.n	800c85c <get_ldnumber+0x24>
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	3301      	adds	r3, #1
 800c85a:	617b      	str	r3, [r7, #20]
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b1f      	cmp	r3, #31
 800c862:	d903      	bls.n	800c86c <get_ldnumber+0x34>
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b3a      	cmp	r3, #58	; 0x3a
 800c86a:	d1f4      	bne.n	800c856 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b3a      	cmp	r3, #58	; 0x3a
 800c872:	d11c      	bne.n	800c8ae <get_ldnumber+0x76>
			tp = *path;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	1c5a      	adds	r2, r3, #1
 800c87e:	60fa      	str	r2, [r7, #12]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	3b30      	subs	r3, #48	; 0x30
 800c884:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2b09      	cmp	r3, #9
 800c88a:	d80e      	bhi.n	800c8aa <get_ldnumber+0x72>
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	429a      	cmp	r2, r3
 800c892:	d10a      	bne.n	800c8aa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d107      	bne.n	800c8aa <get_ldnumber+0x72>
					vol = (int)i;
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	617b      	str	r3, [r7, #20]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	e002      	b.n	800c8b4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c8b2:	693b      	ldr	r3, [r7, #16]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	371c      	adds	r7, #28
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	70da      	strb	r2, [r3, #3]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8d8:	6839      	ldr	r1, [r7, #0]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7fe fc76 	bl	800b1cc <move_window>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d001      	beq.n	800c8ea <check_fs+0x2a>
 800c8e6:	2304      	movs	r3, #4
 800c8e8:	e038      	b.n	800c95c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3338      	adds	r3, #56	; 0x38
 800c8ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe f9ba 	bl	800ac6c <ld_word>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c900:	429a      	cmp	r2, r3
 800c902:	d001      	beq.n	800c908 <check_fs+0x48>
 800c904:	2303      	movs	r3, #3
 800c906:	e029      	b.n	800c95c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c90e:	2be9      	cmp	r3, #233	; 0xe9
 800c910:	d009      	beq.n	800c926 <check_fs+0x66>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c918:	2beb      	cmp	r3, #235	; 0xeb
 800c91a:	d11e      	bne.n	800c95a <check_fs+0x9a>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c922:	2b90      	cmp	r3, #144	; 0x90
 800c924:	d119      	bne.n	800c95a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	3338      	adds	r3, #56	; 0x38
 800c92a:	3336      	adds	r3, #54	; 0x36
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fe f9b5 	bl	800ac9c <ld_dword>
 800c932:	4603      	mov	r3, r0
 800c934:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c938:	4a0a      	ldr	r2, [pc, #40]	; (800c964 <check_fs+0xa4>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d101      	bne.n	800c942 <check_fs+0x82>
 800c93e:	2300      	movs	r3, #0
 800c940:	e00c      	b.n	800c95c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	3338      	adds	r3, #56	; 0x38
 800c946:	3352      	adds	r3, #82	; 0x52
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fe f9a7 	bl	800ac9c <ld_dword>
 800c94e:	4603      	mov	r3, r0
 800c950:	4a05      	ldr	r2, [pc, #20]	; (800c968 <check_fs+0xa8>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d101      	bne.n	800c95a <check_fs+0x9a>
 800c956:	2300      	movs	r3, #0
 800c958:	e000      	b.n	800c95c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c95a:	2302      	movs	r3, #2
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	00544146 	.word	0x00544146
 800c968:	33544146 	.word	0x33544146

0800c96c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b096      	sub	sp, #88	; 0x58
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	4613      	mov	r3, r2
 800c978:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	2200      	movs	r2, #0
 800c97e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f7ff ff59 	bl	800c838 <get_ldnumber>
 800c986:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	da01      	bge.n	800c992 <find_volume+0x26>
 800c98e:	230b      	movs	r3, #11
 800c990:	e265      	b.n	800ce5e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c992:	4a9f      	ldr	r2, [pc, #636]	; (800cc10 <find_volume+0x2a4>)
 800c994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c99a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <find_volume+0x3a>
 800c9a2:	230c      	movs	r3, #12
 800c9a4:	e25b      	b.n	800ce5e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	f023 0301 	bic.w	r3, r3, #1
 800c9b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01a      	beq.n	800c9f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fe f8b5 	bl	800ab30 <disk_status>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c9cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10c      	bne.n	800c9f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d007      	beq.n	800c9ee <find_volume+0x82>
 800c9de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9e2:	f003 0304 	and.w	r3, r3, #4
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c9ea:	230a      	movs	r3, #10
 800c9ec:	e237      	b.n	800ce5e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	e235      	b.n	800ce5e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca02:	785b      	ldrb	r3, [r3, #1]
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fe f8ad 	bl	800ab64 <disk_initialize>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d001      	beq.n	800ca20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	e21e      	b.n	800ce5e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d007      	beq.n	800ca36 <find_volume+0xca>
 800ca26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca2a:	f003 0304 	and.w	r3, r3, #4
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ca32:	230a      	movs	r3, #10
 800ca34:	e213      	b.n	800ce5e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	7858      	ldrb	r0, [r3, #1]
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	330c      	adds	r3, #12
 800ca3e:	461a      	mov	r2, r3
 800ca40:	2102      	movs	r1, #2
 800ca42:	f7fe f8f5 	bl	800ac30 <disk_ioctl>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d001      	beq.n	800ca50 <find_volume+0xe4>
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e206      	b.n	800ce5e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	899b      	ldrh	r3, [r3, #12]
 800ca54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca58:	d80d      	bhi.n	800ca76 <find_volume+0x10a>
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	899b      	ldrh	r3, [r3, #12]
 800ca5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca62:	d308      	bcc.n	800ca76 <find_volume+0x10a>
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	899b      	ldrh	r3, [r3, #12]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	899b      	ldrh	r3, [r3, #12]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	4013      	ands	r3, r2
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <find_volume+0x10e>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e1f1      	b.n	800ce5e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca82:	f7ff ff1d 	bl	800c8c0 <check_fs>
 800ca86:	4603      	mov	r3, r0
 800ca88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d149      	bne.n	800cb28 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca94:	2300      	movs	r3, #0
 800ca96:	643b      	str	r3, [r7, #64]	; 0x40
 800ca98:	e01e      	b.n	800cad8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800caa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caa2:	011b      	lsls	r3, r3, #4
 800caa4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800caa8:	4413      	add	r3, r2
 800caaa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800caac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caae:	3304      	adds	r3, #4
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d006      	beq.n	800cac4 <find_volume+0x158>
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	3308      	adds	r3, #8
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe f8ee 	bl	800ac9c <ld_dword>
 800cac0:	4602      	mov	r2, r0
 800cac2:	e000      	b.n	800cac6 <find_volume+0x15a>
 800cac4:	2200      	movs	r2, #0
 800cac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	3358      	adds	r3, #88	; 0x58
 800cacc:	443b      	add	r3, r7
 800cace:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cad4:	3301      	adds	r3, #1
 800cad6:	643b      	str	r3, [r7, #64]	; 0x40
 800cad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d9dd      	bls.n	800ca9a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cade:	2300      	movs	r3, #0
 800cae0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <find_volume+0x182>
 800cae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caea:	3b01      	subs	r3, #1
 800caec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800caee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	3358      	adds	r3, #88	; 0x58
 800caf4:	443b      	add	r3, r7
 800caf6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cafa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d005      	beq.n	800cb0e <find_volume+0x1a2>
 800cb02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb06:	f7ff fedb 	bl	800c8c0 <check_fs>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	e000      	b.n	800cb10 <find_volume+0x1a4>
 800cb0e:	2303      	movs	r3, #3
 800cb10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d905      	bls.n	800cb28 <find_volume+0x1bc>
 800cb1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb1e:	3301      	adds	r3, #1
 800cb20:	643b      	str	r3, [r7, #64]	; 0x40
 800cb22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	d9e2      	bls.n	800caee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d101      	bne.n	800cb34 <find_volume+0x1c8>
 800cb30:	2301      	movs	r3, #1
 800cb32:	e194      	b.n	800ce5e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d901      	bls.n	800cb40 <find_volume+0x1d4>
 800cb3c:	230d      	movs	r3, #13
 800cb3e:	e18e      	b.n	800ce5e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	3338      	adds	r3, #56	; 0x38
 800cb44:	330b      	adds	r3, #11
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fe f890 	bl	800ac6c <ld_word>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	461a      	mov	r2, r3
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	899b      	ldrh	r3, [r3, #12]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d001      	beq.n	800cb5c <find_volume+0x1f0>
 800cb58:	230d      	movs	r3, #13
 800cb5a:	e180      	b.n	800ce5e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5e:	3338      	adds	r3, #56	; 0x38
 800cb60:	3316      	adds	r3, #22
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe f882 	bl	800ac6c <ld_word>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d106      	bne.n	800cb80 <find_volume+0x214>
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	3338      	adds	r3, #56	; 0x38
 800cb76:	3324      	adds	r3, #36	; 0x24
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe f88f 	bl	800ac9c <ld_dword>
 800cb7e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb84:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	789b      	ldrb	r3, [r3, #2]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d005      	beq.n	800cba4 <find_volume+0x238>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	789b      	ldrb	r3, [r3, #2]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d001      	beq.n	800cba4 <find_volume+0x238>
 800cba0:	230d      	movs	r3, #13
 800cba2:	e15c      	b.n	800ce5e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	789b      	ldrb	r3, [r3, #2]
 800cba8:	461a      	mov	r2, r3
 800cbaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbac:	fb02 f303 	mul.w	r3, r2, r3
 800cbb0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	895b      	ldrh	r3, [r3, #10]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d008      	beq.n	800cbd8 <find_volume+0x26c>
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	895b      	ldrh	r3, [r3, #10]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	895b      	ldrh	r3, [r3, #10]
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	4013      	ands	r3, r2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d001      	beq.n	800cbdc <find_volume+0x270>
 800cbd8:	230d      	movs	r3, #13
 800cbda:	e140      	b.n	800ce5e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	3338      	adds	r3, #56	; 0x38
 800cbe0:	3311      	adds	r3, #17
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe f842 	bl	800ac6c <ld_word>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	461a      	mov	r2, r3
 800cbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	891b      	ldrh	r3, [r3, #8]
 800cbf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbf6:	8992      	ldrh	r2, [r2, #12]
 800cbf8:	0952      	lsrs	r2, r2, #5
 800cbfa:	b292      	uxth	r2, r2
 800cbfc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc00:	fb01 f202 	mul.w	r2, r1, r2
 800cc04:	1a9b      	subs	r3, r3, r2
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d003      	beq.n	800cc14 <find_volume+0x2a8>
 800cc0c:	230d      	movs	r3, #13
 800cc0e:	e126      	b.n	800ce5e <find_volume+0x4f2>
 800cc10:	20002ebc 	.word	0x20002ebc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	3338      	adds	r3, #56	; 0x38
 800cc18:	3313      	adds	r3, #19
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fe f826 	bl	800ac6c <ld_word>
 800cc20:	4603      	mov	r3, r0
 800cc22:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <find_volume+0x2cc>
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	3338      	adds	r3, #56	; 0x38
 800cc2e:	3320      	adds	r3, #32
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fe f833 	bl	800ac9c <ld_dword>
 800cc36:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	3338      	adds	r3, #56	; 0x38
 800cc3c:	330e      	adds	r3, #14
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe f814 	bl	800ac6c <ld_word>
 800cc44:	4603      	mov	r3, r0
 800cc46:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d101      	bne.n	800cc52 <find_volume+0x2e6>
 800cc4e:	230d      	movs	r3, #13
 800cc50:	e105      	b.n	800ce5e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc56:	4413      	add	r3, r2
 800cc58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc5a:	8911      	ldrh	r1, [r2, #8]
 800cc5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc5e:	8992      	ldrh	r2, [r2, #12]
 800cc60:	0952      	lsrs	r2, r2, #5
 800cc62:	b292      	uxth	r2, r2
 800cc64:	fbb1 f2f2 	udiv	r2, r1, r2
 800cc68:	b292      	uxth	r2, r2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cc6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d201      	bcs.n	800cc7a <find_volume+0x30e>
 800cc76:	230d      	movs	r3, #13
 800cc78:	e0f1      	b.n	800ce5e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cc7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc82:	8952      	ldrh	r2, [r2, #10]
 800cc84:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d101      	bne.n	800cc94 <find_volume+0x328>
 800cc90:	230d      	movs	r3, #13
 800cc92:	e0e4      	b.n	800ce5e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800cc94:	2303      	movs	r3, #3
 800cc96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d802      	bhi.n	800ccaa <find_volume+0x33e>
 800cca4:	2302      	movs	r3, #2
 800cca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d802      	bhi.n	800ccba <find_volume+0x34e>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	1c9a      	adds	r2, r3, #2
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccc6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ccc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ccca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cccc:	441a      	add	r2, r3
 800ccce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ccd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd6:	441a      	add	r2, r3
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccda:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ccdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cce0:	2b03      	cmp	r3, #3
 800cce2:	d11e      	bne.n	800cd22 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce6:	3338      	adds	r3, #56	; 0x38
 800cce8:	332a      	adds	r3, #42	; 0x2a
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fd ffbe 	bl	800ac6c <ld_word>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d001      	beq.n	800ccfa <find_volume+0x38e>
 800ccf6:	230d      	movs	r3, #13
 800ccf8:	e0b1      	b.n	800ce5e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfc:	891b      	ldrh	r3, [r3, #8]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d001      	beq.n	800cd06 <find_volume+0x39a>
 800cd02:	230d      	movs	r3, #13
 800cd04:	e0ab      	b.n	800ce5e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd08:	3338      	adds	r3, #56	; 0x38
 800cd0a:	332c      	adds	r3, #44	; 0x2c
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fd ffc5 	bl	800ac9c <ld_dword>
 800cd12:	4602      	mov	r2, r0
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1a:	69db      	ldr	r3, [r3, #28]
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	647b      	str	r3, [r7, #68]	; 0x44
 800cd20:	e01f      	b.n	800cd62 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd24:	891b      	ldrh	r3, [r3, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d101      	bne.n	800cd2e <find_volume+0x3c2>
 800cd2a:	230d      	movs	r3, #13
 800cd2c:	e097      	b.n	800ce5e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd34:	441a      	add	r2, r3
 800cd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd38:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d103      	bne.n	800cd4a <find_volume+0x3de>
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	69db      	ldr	r3, [r3, #28]
 800cd46:	005b      	lsls	r3, r3, #1
 800cd48:	e00a      	b.n	800cd60 <find_volume+0x3f4>
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	69da      	ldr	r2, [r3, #28]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	4413      	add	r3, r2
 800cd54:	085a      	lsrs	r2, r3, #1
 800cd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd58:	69db      	ldr	r3, [r3, #28]
 800cd5a:	f003 0301 	and.w	r3, r3, #1
 800cd5e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd60:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	6a1a      	ldr	r2, [r3, #32]
 800cd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd68:	899b      	ldrh	r3, [r3, #12]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd6e:	440b      	add	r3, r1
 800cd70:	3b01      	subs	r3, #1
 800cd72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd74:	8989      	ldrh	r1, [r1, #12]
 800cd76:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d201      	bcs.n	800cd82 <find_volume+0x416>
 800cd7e:	230d      	movs	r3, #13
 800cd80:	e06d      	b.n	800ce5e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	f04f 32ff 	mov.w	r2, #4294967295
 800cd88:	619a      	str	r2, [r3, #24]
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8c:	699a      	ldr	r2, [r3, #24]
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd90:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	2280      	movs	r2, #128	; 0x80
 800cd96:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cd98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd9c:	2b03      	cmp	r3, #3
 800cd9e:	d149      	bne.n	800ce34 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	3338      	adds	r3, #56	; 0x38
 800cda4:	3330      	adds	r3, #48	; 0x30
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fd ff60 	bl	800ac6c <ld_word>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d140      	bne.n	800ce34 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdba:	f7fe fa07 	bl	800b1cc <move_window>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d137      	bne.n	800ce34 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	3338      	adds	r3, #56	; 0x38
 800cdce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fd ff4a 	bl	800ac6c <ld_word>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	461a      	mov	r2, r3
 800cddc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d127      	bne.n	800ce34 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	3338      	adds	r3, #56	; 0x38
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fd ff57 	bl	800ac9c <ld_dword>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	4a1d      	ldr	r2, [pc, #116]	; (800ce68 <find_volume+0x4fc>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d11e      	bne.n	800ce34 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	3338      	adds	r3, #56	; 0x38
 800cdfa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fd ff4c 	bl	800ac9c <ld_dword>
 800ce04:	4603      	mov	r3, r0
 800ce06:	4a19      	ldr	r2, [pc, #100]	; (800ce6c <find_volume+0x500>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d113      	bne.n	800ce34 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	3338      	adds	r3, #56	; 0x38
 800ce10:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fd ff41 	bl	800ac9c <ld_dword>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	3338      	adds	r3, #56	; 0x38
 800ce24:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fd ff37 	bl	800ac9c <ld_dword>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce32:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ce3a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce3c:	4b0c      	ldr	r3, [pc, #48]	; (800ce70 <find_volume+0x504>)
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	3301      	adds	r3, #1
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <find_volume+0x504>)
 800ce46:	801a      	strh	r2, [r3, #0]
 800ce48:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <find_volume+0x504>)
 800ce4a:	881a      	ldrh	r2, [r3, #0]
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ce50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce52:	4a08      	ldr	r2, [pc, #32]	; (800ce74 <find_volume+0x508>)
 800ce54:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce58:	f7fe f950 	bl	800b0fc <clear_lock>
#endif
	return FR_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3758      	adds	r7, #88	; 0x58
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	41615252 	.word	0x41615252
 800ce6c:	61417272 	.word	0x61417272
 800ce70:	20002ec0 	.word	0x20002ec0
 800ce74:	20002ee4 	.word	0x20002ee4

0800ce78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ce82:	2309      	movs	r3, #9
 800ce84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d01c      	beq.n	800cec6 <validate+0x4e>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d018      	beq.n	800cec6 <validate+0x4e>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d013      	beq.n	800cec6 <validate+0x4e>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	889a      	ldrh	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	88db      	ldrh	r3, [r3, #6]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d10c      	bne.n	800cec6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	785b      	ldrb	r3, [r3, #1]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fd fe3c 	bl	800ab30 <disk_status>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <validate+0x4e>
			res = FR_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <validate+0x5a>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	e000      	b.n	800ced4 <validate+0x5c>
 800ced2:	2300      	movs	r3, #0
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	6013      	str	r3, [r2, #0]
	return res;
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3710      	adds	r7, #16
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	4613      	mov	r3, r2
 800cef0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cef6:	f107 0310 	add.w	r3, r7, #16
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7ff fc9c 	bl	800c838 <get_ldnumber>
 800cf00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	da01      	bge.n	800cf0c <f_mount+0x28>
 800cf08:	230b      	movs	r3, #11
 800cf0a:	e02b      	b.n	800cf64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf0c:	4a17      	ldr	r2, [pc, #92]	; (800cf6c <f_mount+0x88>)
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d005      	beq.n	800cf28 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf1c:	69b8      	ldr	r0, [r7, #24]
 800cf1e:	f7fe f8ed 	bl	800b0fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	2200      	movs	r2, #0
 800cf26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	490d      	ldr	r1, [pc, #52]	; (800cf6c <f_mount+0x88>)
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <f_mount+0x66>
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d001      	beq.n	800cf4e <f_mount+0x6a>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e00a      	b.n	800cf64 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf4e:	f107 010c 	add.w	r1, r7, #12
 800cf52:	f107 0308 	add.w	r3, r7, #8
 800cf56:	2200      	movs	r2, #0
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff fd07 	bl	800c96c <find_volume>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3720      	adds	r7, #32
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20002ebc 	.word	0x20002ebc

0800cf70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b09a      	sub	sp, #104	; 0x68
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <f_open+0x18>
 800cf84:	2309      	movs	r3, #9
 800cf86:	e1bb      	b.n	800d300 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cf88:	79fb      	ldrb	r3, [r7, #7]
 800cf8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf8e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cf90:	79fa      	ldrb	r2, [r7, #7]
 800cf92:	f107 0114 	add.w	r1, r7, #20
 800cf96:	f107 0308 	add.w	r3, r7, #8
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff fce6 	bl	800c96c <find_volume>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cfa6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f040 819f 	bne.w	800d2ee <f_open+0x37e>
		dj.obj.fs = fs;
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	f107 0318 	add.w	r3, r7, #24
 800cfba:	4611      	mov	r1, r2
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7ff fbc5 	bl	800c74c <follow_path>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cfc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d11a      	bne.n	800d006 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cfd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cfd4:	b25b      	sxtb	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	da03      	bge.n	800cfe2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cfda:	2306      	movs	r3, #6
 800cfdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cfe0:	e011      	b.n	800d006 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	f023 0301 	bic.w	r3, r3, #1
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	bf14      	ite	ne
 800cfec:	2301      	movne	r3, #1
 800cfee:	2300      	moveq	r3, #0
 800cff0:	b2db      	uxtb	r3, r3
 800cff2:	461a      	mov	r2, r3
 800cff4:	f107 0318 	add.w	r3, r7, #24
 800cff8:	4611      	mov	r1, r2
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fd ff36 	bl	800ae6c <chk_lock>
 800d000:	4603      	mov	r3, r0
 800d002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	f003 031c 	and.w	r3, r3, #28
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d07f      	beq.n	800d110 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d010:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d014:	2b00      	cmp	r3, #0
 800d016:	d017      	beq.n	800d048 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d018:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d10e      	bne.n	800d03e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d020:	f7fd ff80 	bl	800af24 <enq_lock>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d006      	beq.n	800d038 <f_open+0xc8>
 800d02a:	f107 0318 	add.w	r3, r7, #24
 800d02e:	4618      	mov	r0, r3
 800d030:	f7ff f8dc 	bl	800c1ec <dir_register>
 800d034:	4603      	mov	r3, r0
 800d036:	e000      	b.n	800d03a <f_open+0xca>
 800d038:	2312      	movs	r3, #18
 800d03a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	f043 0308 	orr.w	r3, r3, #8
 800d044:	71fb      	strb	r3, [r7, #7]
 800d046:	e010      	b.n	800d06a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d048:	7fbb      	ldrb	r3, [r7, #30]
 800d04a:	f003 0311 	and.w	r3, r3, #17
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d003      	beq.n	800d05a <f_open+0xea>
					res = FR_DENIED;
 800d052:	2307      	movs	r3, #7
 800d054:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d058:	e007      	b.n	800d06a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	f003 0304 	and.w	r3, r3, #4
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <f_open+0xfa>
 800d064:	2308      	movs	r3, #8
 800d066:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d06a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d168      	bne.n	800d144 <f_open+0x1d4>
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	f003 0308 	and.w	r3, r3, #8
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d063      	beq.n	800d144 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d07c:	f7fd fcf6 	bl	800aa6c <get_fattime>
 800d080:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d084:	330e      	adds	r3, #14
 800d086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fd fe45 	bl	800ad18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d090:	3316      	adds	r3, #22
 800d092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d094:	4618      	mov	r0, r3
 800d096:	f7fd fe3f 	bl	800ad18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	330b      	adds	r3, #11
 800d09e:	2220      	movs	r2, #32
 800d0a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe fe17 	bl	800bcdc <ld_clust>
 800d0ae:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fe fe2f 	bl	800bd1a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0be:	331c      	adds	r3, #28
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fd fe28 	bl	800ad18 <st_dword>
					fs->wflag = 1;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d0ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d037      	beq.n	800d144 <f_open+0x1d4>
						dw = fs->winsect;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d0da:	f107 0318 	add.w	r3, r7, #24
 800d0de:	2200      	movs	r2, #0
 800d0e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe fb1f 	bl	800b726 <remove_chain>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d0ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d126      	bne.n	800d144 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe f866 	bl	800b1cc <move_window>
 800d100:	4603      	mov	r3, r0
 800d102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d10a:	3a01      	subs	r2, #1
 800d10c:	615a      	str	r2, [r3, #20]
 800d10e:	e019      	b.n	800d144 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d110:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d114:	2b00      	cmp	r3, #0
 800d116:	d115      	bne.n	800d144 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d118:	7fbb      	ldrb	r3, [r7, #30]
 800d11a:	f003 0310 	and.w	r3, r3, #16
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <f_open+0x1ba>
					res = FR_NO_FILE;
 800d122:	2304      	movs	r3, #4
 800d124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d128:	e00c      	b.n	800d144 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d12a:	79fb      	ldrb	r3, [r7, #7]
 800d12c:	f003 0302 	and.w	r3, r3, #2
 800d130:	2b00      	cmp	r3, #0
 800d132:	d007      	beq.n	800d144 <f_open+0x1d4>
 800d134:	7fbb      	ldrb	r3, [r7, #30]
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <f_open+0x1d4>
						res = FR_DENIED;
 800d13e:	2307      	movs	r3, #7
 800d140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d128      	bne.n	800d19e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d14c:	79fb      	ldrb	r3, [r7, #7]
 800d14e:	f003 0308 	and.w	r3, r3, #8
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d156:	79fb      	ldrb	r3, [r7, #7]
 800d158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d15c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d16c:	79fb      	ldrb	r3, [r7, #7]
 800d16e:	f023 0301 	bic.w	r3, r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	bf14      	ite	ne
 800d176:	2301      	movne	r3, #1
 800d178:	2300      	moveq	r3, #0
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	461a      	mov	r2, r3
 800d17e:	f107 0318 	add.w	r3, r7, #24
 800d182:	4611      	mov	r1, r2
 800d184:	4618      	mov	r0, r3
 800d186:	f7fd feef 	bl	800af68 <inc_lock>
 800d18a:	4602      	mov	r2, r0
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d102      	bne.n	800d19e <f_open+0x22e>
 800d198:	2302      	movs	r3, #2
 800d19a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d19e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f040 80a3 	bne.w	800d2ee <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fe fd94 	bl	800bcdc <ld_clust>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	331c      	adds	r3, #28
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fd fd6c 	bl	800ac9c <ld_dword>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	88da      	ldrh	r2, [r3, #6]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	79fa      	ldrb	r2, [r7, #7]
 800d1e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3330      	adds	r3, #48	; 0x30
 800d1fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d1fe:	2100      	movs	r1, #0
 800d200:	4618      	mov	r0, r3
 800d202:	f7fd fdd6 	bl	800adb2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d206:	79fb      	ldrb	r3, [r7, #7]
 800d208:	f003 0320 	and.w	r3, r3, #32
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d06e      	beq.n	800d2ee <f_open+0x37e>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d06a      	beq.n	800d2ee <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	68da      	ldr	r2, [r3, #12]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	895b      	ldrh	r3, [r3, #10]
 800d224:	461a      	mov	r2, r3
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	899b      	ldrh	r3, [r3, #12]
 800d22a:	fb02 f303 	mul.w	r3, r2, r3
 800d22e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d23c:	e016      	b.n	800d26c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d242:	4618      	mov	r0, r3
 800d244:	f7fe f87f 	bl	800b346 <get_fat>
 800d248:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d24a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d802      	bhi.n	800d256 <f_open+0x2e6>
 800d250:	2302      	movs	r3, #2
 800d252:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25c:	d102      	bne.n	800d264 <f_open+0x2f4>
 800d25e:	2301      	movs	r3, #1
 800d260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d264:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d26c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <f_open+0x30c>
 800d274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d278:	429a      	cmp	r2, r3
 800d27a:	d8e0      	bhi.n	800d23e <f_open+0x2ce>
				}
				fp->clust = clst;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d280:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d282:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d286:	2b00      	cmp	r3, #0
 800d288:	d131      	bne.n	800d2ee <f_open+0x37e>
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	899b      	ldrh	r3, [r3, #12]
 800d28e:	461a      	mov	r2, r3
 800d290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d292:	fbb3 f1f2 	udiv	r1, r3, r2
 800d296:	fb01 f202 	mul.w	r2, r1, r2
 800d29a:	1a9b      	subs	r3, r3, r2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d026      	beq.n	800d2ee <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fe f82f 	bl	800b308 <clust2sect>
 800d2aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d103      	bne.n	800d2ba <f_open+0x34a>
						res = FR_INT_ERR;
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d2b8:	e019      	b.n	800d2ee <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	899b      	ldrh	r3, [r3, #12]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c8:	441a      	add	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	7858      	ldrb	r0, [r3, #1]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6a1a      	ldr	r2, [r3, #32]
 800d2dc:	2301      	movs	r3, #1
 800d2de:	f7fd fc67 	bl	800abb0 <disk_read>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <f_open+0x37e>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d2ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <f_open+0x38c>
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d2fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d300:	4618      	mov	r0, r3
 800d302:	3768      	adds	r7, #104	; 0x68
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08c      	sub	sp, #48	; 0x30
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
 800d314:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2200      	movs	r2, #0
 800d31e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f107 0210 	add.w	r2, r7, #16
 800d326:	4611      	mov	r1, r2
 800d328:	4618      	mov	r0, r3
 800d32a:	f7ff fda5 	bl	800ce78 <validate>
 800d32e:	4603      	mov	r3, r0
 800d330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d107      	bne.n	800d34c <f_write+0x44>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	7d5b      	ldrb	r3, [r3, #21]
 800d340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d002      	beq.n	800d352 <f_write+0x4a>
 800d34c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d350:	e16a      	b.n	800d628 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	7d1b      	ldrb	r3, [r3, #20]
 800d356:	f003 0302 	and.w	r3, r3, #2
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <f_write+0x5a>
 800d35e:	2307      	movs	r3, #7
 800d360:	e162      	b.n	800d628 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	699a      	ldr	r2, [r3, #24]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	441a      	add	r2, r3
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	699b      	ldr	r3, [r3, #24]
 800d36e:	429a      	cmp	r2, r3
 800d370:	f080 814c 	bcs.w	800d60c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	43db      	mvns	r3, r3
 800d37a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d37c:	e146      	b.n	800d60c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	693a      	ldr	r2, [r7, #16]
 800d384:	8992      	ldrh	r2, [r2, #12]
 800d386:	fbb3 f1f2 	udiv	r1, r3, r2
 800d38a:	fb01 f202 	mul.w	r2, r1, r2
 800d38e:	1a9b      	subs	r3, r3, r2
 800d390:	2b00      	cmp	r3, #0
 800d392:	f040 80f1 	bne.w	800d578 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	699b      	ldr	r3, [r3, #24]
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	8992      	ldrh	r2, [r2, #12]
 800d39e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	8952      	ldrh	r2, [r2, #10]
 800d3a6:	3a01      	subs	r2, #1
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d143      	bne.n	800d43a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10c      	bne.n	800d3d4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d11a      	bne.n	800d3fc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fa10 	bl	800b7f0 <create_chain>
 800d3d0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d3d2:	e013      	b.n	800d3fc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d007      	beq.n	800d3ec <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f7fe fa9c 	bl	800b920 <clmt_clust>
 800d3e8:	62b8      	str	r0, [r7, #40]	; 0x28
 800d3ea:	e007      	b.n	800d3fc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	69db      	ldr	r3, [r3, #28]
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	4610      	mov	r0, r2
 800d3f6:	f7fe f9fb 	bl	800b7f0 <create_chain>
 800d3fa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 8109 	beq.w	800d616 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	2b01      	cmp	r3, #1
 800d408:	d104      	bne.n	800d414 <f_write+0x10c>
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2202      	movs	r2, #2
 800d40e:	755a      	strb	r2, [r3, #21]
 800d410:	2302      	movs	r3, #2
 800d412:	e109      	b.n	800d628 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41a:	d104      	bne.n	800d426 <f_write+0x11e>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2201      	movs	r2, #1
 800d420:	755a      	strb	r2, [r3, #21]
 800d422:	2301      	movs	r3, #1
 800d424:	e100      	b.n	800d628 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d42a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d102      	bne.n	800d43a <f_write+0x132>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d438:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	7d1b      	ldrb	r3, [r3, #20]
 800d43e:	b25b      	sxtb	r3, r3
 800d440:	2b00      	cmp	r3, #0
 800d442:	da18      	bge.n	800d476 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	7858      	ldrb	r0, [r3, #1]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6a1a      	ldr	r2, [r3, #32]
 800d452:	2301      	movs	r3, #1
 800d454:	f7fd fbcc 	bl	800abf0 <disk_write>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d004      	beq.n	800d468 <f_write+0x160>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2201      	movs	r2, #1
 800d462:	755a      	strb	r2, [r3, #21]
 800d464:	2301      	movs	r3, #1
 800d466:	e0df      	b.n	800d628 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	7d1b      	ldrb	r3, [r3, #20]
 800d46c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d470:	b2da      	uxtb	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	69db      	ldr	r3, [r3, #28]
 800d47c:	4619      	mov	r1, r3
 800d47e:	4610      	mov	r0, r2
 800d480:	f7fd ff42 	bl	800b308 <clust2sect>
 800d484:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d104      	bne.n	800d496 <f_write+0x18e>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2202      	movs	r2, #2
 800d490:	755a      	strb	r2, [r3, #21]
 800d492:	2302      	movs	r3, #2
 800d494:	e0c8      	b.n	800d628 <f_write+0x320>
			sect += csect;
 800d496:	697a      	ldr	r2, [r7, #20]
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	4413      	add	r3, r2
 800d49c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	899b      	ldrh	r3, [r3, #12]
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4aa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d043      	beq.n	800d53a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d4b2:	69ba      	ldr	r2, [r7, #24]
 800d4b4:	6a3b      	ldr	r3, [r7, #32]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	693a      	ldr	r2, [r7, #16]
 800d4ba:	8952      	ldrh	r2, [r2, #10]
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d905      	bls.n	800d4cc <f_write+0x1c4>
					cc = fs->csize - csect;
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	895b      	ldrh	r3, [r3, #10]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	7858      	ldrb	r0, [r3, #1]
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	69f9      	ldr	r1, [r7, #28]
 800d4d6:	f7fd fb8b 	bl	800abf0 <disk_write>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <f_write+0x1e2>
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	755a      	strb	r2, [r3, #21]
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e09e      	b.n	800d628 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6a1a      	ldr	r2, [r3, #32]
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	6a3a      	ldr	r2, [r7, #32]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d918      	bls.n	800d52a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6a1a      	ldr	r2, [r3, #32]
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	1ad3      	subs	r3, r2, r3
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	8992      	ldrh	r2, [r2, #12]
 800d50a:	fb02 f303 	mul.w	r3, r2, r3
 800d50e:	69fa      	ldr	r2, [r7, #28]
 800d510:	18d1      	adds	r1, r2, r3
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	899b      	ldrh	r3, [r3, #12]
 800d516:	461a      	mov	r2, r3
 800d518:	f7fd fc2a 	bl	800ad70 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d524:	b2da      	uxtb	r2, r3
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	899b      	ldrh	r3, [r3, #12]
 800d52e:	461a      	mov	r2, r3
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	fb02 f303 	mul.w	r3, r2, r3
 800d536:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d538:	e04b      	b.n	800d5d2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	429a      	cmp	r2, r3
 800d542:	d016      	beq.n	800d572 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	699a      	ldr	r2, [r3, #24]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d210      	bcs.n	800d572 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	7858      	ldrb	r0, [r3, #1]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d55a:	2301      	movs	r3, #1
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	f7fd fb27 	bl	800abb0 <disk_read>
 800d562:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d564:	2b00      	cmp	r3, #0
 800d566:	d004      	beq.n	800d572 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2201      	movs	r2, #1
 800d56c:	755a      	strb	r2, [r3, #21]
 800d56e:	2301      	movs	r3, #1
 800d570:	e05a      	b.n	800d628 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	697a      	ldr	r2, [r7, #20]
 800d576:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	899b      	ldrh	r3, [r3, #12]
 800d57c:	4618      	mov	r0, r3
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	699b      	ldr	r3, [r3, #24]
 800d582:	693a      	ldr	r2, [r7, #16]
 800d584:	8992      	ldrh	r2, [r2, #12]
 800d586:	fbb3 f1f2 	udiv	r1, r3, r2
 800d58a:	fb01 f202 	mul.w	r2, r1, r2
 800d58e:	1a9b      	subs	r3, r3, r2
 800d590:	1ac3      	subs	r3, r0, r3
 800d592:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d901      	bls.n	800d5a0 <f_write+0x298>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	693a      	ldr	r2, [r7, #16]
 800d5ac:	8992      	ldrh	r2, [r2, #12]
 800d5ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800d5b2:	fb00 f202 	mul.w	r2, r0, r2
 800d5b6:	1a9b      	subs	r3, r3, r2
 800d5b8:	440b      	add	r3, r1
 800d5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5bc:	69f9      	ldr	r1, [r7, #28]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fd fbd6 	bl	800ad70 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	7d1b      	ldrb	r3, [r3, #20]
 800d5c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d5d2:	69fa      	ldr	r2, [r7, #28]
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d6:	4413      	add	r3, r2
 800d5d8:	61fb      	str	r3, [r7, #28]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	699a      	ldr	r2, [r3, #24]
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	441a      	add	r2, r3
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	619a      	str	r2, [r3, #24]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	68da      	ldr	r2, [r3, #12]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	bf38      	it	cc
 800d5f2:	461a      	movcc	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	60da      	str	r2, [r3, #12]
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	681a      	ldr	r2, [r3, #0]
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	441a      	add	r2, r3
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f47f aeb5 	bne.w	800d37e <f_write+0x76>
 800d614:	e000      	b.n	800d618 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d616:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d620:	b2da      	uxtb	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3730      	adds	r7, #48	; 0x30
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f107 0208 	add.w	r2, r7, #8
 800d63e:	4611      	mov	r1, r2
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff fc19 	bl	800ce78 <validate>
 800d646:	4603      	mov	r3, r0
 800d648:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d168      	bne.n	800d722 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	7d1b      	ldrb	r3, [r3, #20]
 800d654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d062      	beq.n	800d722 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	7d1b      	ldrb	r3, [r3, #20]
 800d660:	b25b      	sxtb	r3, r3
 800d662:	2b00      	cmp	r3, #0
 800d664:	da15      	bge.n	800d692 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	7858      	ldrb	r0, [r3, #1]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6a1a      	ldr	r2, [r3, #32]
 800d674:	2301      	movs	r3, #1
 800d676:	f7fd fabb 	bl	800abf0 <disk_write>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <f_sync+0x54>
 800d680:	2301      	movs	r3, #1
 800d682:	e04f      	b.n	800d724 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	7d1b      	ldrb	r3, [r3, #20]
 800d688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d68c:	b2da      	uxtb	r2, r3
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d692:	f7fd f9eb 	bl	800aa6c <get_fattime>
 800d696:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69e:	4619      	mov	r1, r3
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	f7fd fd93 	bl	800b1cc <move_window>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d138      	bne.n	800d722 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	330b      	adds	r3, #11
 800d6ba:	781a      	ldrb	r2, [r3, #0]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	330b      	adds	r3, #11
 800d6c0:	f042 0220 	orr.w	r2, r2, #32
 800d6c4:	b2d2      	uxtb	r2, r2
 800d6c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6818      	ldr	r0, [r3, #0]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	68f9      	ldr	r1, [r7, #12]
 800d6d4:	f7fe fb21 	bl	800bd1a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f103 021c 	add.w	r2, r3, #28
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4610      	mov	r0, r2
 800d6e6:	f7fd fb17 	bl	800ad18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	3316      	adds	r3, #22
 800d6ee:	6939      	ldr	r1, [r7, #16]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fd fb11 	bl	800ad18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3312      	adds	r3, #18
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fd faf0 	bl	800ace2 <st_word>
					fs->wflag = 1;
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2201      	movs	r2, #1
 800d706:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fd fd8c 	bl	800b228 <sync_fs>
 800d710:	4603      	mov	r3, r0
 800d712:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	7d1b      	ldrb	r3, [r3, #20]
 800d718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d722:	7dfb      	ldrb	r3, [r7, #23]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3718      	adds	r7, #24
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff ff7b 	bl	800d630 <f_sync>
 800d73a:	4603      	mov	r3, r0
 800d73c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d73e:	7bfb      	ldrb	r3, [r7, #15]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d118      	bne.n	800d776 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f107 0208 	add.w	r2, r7, #8
 800d74a:	4611      	mov	r1, r2
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff fb93 	bl	800ce78 <validate>
 800d752:	4603      	mov	r3, r0
 800d754:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d756:	7bfb      	ldrb	r3, [r7, #15]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10c      	bne.n	800d776 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	4618      	mov	r0, r3
 800d762:	f7fd fc8f 	bl	800b084 <dec_lock>
 800d766:	4603      	mov	r3, r0
 800d768:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d102      	bne.n	800d776 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d776:	7bfb      	ldrb	r3, [r7, #15]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b090      	sub	sp, #64	; 0x40
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f107 0208 	add.w	r2, r7, #8
 800d790:	4611      	mov	r1, r2
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff fb70 	bl	800ce78 <validate>
 800d798:	4603      	mov	r3, r0
 800d79a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d79e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d103      	bne.n	800d7ae <f_lseek+0x2e>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	7d5b      	ldrb	r3, [r3, #21]
 800d7aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d7ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d002      	beq.n	800d7bc <f_lseek+0x3c>
 800d7b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d7ba:	e201      	b.n	800dbc0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 80d9 	beq.w	800d978 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7cc:	d15a      	bne.n	800d884 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d6:	1d1a      	adds	r2, r3, #4
 800d7d8:	627a      	str	r2, [r7, #36]	; 0x24
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	617b      	str	r3, [r7, #20]
 800d7de:	2302      	movs	r3, #2
 800d7e0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d03a      	beq.n	800d864 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	613b      	str	r3, [r7, #16]
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f8:	3302      	adds	r3, #2
 800d7fa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	60fb      	str	r3, [r7, #12]
 800d800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d802:	3301      	adds	r3, #1
 800d804:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fd fd9b 	bl	800b346 <get_fat>
 800d810:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d814:	2b01      	cmp	r3, #1
 800d816:	d804      	bhi.n	800d822 <f_lseek+0xa2>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2202      	movs	r2, #2
 800d81c:	755a      	strb	r2, [r3, #21]
 800d81e:	2302      	movs	r3, #2
 800d820:	e1ce      	b.n	800dbc0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d828:	d104      	bne.n	800d834 <f_lseek+0xb4>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	755a      	strb	r2, [r3, #21]
 800d830:	2301      	movs	r3, #1
 800d832:	e1c5      	b.n	800dbc0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	3301      	adds	r3, #1
 800d838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d0de      	beq.n	800d7fc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d83e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	429a      	cmp	r2, r3
 800d844:	d809      	bhi.n	800d85a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d848:	1d1a      	adds	r2, r3, #4
 800d84a:	627a      	str	r2, [r7, #36]	; 0x24
 800d84c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	1d1a      	adds	r2, r3, #4
 800d854:	627a      	str	r2, [r7, #36]	; 0x24
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	69db      	ldr	r3, [r3, #28]
 800d85e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d860:	429a      	cmp	r2, r3
 800d862:	d3c4      	bcc.n	800d7ee <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d86a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d86c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	429a      	cmp	r2, r3
 800d872:	d803      	bhi.n	800d87c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	2200      	movs	r2, #0
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	e19f      	b.n	800dbbc <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d87c:	2311      	movs	r3, #17
 800d87e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d882:	e19b      	b.n	800dbbc <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d902      	bls.n	800d894 <f_lseek+0x114>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f000 818d 	beq.w	800dbbc <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7fe f839 	bl	800b920 <clmt_clust>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	4610      	mov	r0, r2
 800d8be:	f7fd fd23 	bl	800b308 <clust2sect>
 800d8c2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d104      	bne.n	800d8d4 <f_lseek+0x154>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2202      	movs	r2, #2
 800d8ce:	755a      	strb	r2, [r3, #21]
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	e175      	b.n	800dbc0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	8992      	ldrh	r2, [r2, #12]
 800d8dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	8952      	ldrh	r2, [r2, #10]
 800d8e4:	3a01      	subs	r2, #1
 800d8e6:	4013      	ands	r3, r2
 800d8e8:	69ba      	ldr	r2, [r7, #24]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	8992      	ldrh	r2, [r2, #12]
 800d8f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8fa:	fb01 f202 	mul.w	r2, r1, r2
 800d8fe:	1a9b      	subs	r3, r3, r2
 800d900:	2b00      	cmp	r3, #0
 800d902:	f000 815b 	beq.w	800dbbc <f_lseek+0x43c>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	69ba      	ldr	r2, [r7, #24]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	f000 8155 	beq.w	800dbbc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	7d1b      	ldrb	r3, [r3, #20]
 800d916:	b25b      	sxtb	r3, r3
 800d918:	2b00      	cmp	r3, #0
 800d91a:	da18      	bge.n	800d94e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	7858      	ldrb	r0, [r3, #1]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6a1a      	ldr	r2, [r3, #32]
 800d92a:	2301      	movs	r3, #1
 800d92c:	f7fd f960 	bl	800abf0 <disk_write>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d004      	beq.n	800d940 <f_lseek+0x1c0>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	755a      	strb	r2, [r3, #21]
 800d93c:	2301      	movs	r3, #1
 800d93e:	e13f      	b.n	800dbc0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	7d1b      	ldrb	r3, [r3, #20]
 800d944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	7858      	ldrb	r0, [r3, #1]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d958:	2301      	movs	r3, #1
 800d95a:	69ba      	ldr	r2, [r7, #24]
 800d95c:	f7fd f928 	bl	800abb0 <disk_read>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d004      	beq.n	800d970 <f_lseek+0x1f0>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	755a      	strb	r2, [r3, #21]
 800d96c:	2301      	movs	r3, #1
 800d96e:	e127      	b.n	800dbc0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	69ba      	ldr	r2, [r7, #24]
 800d974:	621a      	str	r2, [r3, #32]
 800d976:	e121      	b.n	800dbbc <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	683a      	ldr	r2, [r7, #0]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d908      	bls.n	800d994 <f_lseek+0x214>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	7d1b      	ldrb	r3, [r3, #20]
 800d986:	f003 0302 	and.w	r3, r3, #2
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d102      	bne.n	800d994 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	699b      	ldr	r3, [r3, #24]
 800d998:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	637b      	str	r3, [r7, #52]	; 0x34
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9a2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 80b5 	beq.w	800db16 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	895b      	ldrh	r3, [r3, #10]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	899b      	ldrh	r3, [r3, #12]
 800d9b6:	fb02 f303 	mul.w	r3, r2, r3
 800d9ba:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d01b      	beq.n	800d9fa <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	1e5a      	subs	r2, r3, #1
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9cc:	6a3b      	ldr	r3, [r7, #32]
 800d9ce:	1e59      	subs	r1, r3, #1
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d30f      	bcc.n	800d9fa <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d9da:	6a3b      	ldr	r3, [r7, #32]
 800d9dc:	1e5a      	subs	r2, r3, #1
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	425b      	negs	r3, r3
 800d9e2:	401a      	ands	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	699b      	ldr	r3, [r3, #24]
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9f8:	e022      	b.n	800da40 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	689b      	ldr	r3, [r3, #8]
 800d9fe:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da02:	2b00      	cmp	r3, #0
 800da04:	d119      	bne.n	800da3a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2100      	movs	r1, #0
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd fef0 	bl	800b7f0 <create_chain>
 800da10:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	2b01      	cmp	r3, #1
 800da16:	d104      	bne.n	800da22 <f_lseek+0x2a2>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2202      	movs	r2, #2
 800da1c:	755a      	strb	r2, [r3, #21]
 800da1e:	2302      	movs	r3, #2
 800da20:	e0ce      	b.n	800dbc0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da28:	d104      	bne.n	800da34 <f_lseek+0x2b4>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	755a      	strb	r2, [r3, #21]
 800da30:	2301      	movs	r3, #1
 800da32:	e0c5      	b.n	800dbc0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da38:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da3e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800da40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da42:	2b00      	cmp	r3, #0
 800da44:	d067      	beq.n	800db16 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800da46:	e03a      	b.n	800dabe <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800da48:	683a      	ldr	r2, [r7, #0]
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	1ad3      	subs	r3, r2, r3
 800da4e:	603b      	str	r3, [r7, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	441a      	add	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	7d1b      	ldrb	r3, [r3, #20]
 800da60:	f003 0302 	and.w	r3, r3, #2
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00b      	beq.n	800da80 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7fd febf 	bl	800b7f0 <create_chain>
 800da72:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da76:	2b00      	cmp	r3, #0
 800da78:	d108      	bne.n	800da8c <f_lseek+0x30c>
							ofs = 0; break;
 800da7a:	2300      	movs	r3, #0
 800da7c:	603b      	str	r3, [r7, #0]
 800da7e:	e022      	b.n	800dac6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da84:	4618      	mov	r0, r3
 800da86:	f7fd fc5e 	bl	800b346 <get_fat>
 800da8a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da92:	d104      	bne.n	800da9e <f_lseek+0x31e>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	755a      	strb	r2, [r3, #21]
 800da9a:	2301      	movs	r3, #1
 800da9c:	e090      	b.n	800dbc0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d904      	bls.n	800daae <f_lseek+0x32e>
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daaa:	429a      	cmp	r2, r3
 800daac:	d304      	bcc.n	800dab8 <f_lseek+0x338>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2202      	movs	r2, #2
 800dab2:	755a      	strb	r2, [r3, #21]
 800dab4:	2302      	movs	r3, #2
 800dab6:	e083      	b.n	800dbc0 <f_lseek+0x440>
					fp->clust = clst;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dabc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d8c0      	bhi.n	800da48 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	699a      	ldr	r2, [r3, #24]
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	441a      	add	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	899b      	ldrh	r3, [r3, #12]
 800dad6:	461a      	mov	r2, r3
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	fbb3 f1f2 	udiv	r1, r3, r2
 800dade:	fb01 f202 	mul.w	r2, r1, r2
 800dae2:	1a9b      	subs	r3, r3, r2
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d016      	beq.n	800db16 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800daec:	4618      	mov	r0, r3
 800daee:	f7fd fc0b 	bl	800b308 <clust2sect>
 800daf2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800daf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d104      	bne.n	800db04 <f_lseek+0x384>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2202      	movs	r2, #2
 800dafe:	755a      	strb	r2, [r3, #21]
 800db00:	2302      	movs	r3, #2
 800db02:	e05d      	b.n	800dbc0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	899b      	ldrh	r3, [r3, #12]
 800db08:	461a      	mov	r2, r3
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800db10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db12:	4413      	add	r3, r2
 800db14:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	699a      	ldr	r2, [r3, #24]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d90a      	bls.n	800db38 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	699a      	ldr	r2, [r3, #24]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	7d1b      	ldrb	r3, [r3, #20]
 800db2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db32:	b2da      	uxtb	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	699b      	ldr	r3, [r3, #24]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	8992      	ldrh	r2, [r2, #12]
 800db40:	fbb3 f1f2 	udiv	r1, r3, r2
 800db44:	fb01 f202 	mul.w	r2, r1, r2
 800db48:	1a9b      	subs	r3, r3, r2
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d036      	beq.n	800dbbc <f_lseek+0x43c>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a1b      	ldr	r3, [r3, #32]
 800db52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db54:	429a      	cmp	r2, r3
 800db56:	d031      	beq.n	800dbbc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7d1b      	ldrb	r3, [r3, #20]
 800db5c:	b25b      	sxtb	r3, r3
 800db5e:	2b00      	cmp	r3, #0
 800db60:	da18      	bge.n	800db94 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	7858      	ldrb	r0, [r3, #1]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a1a      	ldr	r2, [r3, #32]
 800db70:	2301      	movs	r3, #1
 800db72:	f7fd f83d 	bl	800abf0 <disk_write>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d004      	beq.n	800db86 <f_lseek+0x406>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	755a      	strb	r2, [r3, #21]
 800db82:	2301      	movs	r3, #1
 800db84:	e01c      	b.n	800dbc0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	7d1b      	ldrb	r3, [r3, #20]
 800db8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	7858      	ldrb	r0, [r3, #1]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db9e:	2301      	movs	r3, #1
 800dba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dba2:	f7fd f805 	bl	800abb0 <disk_read>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d004      	beq.n	800dbb6 <f_lseek+0x436>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	755a      	strb	r2, [r3, #21]
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e004      	b.n	800dbc0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbba:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dbbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3740      	adds	r7, #64	; 0x40
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	2b0a      	cmp	r3, #10
 800dbd8:	d103      	bne.n	800dbe2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800dbda:	210d      	movs	r1, #13
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7ff fff3 	bl	800dbc8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	db25      	blt.n	800dc3a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	60fa      	str	r2, [r7, #12]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	78fa      	ldrb	r2, [r7, #3]
 800dbfa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b3c      	cmp	r3, #60	; 0x3c
 800dc00:	dd12      	ble.n	800dc28 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6818      	ldr	r0, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f103 010c 	add.w	r1, r3, #12
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	f107 0308 	add.w	r3, r7, #8
 800dc12:	f7ff fb79 	bl	800d308 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d101      	bne.n	800dc22 <putc_bfd+0x5a>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	e001      	b.n	800dc26 <putc_bfd+0x5e>
 800dc22:	f04f 33ff 	mov.w	r3, #4294967295
 800dc26:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	609a      	str	r2, [r3, #8]
 800dc38:	e000      	b.n	800dc3c <putc_bfd+0x74>
	if (i < 0) return;
 800dc3a:	bf00      	nop
}
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	db16      	blt.n	800dc80 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6818      	ldr	r0, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f103 010c 	add.w	r1, r3, #12
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	461a      	mov	r2, r3
 800dc62:	f107 030c 	add.w	r3, r7, #12
 800dc66:	f7ff fb4f 	bl	800d308 <f_write>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d107      	bne.n	800dc80 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d102      	bne.n	800dc80 <putc_flush+0x3e>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	e001      	b.n	800dc84 <putc_flush+0x42>
	return EOF;
 800dc80:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	605a      	str	r2, [r3, #4]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685a      	ldr	r2, [r3, #4]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	609a      	str	r2, [r3, #8]
}
 800dcaa:	bf00      	nop
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b096      	sub	sp, #88	; 0x58
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
 800dcbe:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800dcc0:	f107 030c 	add.w	r3, r7, #12
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7ff ffe0 	bl	800dc8c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800dccc:	e009      	b.n	800dce2 <f_puts+0x2c>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	1c5a      	adds	r2, r3, #1
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	781a      	ldrb	r2, [r3, #0]
 800dcd6:	f107 030c 	add.w	r3, r7, #12
 800dcda:	4611      	mov	r1, r2
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7ff ff73 	bl	800dbc8 <putc_bfd>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1f1      	bne.n	800dcce <f_puts+0x18>
	return putc_flush(&pb);
 800dcea:	f107 030c 	add.w	r3, r7, #12
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7ff ffa7 	bl	800dc42 <putc_flush>
 800dcf4:	4603      	mov	r3, r0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3758      	adds	r7, #88	; 0x58
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
	...

0800dd00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b087      	sub	sp, #28
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd12:	2300      	movs	r3, #0
 800dd14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dd16:	4b1f      	ldr	r3, [pc, #124]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd18:	7a5b      	ldrb	r3, [r3, #9]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d131      	bne.n	800dd84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd20:	4b1c      	ldr	r3, [pc, #112]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd22:	7a5b      	ldrb	r3, [r3, #9]
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	461a      	mov	r2, r3
 800dd28:	4b1a      	ldr	r3, [pc, #104]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd2e:	4b19      	ldr	r3, [pc, #100]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd30:	7a5b      	ldrb	r3, [r3, #9]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	4a17      	ldr	r2, [pc, #92]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dd3e:	4b15      	ldr	r3, [pc, #84]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd40:	7a5b      	ldrb	r3, [r3, #9]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	461a      	mov	r2, r3
 800dd46:	4b13      	ldr	r3, [pc, #76]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd48:	4413      	add	r3, r2
 800dd4a:	79fa      	ldrb	r2, [r7, #7]
 800dd4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd4e:	4b11      	ldr	r3, [pc, #68]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd50:	7a5b      	ldrb	r3, [r3, #9]
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	b2d1      	uxtb	r1, r2
 800dd58:	4a0e      	ldr	r2, [pc, #56]	; (800dd94 <FATFS_LinkDriverEx+0x94>)
 800dd5a:	7251      	strb	r1, [r2, #9]
 800dd5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd5e:	7dbb      	ldrb	r3, [r7, #22]
 800dd60:	3330      	adds	r3, #48	; 0x30
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	223a      	movs	r2, #58	; 0x3a
 800dd6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	3302      	adds	r3, #2
 800dd74:	222f      	movs	r2, #47	; 0x2f
 800dd76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	3303      	adds	r3, #3
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dd84:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	371c      	adds	r7, #28
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	200030e4 	.word	0x200030e4

0800dd98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dda2:	2200      	movs	r2, #0
 800dda4:	6839      	ldr	r1, [r7, #0]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff ffaa 	bl	800dd00 <FATFS_LinkDriverEx>
 800ddac:	4603      	mov	r3, r0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
	...

0800ddb8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b085      	sub	sp, #20
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	6039      	str	r1, [r7, #0]
 800ddc2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ddc4:	88fb      	ldrh	r3, [r7, #6]
 800ddc6:	2b7f      	cmp	r3, #127	; 0x7f
 800ddc8:	d802      	bhi.n	800ddd0 <ff_convert+0x18>
		c = chr;
 800ddca:	88fb      	ldrh	r3, [r7, #6]
 800ddcc:	81fb      	strh	r3, [r7, #14]
 800ddce:	e025      	b.n	800de1c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00b      	beq.n	800ddee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ddd6:	88fb      	ldrh	r3, [r7, #6]
 800ddd8:	2bff      	cmp	r3, #255	; 0xff
 800ddda:	d805      	bhi.n	800dde8 <ff_convert+0x30>
 800dddc:	88fb      	ldrh	r3, [r7, #6]
 800ddde:	3b80      	subs	r3, #128	; 0x80
 800dde0:	4a12      	ldr	r2, [pc, #72]	; (800de2c <ff_convert+0x74>)
 800dde2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dde6:	e000      	b.n	800ddea <ff_convert+0x32>
 800dde8:	2300      	movs	r3, #0
 800ddea:	81fb      	strh	r3, [r7, #14]
 800ddec:	e016      	b.n	800de1c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ddee:	2300      	movs	r3, #0
 800ddf0:	81fb      	strh	r3, [r7, #14]
 800ddf2:	e009      	b.n	800de08 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ddf4:	89fb      	ldrh	r3, [r7, #14]
 800ddf6:	4a0d      	ldr	r2, [pc, #52]	; (800de2c <ff_convert+0x74>)
 800ddf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddfc:	88fa      	ldrh	r2, [r7, #6]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d006      	beq.n	800de10 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800de02:	89fb      	ldrh	r3, [r7, #14]
 800de04:	3301      	adds	r3, #1
 800de06:	81fb      	strh	r3, [r7, #14]
 800de08:	89fb      	ldrh	r3, [r7, #14]
 800de0a:	2b7f      	cmp	r3, #127	; 0x7f
 800de0c:	d9f2      	bls.n	800ddf4 <ff_convert+0x3c>
 800de0e:	e000      	b.n	800de12 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800de10:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800de12:	89fb      	ldrh	r3, [r7, #14]
 800de14:	3380      	adds	r3, #128	; 0x80
 800de16:	b29b      	uxth	r3, r3
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800de1c:	89fb      	ldrh	r3, [r7, #14]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	08015508 	.word	0x08015508

0800de30 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800de30:	b480      	push	{r7}
 800de32:	b087      	sub	sp, #28
 800de34:	af00      	add	r7, sp, #0
 800de36:	4603      	mov	r3, r0
 800de38:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800de3a:	88fb      	ldrh	r3, [r7, #6]
 800de3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de40:	d201      	bcs.n	800de46 <ff_wtoupper+0x16>
 800de42:	4b3e      	ldr	r3, [pc, #248]	; (800df3c <ff_wtoupper+0x10c>)
 800de44:	e000      	b.n	800de48 <ff_wtoupper+0x18>
 800de46:	4b3e      	ldr	r3, [pc, #248]	; (800df40 <ff_wtoupper+0x110>)
 800de48:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	1c9a      	adds	r2, r3, #2
 800de4e:	617a      	str	r2, [r7, #20]
 800de50:	881b      	ldrh	r3, [r3, #0]
 800de52:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800de54:	8a7b      	ldrh	r3, [r7, #18]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d068      	beq.n	800df2c <ff_wtoupper+0xfc>
 800de5a:	88fa      	ldrh	r2, [r7, #6]
 800de5c:	8a7b      	ldrh	r3, [r7, #18]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d364      	bcc.n	800df2c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	1c9a      	adds	r2, r3, #2
 800de66:	617a      	str	r2, [r7, #20]
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	823b      	strh	r3, [r7, #16]
 800de6c:	8a3b      	ldrh	r3, [r7, #16]
 800de6e:	0a1b      	lsrs	r3, r3, #8
 800de70:	81fb      	strh	r3, [r7, #14]
 800de72:	8a3b      	ldrh	r3, [r7, #16]
 800de74:	b2db      	uxtb	r3, r3
 800de76:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800de78:	88fa      	ldrh	r2, [r7, #6]
 800de7a:	8a79      	ldrh	r1, [r7, #18]
 800de7c:	8a3b      	ldrh	r3, [r7, #16]
 800de7e:	440b      	add	r3, r1
 800de80:	429a      	cmp	r2, r3
 800de82:	da49      	bge.n	800df18 <ff_wtoupper+0xe8>
			switch (cmd) {
 800de84:	89fb      	ldrh	r3, [r7, #14]
 800de86:	2b08      	cmp	r3, #8
 800de88:	d84f      	bhi.n	800df2a <ff_wtoupper+0xfa>
 800de8a:	a201      	add	r2, pc, #4	; (adr r2, 800de90 <ff_wtoupper+0x60>)
 800de8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de90:	0800deb5 	.word	0x0800deb5
 800de94:	0800dec7 	.word	0x0800dec7
 800de98:	0800dedd 	.word	0x0800dedd
 800de9c:	0800dee5 	.word	0x0800dee5
 800dea0:	0800deed 	.word	0x0800deed
 800dea4:	0800def5 	.word	0x0800def5
 800dea8:	0800defd 	.word	0x0800defd
 800deac:	0800df05 	.word	0x0800df05
 800deb0:	0800df0d 	.word	0x0800df0d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800deb4:	88fa      	ldrh	r2, [r7, #6]
 800deb6:	8a7b      	ldrh	r3, [r7, #18]
 800deb8:	1ad3      	subs	r3, r2, r3
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	697a      	ldr	r2, [r7, #20]
 800debe:	4413      	add	r3, r2
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	80fb      	strh	r3, [r7, #6]
 800dec4:	e027      	b.n	800df16 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dec6:	88fa      	ldrh	r2, [r7, #6]
 800dec8:	8a7b      	ldrh	r3, [r7, #18]
 800deca:	1ad3      	subs	r3, r2, r3
 800decc:	b29b      	uxth	r3, r3
 800dece:	f003 0301 	and.w	r3, r3, #1
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	88fa      	ldrh	r2, [r7, #6]
 800ded6:	1ad3      	subs	r3, r2, r3
 800ded8:	80fb      	strh	r3, [r7, #6]
 800deda:	e01c      	b.n	800df16 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dedc:	88fb      	ldrh	r3, [r7, #6]
 800dede:	3b10      	subs	r3, #16
 800dee0:	80fb      	strh	r3, [r7, #6]
 800dee2:	e018      	b.n	800df16 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dee4:	88fb      	ldrh	r3, [r7, #6]
 800dee6:	3b20      	subs	r3, #32
 800dee8:	80fb      	strh	r3, [r7, #6]
 800deea:	e014      	b.n	800df16 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800deec:	88fb      	ldrh	r3, [r7, #6]
 800deee:	3b30      	subs	r3, #48	; 0x30
 800def0:	80fb      	strh	r3, [r7, #6]
 800def2:	e010      	b.n	800df16 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800def4:	88fb      	ldrh	r3, [r7, #6]
 800def6:	3b1a      	subs	r3, #26
 800def8:	80fb      	strh	r3, [r7, #6]
 800defa:	e00c      	b.n	800df16 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800defc:	88fb      	ldrh	r3, [r7, #6]
 800defe:	3308      	adds	r3, #8
 800df00:	80fb      	strh	r3, [r7, #6]
 800df02:	e008      	b.n	800df16 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800df04:	88fb      	ldrh	r3, [r7, #6]
 800df06:	3b50      	subs	r3, #80	; 0x50
 800df08:	80fb      	strh	r3, [r7, #6]
 800df0a:	e004      	b.n	800df16 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800df0c:	88fb      	ldrh	r3, [r7, #6]
 800df0e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800df12:	80fb      	strh	r3, [r7, #6]
 800df14:	bf00      	nop
			}
			break;
 800df16:	e008      	b.n	800df2a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800df18:	89fb      	ldrh	r3, [r7, #14]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d195      	bne.n	800de4a <ff_wtoupper+0x1a>
 800df1e:	8a3b      	ldrh	r3, [r7, #16]
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	4413      	add	r3, r2
 800df26:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800df28:	e78f      	b.n	800de4a <ff_wtoupper+0x1a>
			break;
 800df2a:	bf00      	nop
	}

	return chr;
 800df2c:	88fb      	ldrh	r3, [r7, #6]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	371c      	adds	r7, #28
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	08015608 	.word	0x08015608
 800df40:	080157fc 	.word	0x080157fc

0800df44 <__errno>:
 800df44:	4b01      	ldr	r3, [pc, #4]	; (800df4c <__errno+0x8>)
 800df46:	6818      	ldr	r0, [r3, #0]
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	20000034 	.word	0x20000034

0800df50 <__libc_init_array>:
 800df50:	b570      	push	{r4, r5, r6, lr}
 800df52:	4d0d      	ldr	r5, [pc, #52]	; (800df88 <__libc_init_array+0x38>)
 800df54:	4c0d      	ldr	r4, [pc, #52]	; (800df8c <__libc_init_array+0x3c>)
 800df56:	1b64      	subs	r4, r4, r5
 800df58:	10a4      	asrs	r4, r4, #2
 800df5a:	2600      	movs	r6, #0
 800df5c:	42a6      	cmp	r6, r4
 800df5e:	d109      	bne.n	800df74 <__libc_init_array+0x24>
 800df60:	4d0b      	ldr	r5, [pc, #44]	; (800df90 <__libc_init_array+0x40>)
 800df62:	4c0c      	ldr	r4, [pc, #48]	; (800df94 <__libc_init_array+0x44>)
 800df64:	f006 fd72 	bl	8014a4c <_init>
 800df68:	1b64      	subs	r4, r4, r5
 800df6a:	10a4      	asrs	r4, r4, #2
 800df6c:	2600      	movs	r6, #0
 800df6e:	42a6      	cmp	r6, r4
 800df70:	d105      	bne.n	800df7e <__libc_init_array+0x2e>
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	f855 3b04 	ldr.w	r3, [r5], #4
 800df78:	4798      	blx	r3
 800df7a:	3601      	adds	r6, #1
 800df7c:	e7ee      	b.n	800df5c <__libc_init_array+0xc>
 800df7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df82:	4798      	blx	r3
 800df84:	3601      	adds	r6, #1
 800df86:	e7f2      	b.n	800df6e <__libc_init_array+0x1e>
 800df88:	08015f98 	.word	0x08015f98
 800df8c:	08015f98 	.word	0x08015f98
 800df90:	08015f98 	.word	0x08015f98
 800df94:	08015f9c 	.word	0x08015f9c

0800df98 <malloc>:
 800df98:	4b02      	ldr	r3, [pc, #8]	; (800dfa4 <malloc+0xc>)
 800df9a:	4601      	mov	r1, r0
 800df9c:	6818      	ldr	r0, [r3, #0]
 800df9e:	f000 b88d 	b.w	800e0bc <_malloc_r>
 800dfa2:	bf00      	nop
 800dfa4:	20000034 	.word	0x20000034

0800dfa8 <free>:
 800dfa8:	4b02      	ldr	r3, [pc, #8]	; (800dfb4 <free+0xc>)
 800dfaa:	4601      	mov	r1, r0
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	f000 b819 	b.w	800dfe4 <_free_r>
 800dfb2:	bf00      	nop
 800dfb4:	20000034 	.word	0x20000034

0800dfb8 <memcpy>:
 800dfb8:	440a      	add	r2, r1
 800dfba:	4291      	cmp	r1, r2
 800dfbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfc0:	d100      	bne.n	800dfc4 <memcpy+0xc>
 800dfc2:	4770      	bx	lr
 800dfc4:	b510      	push	{r4, lr}
 800dfc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfce:	4291      	cmp	r1, r2
 800dfd0:	d1f9      	bne.n	800dfc6 <memcpy+0xe>
 800dfd2:	bd10      	pop	{r4, pc}

0800dfd4 <memset>:
 800dfd4:	4402      	add	r2, r0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d100      	bne.n	800dfde <memset+0xa>
 800dfdc:	4770      	bx	lr
 800dfde:	f803 1b01 	strb.w	r1, [r3], #1
 800dfe2:	e7f9      	b.n	800dfd8 <memset+0x4>

0800dfe4 <_free_r>:
 800dfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfe6:	2900      	cmp	r1, #0
 800dfe8:	d044      	beq.n	800e074 <_free_r+0x90>
 800dfea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfee:	9001      	str	r0, [sp, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f1a1 0404 	sub.w	r4, r1, #4
 800dff6:	bfb8      	it	lt
 800dff8:	18e4      	addlt	r4, r4, r3
 800dffa:	f002 fdb1 	bl	8010b60 <__malloc_lock>
 800dffe:	4a1e      	ldr	r2, [pc, #120]	; (800e078 <_free_r+0x94>)
 800e000:	9801      	ldr	r0, [sp, #4]
 800e002:	6813      	ldr	r3, [r2, #0]
 800e004:	b933      	cbnz	r3, 800e014 <_free_r+0x30>
 800e006:	6063      	str	r3, [r4, #4]
 800e008:	6014      	str	r4, [r2, #0]
 800e00a:	b003      	add	sp, #12
 800e00c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e010:	f002 bdac 	b.w	8010b6c <__malloc_unlock>
 800e014:	42a3      	cmp	r3, r4
 800e016:	d908      	bls.n	800e02a <_free_r+0x46>
 800e018:	6825      	ldr	r5, [r4, #0]
 800e01a:	1961      	adds	r1, r4, r5
 800e01c:	428b      	cmp	r3, r1
 800e01e:	bf01      	itttt	eq
 800e020:	6819      	ldreq	r1, [r3, #0]
 800e022:	685b      	ldreq	r3, [r3, #4]
 800e024:	1949      	addeq	r1, r1, r5
 800e026:	6021      	streq	r1, [r4, #0]
 800e028:	e7ed      	b.n	800e006 <_free_r+0x22>
 800e02a:	461a      	mov	r2, r3
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	b10b      	cbz	r3, 800e034 <_free_r+0x50>
 800e030:	42a3      	cmp	r3, r4
 800e032:	d9fa      	bls.n	800e02a <_free_r+0x46>
 800e034:	6811      	ldr	r1, [r2, #0]
 800e036:	1855      	adds	r5, r2, r1
 800e038:	42a5      	cmp	r5, r4
 800e03a:	d10b      	bne.n	800e054 <_free_r+0x70>
 800e03c:	6824      	ldr	r4, [r4, #0]
 800e03e:	4421      	add	r1, r4
 800e040:	1854      	adds	r4, r2, r1
 800e042:	42a3      	cmp	r3, r4
 800e044:	6011      	str	r1, [r2, #0]
 800e046:	d1e0      	bne.n	800e00a <_free_r+0x26>
 800e048:	681c      	ldr	r4, [r3, #0]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	6053      	str	r3, [r2, #4]
 800e04e:	4421      	add	r1, r4
 800e050:	6011      	str	r1, [r2, #0]
 800e052:	e7da      	b.n	800e00a <_free_r+0x26>
 800e054:	d902      	bls.n	800e05c <_free_r+0x78>
 800e056:	230c      	movs	r3, #12
 800e058:	6003      	str	r3, [r0, #0]
 800e05a:	e7d6      	b.n	800e00a <_free_r+0x26>
 800e05c:	6825      	ldr	r5, [r4, #0]
 800e05e:	1961      	adds	r1, r4, r5
 800e060:	428b      	cmp	r3, r1
 800e062:	bf04      	itt	eq
 800e064:	6819      	ldreq	r1, [r3, #0]
 800e066:	685b      	ldreq	r3, [r3, #4]
 800e068:	6063      	str	r3, [r4, #4]
 800e06a:	bf04      	itt	eq
 800e06c:	1949      	addeq	r1, r1, r5
 800e06e:	6021      	streq	r1, [r4, #0]
 800e070:	6054      	str	r4, [r2, #4]
 800e072:	e7ca      	b.n	800e00a <_free_r+0x26>
 800e074:	b003      	add	sp, #12
 800e076:	bd30      	pop	{r4, r5, pc}
 800e078:	200030f0 	.word	0x200030f0

0800e07c <sbrk_aligned>:
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	4e0e      	ldr	r6, [pc, #56]	; (800e0b8 <sbrk_aligned+0x3c>)
 800e080:	460c      	mov	r4, r1
 800e082:	6831      	ldr	r1, [r6, #0]
 800e084:	4605      	mov	r5, r0
 800e086:	b911      	cbnz	r1, 800e08e <sbrk_aligned+0x12>
 800e088:	f000 fcf6 	bl	800ea78 <_sbrk_r>
 800e08c:	6030      	str	r0, [r6, #0]
 800e08e:	4621      	mov	r1, r4
 800e090:	4628      	mov	r0, r5
 800e092:	f000 fcf1 	bl	800ea78 <_sbrk_r>
 800e096:	1c43      	adds	r3, r0, #1
 800e098:	d00a      	beq.n	800e0b0 <sbrk_aligned+0x34>
 800e09a:	1cc4      	adds	r4, r0, #3
 800e09c:	f024 0403 	bic.w	r4, r4, #3
 800e0a0:	42a0      	cmp	r0, r4
 800e0a2:	d007      	beq.n	800e0b4 <sbrk_aligned+0x38>
 800e0a4:	1a21      	subs	r1, r4, r0
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 fce6 	bl	800ea78 <_sbrk_r>
 800e0ac:	3001      	adds	r0, #1
 800e0ae:	d101      	bne.n	800e0b4 <sbrk_aligned+0x38>
 800e0b0:	f04f 34ff 	mov.w	r4, #4294967295
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	bd70      	pop	{r4, r5, r6, pc}
 800e0b8:	200030f4 	.word	0x200030f4

0800e0bc <_malloc_r>:
 800e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c0:	1ccd      	adds	r5, r1, #3
 800e0c2:	f025 0503 	bic.w	r5, r5, #3
 800e0c6:	3508      	adds	r5, #8
 800e0c8:	2d0c      	cmp	r5, #12
 800e0ca:	bf38      	it	cc
 800e0cc:	250c      	movcc	r5, #12
 800e0ce:	2d00      	cmp	r5, #0
 800e0d0:	4607      	mov	r7, r0
 800e0d2:	db01      	blt.n	800e0d8 <_malloc_r+0x1c>
 800e0d4:	42a9      	cmp	r1, r5
 800e0d6:	d905      	bls.n	800e0e4 <_malloc_r+0x28>
 800e0d8:	230c      	movs	r3, #12
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	2600      	movs	r6, #0
 800e0de:	4630      	mov	r0, r6
 800e0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e4:	4e2e      	ldr	r6, [pc, #184]	; (800e1a0 <_malloc_r+0xe4>)
 800e0e6:	f002 fd3b 	bl	8010b60 <__malloc_lock>
 800e0ea:	6833      	ldr	r3, [r6, #0]
 800e0ec:	461c      	mov	r4, r3
 800e0ee:	bb34      	cbnz	r4, 800e13e <_malloc_r+0x82>
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	4638      	mov	r0, r7
 800e0f4:	f7ff ffc2 	bl	800e07c <sbrk_aligned>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	d14d      	bne.n	800e19a <_malloc_r+0xde>
 800e0fe:	6834      	ldr	r4, [r6, #0]
 800e100:	4626      	mov	r6, r4
 800e102:	2e00      	cmp	r6, #0
 800e104:	d140      	bne.n	800e188 <_malloc_r+0xcc>
 800e106:	6823      	ldr	r3, [r4, #0]
 800e108:	4631      	mov	r1, r6
 800e10a:	4638      	mov	r0, r7
 800e10c:	eb04 0803 	add.w	r8, r4, r3
 800e110:	f000 fcb2 	bl	800ea78 <_sbrk_r>
 800e114:	4580      	cmp	r8, r0
 800e116:	d13a      	bne.n	800e18e <_malloc_r+0xd2>
 800e118:	6821      	ldr	r1, [r4, #0]
 800e11a:	3503      	adds	r5, #3
 800e11c:	1a6d      	subs	r5, r5, r1
 800e11e:	f025 0503 	bic.w	r5, r5, #3
 800e122:	3508      	adds	r5, #8
 800e124:	2d0c      	cmp	r5, #12
 800e126:	bf38      	it	cc
 800e128:	250c      	movcc	r5, #12
 800e12a:	4629      	mov	r1, r5
 800e12c:	4638      	mov	r0, r7
 800e12e:	f7ff ffa5 	bl	800e07c <sbrk_aligned>
 800e132:	3001      	adds	r0, #1
 800e134:	d02b      	beq.n	800e18e <_malloc_r+0xd2>
 800e136:	6823      	ldr	r3, [r4, #0]
 800e138:	442b      	add	r3, r5
 800e13a:	6023      	str	r3, [r4, #0]
 800e13c:	e00e      	b.n	800e15c <_malloc_r+0xa0>
 800e13e:	6822      	ldr	r2, [r4, #0]
 800e140:	1b52      	subs	r2, r2, r5
 800e142:	d41e      	bmi.n	800e182 <_malloc_r+0xc6>
 800e144:	2a0b      	cmp	r2, #11
 800e146:	d916      	bls.n	800e176 <_malloc_r+0xba>
 800e148:	1961      	adds	r1, r4, r5
 800e14a:	42a3      	cmp	r3, r4
 800e14c:	6025      	str	r5, [r4, #0]
 800e14e:	bf18      	it	ne
 800e150:	6059      	strne	r1, [r3, #4]
 800e152:	6863      	ldr	r3, [r4, #4]
 800e154:	bf08      	it	eq
 800e156:	6031      	streq	r1, [r6, #0]
 800e158:	5162      	str	r2, [r4, r5]
 800e15a:	604b      	str	r3, [r1, #4]
 800e15c:	4638      	mov	r0, r7
 800e15e:	f104 060b 	add.w	r6, r4, #11
 800e162:	f002 fd03 	bl	8010b6c <__malloc_unlock>
 800e166:	f026 0607 	bic.w	r6, r6, #7
 800e16a:	1d23      	adds	r3, r4, #4
 800e16c:	1af2      	subs	r2, r6, r3
 800e16e:	d0b6      	beq.n	800e0de <_malloc_r+0x22>
 800e170:	1b9b      	subs	r3, r3, r6
 800e172:	50a3      	str	r3, [r4, r2]
 800e174:	e7b3      	b.n	800e0de <_malloc_r+0x22>
 800e176:	6862      	ldr	r2, [r4, #4]
 800e178:	42a3      	cmp	r3, r4
 800e17a:	bf0c      	ite	eq
 800e17c:	6032      	streq	r2, [r6, #0]
 800e17e:	605a      	strne	r2, [r3, #4]
 800e180:	e7ec      	b.n	800e15c <_malloc_r+0xa0>
 800e182:	4623      	mov	r3, r4
 800e184:	6864      	ldr	r4, [r4, #4]
 800e186:	e7b2      	b.n	800e0ee <_malloc_r+0x32>
 800e188:	4634      	mov	r4, r6
 800e18a:	6876      	ldr	r6, [r6, #4]
 800e18c:	e7b9      	b.n	800e102 <_malloc_r+0x46>
 800e18e:	230c      	movs	r3, #12
 800e190:	603b      	str	r3, [r7, #0]
 800e192:	4638      	mov	r0, r7
 800e194:	f002 fcea 	bl	8010b6c <__malloc_unlock>
 800e198:	e7a1      	b.n	800e0de <_malloc_r+0x22>
 800e19a:	6025      	str	r5, [r4, #0]
 800e19c:	e7de      	b.n	800e15c <_malloc_r+0xa0>
 800e19e:	bf00      	nop
 800e1a0:	200030f0 	.word	0x200030f0

0800e1a4 <__cvt>:
 800e1a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a8:	ec55 4b10 	vmov	r4, r5, d0
 800e1ac:	2d00      	cmp	r5, #0
 800e1ae:	460e      	mov	r6, r1
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	462b      	mov	r3, r5
 800e1b4:	bfbb      	ittet	lt
 800e1b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e1ba:	461d      	movlt	r5, r3
 800e1bc:	2300      	movge	r3, #0
 800e1be:	232d      	movlt	r3, #45	; 0x2d
 800e1c0:	700b      	strb	r3, [r1, #0]
 800e1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e1c8:	4691      	mov	r9, r2
 800e1ca:	f023 0820 	bic.w	r8, r3, #32
 800e1ce:	bfbc      	itt	lt
 800e1d0:	4622      	movlt	r2, r4
 800e1d2:	4614      	movlt	r4, r2
 800e1d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e1d8:	d005      	beq.n	800e1e6 <__cvt+0x42>
 800e1da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e1de:	d100      	bne.n	800e1e2 <__cvt+0x3e>
 800e1e0:	3601      	adds	r6, #1
 800e1e2:	2102      	movs	r1, #2
 800e1e4:	e000      	b.n	800e1e8 <__cvt+0x44>
 800e1e6:	2103      	movs	r1, #3
 800e1e8:	ab03      	add	r3, sp, #12
 800e1ea:	9301      	str	r3, [sp, #4]
 800e1ec:	ab02      	add	r3, sp, #8
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	ec45 4b10 	vmov	d0, r4, r5
 800e1f4:	4653      	mov	r3, sl
 800e1f6:	4632      	mov	r2, r6
 800e1f8:	f001 fb3e 	bl	800f878 <_dtoa_r>
 800e1fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e200:	4607      	mov	r7, r0
 800e202:	d102      	bne.n	800e20a <__cvt+0x66>
 800e204:	f019 0f01 	tst.w	r9, #1
 800e208:	d022      	beq.n	800e250 <__cvt+0xac>
 800e20a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e20e:	eb07 0906 	add.w	r9, r7, r6
 800e212:	d110      	bne.n	800e236 <__cvt+0x92>
 800e214:	783b      	ldrb	r3, [r7, #0]
 800e216:	2b30      	cmp	r3, #48	; 0x30
 800e218:	d10a      	bne.n	800e230 <__cvt+0x8c>
 800e21a:	2200      	movs	r2, #0
 800e21c:	2300      	movs	r3, #0
 800e21e:	4620      	mov	r0, r4
 800e220:	4629      	mov	r1, r5
 800e222:	f7f2 fc59 	bl	8000ad8 <__aeabi_dcmpeq>
 800e226:	b918      	cbnz	r0, 800e230 <__cvt+0x8c>
 800e228:	f1c6 0601 	rsb	r6, r6, #1
 800e22c:	f8ca 6000 	str.w	r6, [sl]
 800e230:	f8da 3000 	ldr.w	r3, [sl]
 800e234:	4499      	add	r9, r3
 800e236:	2200      	movs	r2, #0
 800e238:	2300      	movs	r3, #0
 800e23a:	4620      	mov	r0, r4
 800e23c:	4629      	mov	r1, r5
 800e23e:	f7f2 fc4b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e242:	b108      	cbz	r0, 800e248 <__cvt+0xa4>
 800e244:	f8cd 900c 	str.w	r9, [sp, #12]
 800e248:	2230      	movs	r2, #48	; 0x30
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	454b      	cmp	r3, r9
 800e24e:	d307      	bcc.n	800e260 <__cvt+0xbc>
 800e250:	9b03      	ldr	r3, [sp, #12]
 800e252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e254:	1bdb      	subs	r3, r3, r7
 800e256:	4638      	mov	r0, r7
 800e258:	6013      	str	r3, [r2, #0]
 800e25a:	b004      	add	sp, #16
 800e25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e260:	1c59      	adds	r1, r3, #1
 800e262:	9103      	str	r1, [sp, #12]
 800e264:	701a      	strb	r2, [r3, #0]
 800e266:	e7f0      	b.n	800e24a <__cvt+0xa6>

0800e268 <__exponent>:
 800e268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e26a:	4603      	mov	r3, r0
 800e26c:	2900      	cmp	r1, #0
 800e26e:	bfb8      	it	lt
 800e270:	4249      	neglt	r1, r1
 800e272:	f803 2b02 	strb.w	r2, [r3], #2
 800e276:	bfb4      	ite	lt
 800e278:	222d      	movlt	r2, #45	; 0x2d
 800e27a:	222b      	movge	r2, #43	; 0x2b
 800e27c:	2909      	cmp	r1, #9
 800e27e:	7042      	strb	r2, [r0, #1]
 800e280:	dd2a      	ble.n	800e2d8 <__exponent+0x70>
 800e282:	f10d 0407 	add.w	r4, sp, #7
 800e286:	46a4      	mov	ip, r4
 800e288:	270a      	movs	r7, #10
 800e28a:	46a6      	mov	lr, r4
 800e28c:	460a      	mov	r2, r1
 800e28e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e292:	fb07 1516 	mls	r5, r7, r6, r1
 800e296:	3530      	adds	r5, #48	; 0x30
 800e298:	2a63      	cmp	r2, #99	; 0x63
 800e29a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e29e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	dcf1      	bgt.n	800e28a <__exponent+0x22>
 800e2a6:	3130      	adds	r1, #48	; 0x30
 800e2a8:	f1ae 0502 	sub.w	r5, lr, #2
 800e2ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e2b0:	1c44      	adds	r4, r0, #1
 800e2b2:	4629      	mov	r1, r5
 800e2b4:	4561      	cmp	r1, ip
 800e2b6:	d30a      	bcc.n	800e2ce <__exponent+0x66>
 800e2b8:	f10d 0209 	add.w	r2, sp, #9
 800e2bc:	eba2 020e 	sub.w	r2, r2, lr
 800e2c0:	4565      	cmp	r5, ip
 800e2c2:	bf88      	it	hi
 800e2c4:	2200      	movhi	r2, #0
 800e2c6:	4413      	add	r3, r2
 800e2c8:	1a18      	subs	r0, r3, r0
 800e2ca:	b003      	add	sp, #12
 800e2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e2d6:	e7ed      	b.n	800e2b4 <__exponent+0x4c>
 800e2d8:	2330      	movs	r3, #48	; 0x30
 800e2da:	3130      	adds	r1, #48	; 0x30
 800e2dc:	7083      	strb	r3, [r0, #2]
 800e2de:	70c1      	strb	r1, [r0, #3]
 800e2e0:	1d03      	adds	r3, r0, #4
 800e2e2:	e7f1      	b.n	800e2c8 <__exponent+0x60>

0800e2e4 <_printf_float>:
 800e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e8:	ed2d 8b02 	vpush	{d8}
 800e2ec:	b08d      	sub	sp, #52	; 0x34
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e2f4:	4616      	mov	r6, r2
 800e2f6:	461f      	mov	r7, r3
 800e2f8:	4605      	mov	r5, r0
 800e2fa:	f002 fc1b 	bl	8010b34 <_localeconv_r>
 800e2fe:	f8d0 a000 	ldr.w	sl, [r0]
 800e302:	4650      	mov	r0, sl
 800e304:	f7f1 ff6c 	bl	80001e0 <strlen>
 800e308:	2300      	movs	r3, #0
 800e30a:	930a      	str	r3, [sp, #40]	; 0x28
 800e30c:	6823      	ldr	r3, [r4, #0]
 800e30e:	9305      	str	r3, [sp, #20]
 800e310:	f8d8 3000 	ldr.w	r3, [r8]
 800e314:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e318:	3307      	adds	r3, #7
 800e31a:	f023 0307 	bic.w	r3, r3, #7
 800e31e:	f103 0208 	add.w	r2, r3, #8
 800e322:	f8c8 2000 	str.w	r2, [r8]
 800e326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e32e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	f8cd 8018 	str.w	r8, [sp, #24]
 800e33c:	ee08 0a10 	vmov	s16, r0
 800e340:	4b9f      	ldr	r3, [pc, #636]	; (800e5c0 <_printf_float+0x2dc>)
 800e342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e346:	f04f 32ff 	mov.w	r2, #4294967295
 800e34a:	f7f2 fbf7 	bl	8000b3c <__aeabi_dcmpun>
 800e34e:	bb88      	cbnz	r0, 800e3b4 <_printf_float+0xd0>
 800e350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e354:	4b9a      	ldr	r3, [pc, #616]	; (800e5c0 <_printf_float+0x2dc>)
 800e356:	f04f 32ff 	mov.w	r2, #4294967295
 800e35a:	f7f2 fbd1 	bl	8000b00 <__aeabi_dcmple>
 800e35e:	bb48      	cbnz	r0, 800e3b4 <_printf_float+0xd0>
 800e360:	2200      	movs	r2, #0
 800e362:	2300      	movs	r3, #0
 800e364:	4640      	mov	r0, r8
 800e366:	4649      	mov	r1, r9
 800e368:	f7f2 fbc0 	bl	8000aec <__aeabi_dcmplt>
 800e36c:	b110      	cbz	r0, 800e374 <_printf_float+0x90>
 800e36e:	232d      	movs	r3, #45	; 0x2d
 800e370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e374:	4b93      	ldr	r3, [pc, #588]	; (800e5c4 <_printf_float+0x2e0>)
 800e376:	4894      	ldr	r0, [pc, #592]	; (800e5c8 <_printf_float+0x2e4>)
 800e378:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e37c:	bf94      	ite	ls
 800e37e:	4698      	movls	r8, r3
 800e380:	4680      	movhi	r8, r0
 800e382:	2303      	movs	r3, #3
 800e384:	6123      	str	r3, [r4, #16]
 800e386:	9b05      	ldr	r3, [sp, #20]
 800e388:	f023 0204 	bic.w	r2, r3, #4
 800e38c:	6022      	str	r2, [r4, #0]
 800e38e:	f04f 0900 	mov.w	r9, #0
 800e392:	9700      	str	r7, [sp, #0]
 800e394:	4633      	mov	r3, r6
 800e396:	aa0b      	add	r2, sp, #44	; 0x2c
 800e398:	4621      	mov	r1, r4
 800e39a:	4628      	mov	r0, r5
 800e39c:	f000 f9d8 	bl	800e750 <_printf_common>
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	f040 8090 	bne.w	800e4c6 <_printf_float+0x1e2>
 800e3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3aa:	b00d      	add	sp, #52	; 0x34
 800e3ac:	ecbd 8b02 	vpop	{d8}
 800e3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b4:	4642      	mov	r2, r8
 800e3b6:	464b      	mov	r3, r9
 800e3b8:	4640      	mov	r0, r8
 800e3ba:	4649      	mov	r1, r9
 800e3bc:	f7f2 fbbe 	bl	8000b3c <__aeabi_dcmpun>
 800e3c0:	b140      	cbz	r0, 800e3d4 <_printf_float+0xf0>
 800e3c2:	464b      	mov	r3, r9
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	bfbc      	itt	lt
 800e3c8:	232d      	movlt	r3, #45	; 0x2d
 800e3ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e3ce:	487f      	ldr	r0, [pc, #508]	; (800e5cc <_printf_float+0x2e8>)
 800e3d0:	4b7f      	ldr	r3, [pc, #508]	; (800e5d0 <_printf_float+0x2ec>)
 800e3d2:	e7d1      	b.n	800e378 <_printf_float+0x94>
 800e3d4:	6863      	ldr	r3, [r4, #4]
 800e3d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e3da:	9206      	str	r2, [sp, #24]
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	d13f      	bne.n	800e460 <_printf_float+0x17c>
 800e3e0:	2306      	movs	r3, #6
 800e3e2:	6063      	str	r3, [r4, #4]
 800e3e4:	9b05      	ldr	r3, [sp, #20]
 800e3e6:	6861      	ldr	r1, [r4, #4]
 800e3e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	9303      	str	r3, [sp, #12]
 800e3f0:	ab0a      	add	r3, sp, #40	; 0x28
 800e3f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e3f6:	ab09      	add	r3, sp, #36	; 0x24
 800e3f8:	ec49 8b10 	vmov	d0, r8, r9
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	6022      	str	r2, [r4, #0]
 800e400:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e404:	4628      	mov	r0, r5
 800e406:	f7ff fecd 	bl	800e1a4 <__cvt>
 800e40a:	9b06      	ldr	r3, [sp, #24]
 800e40c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e40e:	2b47      	cmp	r3, #71	; 0x47
 800e410:	4680      	mov	r8, r0
 800e412:	d108      	bne.n	800e426 <_printf_float+0x142>
 800e414:	1cc8      	adds	r0, r1, #3
 800e416:	db02      	blt.n	800e41e <_printf_float+0x13a>
 800e418:	6863      	ldr	r3, [r4, #4]
 800e41a:	4299      	cmp	r1, r3
 800e41c:	dd41      	ble.n	800e4a2 <_printf_float+0x1be>
 800e41e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e422:	fa5f fb8b 	uxtb.w	fp, fp
 800e426:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e42a:	d820      	bhi.n	800e46e <_printf_float+0x18a>
 800e42c:	3901      	subs	r1, #1
 800e42e:	465a      	mov	r2, fp
 800e430:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e434:	9109      	str	r1, [sp, #36]	; 0x24
 800e436:	f7ff ff17 	bl	800e268 <__exponent>
 800e43a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e43c:	1813      	adds	r3, r2, r0
 800e43e:	2a01      	cmp	r2, #1
 800e440:	4681      	mov	r9, r0
 800e442:	6123      	str	r3, [r4, #16]
 800e444:	dc02      	bgt.n	800e44c <_printf_float+0x168>
 800e446:	6822      	ldr	r2, [r4, #0]
 800e448:	07d2      	lsls	r2, r2, #31
 800e44a:	d501      	bpl.n	800e450 <_printf_float+0x16c>
 800e44c:	3301      	adds	r3, #1
 800e44e:	6123      	str	r3, [r4, #16]
 800e450:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e454:	2b00      	cmp	r3, #0
 800e456:	d09c      	beq.n	800e392 <_printf_float+0xae>
 800e458:	232d      	movs	r3, #45	; 0x2d
 800e45a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e45e:	e798      	b.n	800e392 <_printf_float+0xae>
 800e460:	9a06      	ldr	r2, [sp, #24]
 800e462:	2a47      	cmp	r2, #71	; 0x47
 800e464:	d1be      	bne.n	800e3e4 <_printf_float+0x100>
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1bc      	bne.n	800e3e4 <_printf_float+0x100>
 800e46a:	2301      	movs	r3, #1
 800e46c:	e7b9      	b.n	800e3e2 <_printf_float+0xfe>
 800e46e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e472:	d118      	bne.n	800e4a6 <_printf_float+0x1c2>
 800e474:	2900      	cmp	r1, #0
 800e476:	6863      	ldr	r3, [r4, #4]
 800e478:	dd0b      	ble.n	800e492 <_printf_float+0x1ae>
 800e47a:	6121      	str	r1, [r4, #16]
 800e47c:	b913      	cbnz	r3, 800e484 <_printf_float+0x1a0>
 800e47e:	6822      	ldr	r2, [r4, #0]
 800e480:	07d0      	lsls	r0, r2, #31
 800e482:	d502      	bpl.n	800e48a <_printf_float+0x1a6>
 800e484:	3301      	adds	r3, #1
 800e486:	440b      	add	r3, r1
 800e488:	6123      	str	r3, [r4, #16]
 800e48a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e48c:	f04f 0900 	mov.w	r9, #0
 800e490:	e7de      	b.n	800e450 <_printf_float+0x16c>
 800e492:	b913      	cbnz	r3, 800e49a <_printf_float+0x1b6>
 800e494:	6822      	ldr	r2, [r4, #0]
 800e496:	07d2      	lsls	r2, r2, #31
 800e498:	d501      	bpl.n	800e49e <_printf_float+0x1ba>
 800e49a:	3302      	adds	r3, #2
 800e49c:	e7f4      	b.n	800e488 <_printf_float+0x1a4>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e7f2      	b.n	800e488 <_printf_float+0x1a4>
 800e4a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4a8:	4299      	cmp	r1, r3
 800e4aa:	db05      	blt.n	800e4b8 <_printf_float+0x1d4>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	6121      	str	r1, [r4, #16]
 800e4b0:	07d8      	lsls	r0, r3, #31
 800e4b2:	d5ea      	bpl.n	800e48a <_printf_float+0x1a6>
 800e4b4:	1c4b      	adds	r3, r1, #1
 800e4b6:	e7e7      	b.n	800e488 <_printf_float+0x1a4>
 800e4b8:	2900      	cmp	r1, #0
 800e4ba:	bfd4      	ite	le
 800e4bc:	f1c1 0202 	rsble	r2, r1, #2
 800e4c0:	2201      	movgt	r2, #1
 800e4c2:	4413      	add	r3, r2
 800e4c4:	e7e0      	b.n	800e488 <_printf_float+0x1a4>
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	055a      	lsls	r2, r3, #21
 800e4ca:	d407      	bmi.n	800e4dc <_printf_float+0x1f8>
 800e4cc:	6923      	ldr	r3, [r4, #16]
 800e4ce:	4642      	mov	r2, r8
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	47b8      	blx	r7
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	d12c      	bne.n	800e534 <_printf_float+0x250>
 800e4da:	e764      	b.n	800e3a6 <_printf_float+0xc2>
 800e4dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e4e0:	f240 80e0 	bls.w	800e6a4 <_printf_float+0x3c0>
 800e4e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f7f2 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d034      	beq.n	800e55e <_printf_float+0x27a>
 800e4f4:	4a37      	ldr	r2, [pc, #220]	; (800e5d4 <_printf_float+0x2f0>)
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	4631      	mov	r1, r6
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	47b8      	blx	r7
 800e4fe:	3001      	adds	r0, #1
 800e500:	f43f af51 	beq.w	800e3a6 <_printf_float+0xc2>
 800e504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e508:	429a      	cmp	r2, r3
 800e50a:	db02      	blt.n	800e512 <_printf_float+0x22e>
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	07d8      	lsls	r0, r3, #31
 800e510:	d510      	bpl.n	800e534 <_printf_float+0x250>
 800e512:	ee18 3a10 	vmov	r3, s16
 800e516:	4652      	mov	r2, sl
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b8      	blx	r7
 800e51e:	3001      	adds	r0, #1
 800e520:	f43f af41 	beq.w	800e3a6 <_printf_float+0xc2>
 800e524:	f04f 0800 	mov.w	r8, #0
 800e528:	f104 091a 	add.w	r9, r4, #26
 800e52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e52e:	3b01      	subs	r3, #1
 800e530:	4543      	cmp	r3, r8
 800e532:	dc09      	bgt.n	800e548 <_printf_float+0x264>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	079b      	lsls	r3, r3, #30
 800e538:	f100 8105 	bmi.w	800e746 <_printf_float+0x462>
 800e53c:	68e0      	ldr	r0, [r4, #12]
 800e53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e540:	4298      	cmp	r0, r3
 800e542:	bfb8      	it	lt
 800e544:	4618      	movlt	r0, r3
 800e546:	e730      	b.n	800e3aa <_printf_float+0xc6>
 800e548:	2301      	movs	r3, #1
 800e54a:	464a      	mov	r2, r9
 800e54c:	4631      	mov	r1, r6
 800e54e:	4628      	mov	r0, r5
 800e550:	47b8      	blx	r7
 800e552:	3001      	adds	r0, #1
 800e554:	f43f af27 	beq.w	800e3a6 <_printf_float+0xc2>
 800e558:	f108 0801 	add.w	r8, r8, #1
 800e55c:	e7e6      	b.n	800e52c <_printf_float+0x248>
 800e55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e560:	2b00      	cmp	r3, #0
 800e562:	dc39      	bgt.n	800e5d8 <_printf_float+0x2f4>
 800e564:	4a1b      	ldr	r2, [pc, #108]	; (800e5d4 <_printf_float+0x2f0>)
 800e566:	2301      	movs	r3, #1
 800e568:	4631      	mov	r1, r6
 800e56a:	4628      	mov	r0, r5
 800e56c:	47b8      	blx	r7
 800e56e:	3001      	adds	r0, #1
 800e570:	f43f af19 	beq.w	800e3a6 <_printf_float+0xc2>
 800e574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e578:	4313      	orrs	r3, r2
 800e57a:	d102      	bne.n	800e582 <_printf_float+0x29e>
 800e57c:	6823      	ldr	r3, [r4, #0]
 800e57e:	07d9      	lsls	r1, r3, #31
 800e580:	d5d8      	bpl.n	800e534 <_printf_float+0x250>
 800e582:	ee18 3a10 	vmov	r3, s16
 800e586:	4652      	mov	r2, sl
 800e588:	4631      	mov	r1, r6
 800e58a:	4628      	mov	r0, r5
 800e58c:	47b8      	blx	r7
 800e58e:	3001      	adds	r0, #1
 800e590:	f43f af09 	beq.w	800e3a6 <_printf_float+0xc2>
 800e594:	f04f 0900 	mov.w	r9, #0
 800e598:	f104 0a1a 	add.w	sl, r4, #26
 800e59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e59e:	425b      	negs	r3, r3
 800e5a0:	454b      	cmp	r3, r9
 800e5a2:	dc01      	bgt.n	800e5a8 <_printf_float+0x2c4>
 800e5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5a6:	e792      	b.n	800e4ce <_printf_float+0x1ea>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	4652      	mov	r2, sl
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	47b8      	blx	r7
 800e5b2:	3001      	adds	r0, #1
 800e5b4:	f43f aef7 	beq.w	800e3a6 <_printf_float+0xc2>
 800e5b8:	f109 0901 	add.w	r9, r9, #1
 800e5bc:	e7ee      	b.n	800e59c <_printf_float+0x2b8>
 800e5be:	bf00      	nop
 800e5c0:	7fefffff 	.word	0x7fefffff
 800e5c4:	080158bc 	.word	0x080158bc
 800e5c8:	080158c0 	.word	0x080158c0
 800e5cc:	080158c8 	.word	0x080158c8
 800e5d0:	080158c4 	.word	0x080158c4
 800e5d4:	080158cc 	.word	0x080158cc
 800e5d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	bfa8      	it	ge
 800e5e0:	461a      	movge	r2, r3
 800e5e2:	2a00      	cmp	r2, #0
 800e5e4:	4691      	mov	r9, r2
 800e5e6:	dc37      	bgt.n	800e658 <_printf_float+0x374>
 800e5e8:	f04f 0b00 	mov.w	fp, #0
 800e5ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5f0:	f104 021a 	add.w	r2, r4, #26
 800e5f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5f6:	9305      	str	r3, [sp, #20]
 800e5f8:	eba3 0309 	sub.w	r3, r3, r9
 800e5fc:	455b      	cmp	r3, fp
 800e5fe:	dc33      	bgt.n	800e668 <_printf_float+0x384>
 800e600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e604:	429a      	cmp	r2, r3
 800e606:	db3b      	blt.n	800e680 <_printf_float+0x39c>
 800e608:	6823      	ldr	r3, [r4, #0]
 800e60a:	07da      	lsls	r2, r3, #31
 800e60c:	d438      	bmi.n	800e680 <_printf_float+0x39c>
 800e60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e610:	9a05      	ldr	r2, [sp, #20]
 800e612:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e614:	1a9a      	subs	r2, r3, r2
 800e616:	eba3 0901 	sub.w	r9, r3, r1
 800e61a:	4591      	cmp	r9, r2
 800e61c:	bfa8      	it	ge
 800e61e:	4691      	movge	r9, r2
 800e620:	f1b9 0f00 	cmp.w	r9, #0
 800e624:	dc35      	bgt.n	800e692 <_printf_float+0x3ae>
 800e626:	f04f 0800 	mov.w	r8, #0
 800e62a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e62e:	f104 0a1a 	add.w	sl, r4, #26
 800e632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e636:	1a9b      	subs	r3, r3, r2
 800e638:	eba3 0309 	sub.w	r3, r3, r9
 800e63c:	4543      	cmp	r3, r8
 800e63e:	f77f af79 	ble.w	800e534 <_printf_float+0x250>
 800e642:	2301      	movs	r3, #1
 800e644:	4652      	mov	r2, sl
 800e646:	4631      	mov	r1, r6
 800e648:	4628      	mov	r0, r5
 800e64a:	47b8      	blx	r7
 800e64c:	3001      	adds	r0, #1
 800e64e:	f43f aeaa 	beq.w	800e3a6 <_printf_float+0xc2>
 800e652:	f108 0801 	add.w	r8, r8, #1
 800e656:	e7ec      	b.n	800e632 <_printf_float+0x34e>
 800e658:	4613      	mov	r3, r2
 800e65a:	4631      	mov	r1, r6
 800e65c:	4642      	mov	r2, r8
 800e65e:	4628      	mov	r0, r5
 800e660:	47b8      	blx	r7
 800e662:	3001      	adds	r0, #1
 800e664:	d1c0      	bne.n	800e5e8 <_printf_float+0x304>
 800e666:	e69e      	b.n	800e3a6 <_printf_float+0xc2>
 800e668:	2301      	movs	r3, #1
 800e66a:	4631      	mov	r1, r6
 800e66c:	4628      	mov	r0, r5
 800e66e:	9205      	str	r2, [sp, #20]
 800e670:	47b8      	blx	r7
 800e672:	3001      	adds	r0, #1
 800e674:	f43f ae97 	beq.w	800e3a6 <_printf_float+0xc2>
 800e678:	9a05      	ldr	r2, [sp, #20]
 800e67a:	f10b 0b01 	add.w	fp, fp, #1
 800e67e:	e7b9      	b.n	800e5f4 <_printf_float+0x310>
 800e680:	ee18 3a10 	vmov	r3, s16
 800e684:	4652      	mov	r2, sl
 800e686:	4631      	mov	r1, r6
 800e688:	4628      	mov	r0, r5
 800e68a:	47b8      	blx	r7
 800e68c:	3001      	adds	r0, #1
 800e68e:	d1be      	bne.n	800e60e <_printf_float+0x32a>
 800e690:	e689      	b.n	800e3a6 <_printf_float+0xc2>
 800e692:	9a05      	ldr	r2, [sp, #20]
 800e694:	464b      	mov	r3, r9
 800e696:	4442      	add	r2, r8
 800e698:	4631      	mov	r1, r6
 800e69a:	4628      	mov	r0, r5
 800e69c:	47b8      	blx	r7
 800e69e:	3001      	adds	r0, #1
 800e6a0:	d1c1      	bne.n	800e626 <_printf_float+0x342>
 800e6a2:	e680      	b.n	800e3a6 <_printf_float+0xc2>
 800e6a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6a6:	2a01      	cmp	r2, #1
 800e6a8:	dc01      	bgt.n	800e6ae <_printf_float+0x3ca>
 800e6aa:	07db      	lsls	r3, r3, #31
 800e6ac:	d538      	bpl.n	800e720 <_printf_float+0x43c>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	4642      	mov	r2, r8
 800e6b2:	4631      	mov	r1, r6
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	47b8      	blx	r7
 800e6b8:	3001      	adds	r0, #1
 800e6ba:	f43f ae74 	beq.w	800e3a6 <_printf_float+0xc2>
 800e6be:	ee18 3a10 	vmov	r3, s16
 800e6c2:	4652      	mov	r2, sl
 800e6c4:	4631      	mov	r1, r6
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	47b8      	blx	r7
 800e6ca:	3001      	adds	r0, #1
 800e6cc:	f43f ae6b 	beq.w	800e3a6 <_printf_float+0xc2>
 800e6d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f7f2 f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6dc:	b9d8      	cbnz	r0, 800e716 <_printf_float+0x432>
 800e6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6e0:	f108 0201 	add.w	r2, r8, #1
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	4631      	mov	r1, r6
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	47b8      	blx	r7
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	d10e      	bne.n	800e70e <_printf_float+0x42a>
 800e6f0:	e659      	b.n	800e3a6 <_printf_float+0xc2>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	4652      	mov	r2, sl
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	47b8      	blx	r7
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	f43f ae52 	beq.w	800e3a6 <_printf_float+0xc2>
 800e702:	f108 0801 	add.w	r8, r8, #1
 800e706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e708:	3b01      	subs	r3, #1
 800e70a:	4543      	cmp	r3, r8
 800e70c:	dcf1      	bgt.n	800e6f2 <_printf_float+0x40e>
 800e70e:	464b      	mov	r3, r9
 800e710:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e714:	e6dc      	b.n	800e4d0 <_printf_float+0x1ec>
 800e716:	f04f 0800 	mov.w	r8, #0
 800e71a:	f104 0a1a 	add.w	sl, r4, #26
 800e71e:	e7f2      	b.n	800e706 <_printf_float+0x422>
 800e720:	2301      	movs	r3, #1
 800e722:	4642      	mov	r2, r8
 800e724:	e7df      	b.n	800e6e6 <_printf_float+0x402>
 800e726:	2301      	movs	r3, #1
 800e728:	464a      	mov	r2, r9
 800e72a:	4631      	mov	r1, r6
 800e72c:	4628      	mov	r0, r5
 800e72e:	47b8      	blx	r7
 800e730:	3001      	adds	r0, #1
 800e732:	f43f ae38 	beq.w	800e3a6 <_printf_float+0xc2>
 800e736:	f108 0801 	add.w	r8, r8, #1
 800e73a:	68e3      	ldr	r3, [r4, #12]
 800e73c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e73e:	1a5b      	subs	r3, r3, r1
 800e740:	4543      	cmp	r3, r8
 800e742:	dcf0      	bgt.n	800e726 <_printf_float+0x442>
 800e744:	e6fa      	b.n	800e53c <_printf_float+0x258>
 800e746:	f04f 0800 	mov.w	r8, #0
 800e74a:	f104 0919 	add.w	r9, r4, #25
 800e74e:	e7f4      	b.n	800e73a <_printf_float+0x456>

0800e750 <_printf_common>:
 800e750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e754:	4616      	mov	r6, r2
 800e756:	4699      	mov	r9, r3
 800e758:	688a      	ldr	r2, [r1, #8]
 800e75a:	690b      	ldr	r3, [r1, #16]
 800e75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e760:	4293      	cmp	r3, r2
 800e762:	bfb8      	it	lt
 800e764:	4613      	movlt	r3, r2
 800e766:	6033      	str	r3, [r6, #0]
 800e768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e76c:	4607      	mov	r7, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	b10a      	cbz	r2, 800e776 <_printf_common+0x26>
 800e772:	3301      	adds	r3, #1
 800e774:	6033      	str	r3, [r6, #0]
 800e776:	6823      	ldr	r3, [r4, #0]
 800e778:	0699      	lsls	r1, r3, #26
 800e77a:	bf42      	ittt	mi
 800e77c:	6833      	ldrmi	r3, [r6, #0]
 800e77e:	3302      	addmi	r3, #2
 800e780:	6033      	strmi	r3, [r6, #0]
 800e782:	6825      	ldr	r5, [r4, #0]
 800e784:	f015 0506 	ands.w	r5, r5, #6
 800e788:	d106      	bne.n	800e798 <_printf_common+0x48>
 800e78a:	f104 0a19 	add.w	sl, r4, #25
 800e78e:	68e3      	ldr	r3, [r4, #12]
 800e790:	6832      	ldr	r2, [r6, #0]
 800e792:	1a9b      	subs	r3, r3, r2
 800e794:	42ab      	cmp	r3, r5
 800e796:	dc26      	bgt.n	800e7e6 <_printf_common+0x96>
 800e798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e79c:	1e13      	subs	r3, r2, #0
 800e79e:	6822      	ldr	r2, [r4, #0]
 800e7a0:	bf18      	it	ne
 800e7a2:	2301      	movne	r3, #1
 800e7a4:	0692      	lsls	r2, r2, #26
 800e7a6:	d42b      	bmi.n	800e800 <_printf_common+0xb0>
 800e7a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	47c0      	blx	r8
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	d01e      	beq.n	800e7f4 <_printf_common+0xa4>
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	68e5      	ldr	r5, [r4, #12]
 800e7ba:	6832      	ldr	r2, [r6, #0]
 800e7bc:	f003 0306 	and.w	r3, r3, #6
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	bf08      	it	eq
 800e7c4:	1aad      	subeq	r5, r5, r2
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	6922      	ldr	r2, [r4, #16]
 800e7ca:	bf0c      	ite	eq
 800e7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7d0:	2500      	movne	r5, #0
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	bfc4      	itt	gt
 800e7d6:	1a9b      	subgt	r3, r3, r2
 800e7d8:	18ed      	addgt	r5, r5, r3
 800e7da:	2600      	movs	r6, #0
 800e7dc:	341a      	adds	r4, #26
 800e7de:	42b5      	cmp	r5, r6
 800e7e0:	d11a      	bne.n	800e818 <_printf_common+0xc8>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e008      	b.n	800e7f8 <_printf_common+0xa8>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4652      	mov	r2, sl
 800e7ea:	4649      	mov	r1, r9
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	47c0      	blx	r8
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	d103      	bne.n	800e7fc <_printf_common+0xac>
 800e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fc:	3501      	adds	r5, #1
 800e7fe:	e7c6      	b.n	800e78e <_printf_common+0x3e>
 800e800:	18e1      	adds	r1, r4, r3
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	2030      	movs	r0, #48	; 0x30
 800e806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e80a:	4422      	add	r2, r4
 800e80c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e814:	3302      	adds	r3, #2
 800e816:	e7c7      	b.n	800e7a8 <_printf_common+0x58>
 800e818:	2301      	movs	r3, #1
 800e81a:	4622      	mov	r2, r4
 800e81c:	4649      	mov	r1, r9
 800e81e:	4638      	mov	r0, r7
 800e820:	47c0      	blx	r8
 800e822:	3001      	adds	r0, #1
 800e824:	d0e6      	beq.n	800e7f4 <_printf_common+0xa4>
 800e826:	3601      	adds	r6, #1
 800e828:	e7d9      	b.n	800e7de <_printf_common+0x8e>
	...

0800e82c <_printf_i>:
 800e82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e830:	7e0f      	ldrb	r7, [r1, #24]
 800e832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e834:	2f78      	cmp	r7, #120	; 0x78
 800e836:	4691      	mov	r9, r2
 800e838:	4680      	mov	r8, r0
 800e83a:	460c      	mov	r4, r1
 800e83c:	469a      	mov	sl, r3
 800e83e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e842:	d807      	bhi.n	800e854 <_printf_i+0x28>
 800e844:	2f62      	cmp	r7, #98	; 0x62
 800e846:	d80a      	bhi.n	800e85e <_printf_i+0x32>
 800e848:	2f00      	cmp	r7, #0
 800e84a:	f000 80d8 	beq.w	800e9fe <_printf_i+0x1d2>
 800e84e:	2f58      	cmp	r7, #88	; 0x58
 800e850:	f000 80a3 	beq.w	800e99a <_printf_i+0x16e>
 800e854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e85c:	e03a      	b.n	800e8d4 <_printf_i+0xa8>
 800e85e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e862:	2b15      	cmp	r3, #21
 800e864:	d8f6      	bhi.n	800e854 <_printf_i+0x28>
 800e866:	a101      	add	r1, pc, #4	; (adr r1, 800e86c <_printf_i+0x40>)
 800e868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e86c:	0800e8c5 	.word	0x0800e8c5
 800e870:	0800e8d9 	.word	0x0800e8d9
 800e874:	0800e855 	.word	0x0800e855
 800e878:	0800e855 	.word	0x0800e855
 800e87c:	0800e855 	.word	0x0800e855
 800e880:	0800e855 	.word	0x0800e855
 800e884:	0800e8d9 	.word	0x0800e8d9
 800e888:	0800e855 	.word	0x0800e855
 800e88c:	0800e855 	.word	0x0800e855
 800e890:	0800e855 	.word	0x0800e855
 800e894:	0800e855 	.word	0x0800e855
 800e898:	0800e9e5 	.word	0x0800e9e5
 800e89c:	0800e909 	.word	0x0800e909
 800e8a0:	0800e9c7 	.word	0x0800e9c7
 800e8a4:	0800e855 	.word	0x0800e855
 800e8a8:	0800e855 	.word	0x0800e855
 800e8ac:	0800ea07 	.word	0x0800ea07
 800e8b0:	0800e855 	.word	0x0800e855
 800e8b4:	0800e909 	.word	0x0800e909
 800e8b8:	0800e855 	.word	0x0800e855
 800e8bc:	0800e855 	.word	0x0800e855
 800e8c0:	0800e9cf 	.word	0x0800e9cf
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	1d1a      	adds	r2, r3, #4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	602a      	str	r2, [r5, #0]
 800e8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e0a3      	b.n	800ea20 <_printf_i+0x1f4>
 800e8d8:	6820      	ldr	r0, [r4, #0]
 800e8da:	6829      	ldr	r1, [r5, #0]
 800e8dc:	0606      	lsls	r6, r0, #24
 800e8de:	f101 0304 	add.w	r3, r1, #4
 800e8e2:	d50a      	bpl.n	800e8fa <_printf_i+0xce>
 800e8e4:	680e      	ldr	r6, [r1, #0]
 800e8e6:	602b      	str	r3, [r5, #0]
 800e8e8:	2e00      	cmp	r6, #0
 800e8ea:	da03      	bge.n	800e8f4 <_printf_i+0xc8>
 800e8ec:	232d      	movs	r3, #45	; 0x2d
 800e8ee:	4276      	negs	r6, r6
 800e8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8f4:	485e      	ldr	r0, [pc, #376]	; (800ea70 <_printf_i+0x244>)
 800e8f6:	230a      	movs	r3, #10
 800e8f8:	e019      	b.n	800e92e <_printf_i+0x102>
 800e8fa:	680e      	ldr	r6, [r1, #0]
 800e8fc:	602b      	str	r3, [r5, #0]
 800e8fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e902:	bf18      	it	ne
 800e904:	b236      	sxthne	r6, r6
 800e906:	e7ef      	b.n	800e8e8 <_printf_i+0xbc>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	6820      	ldr	r0, [r4, #0]
 800e90c:	1d19      	adds	r1, r3, #4
 800e90e:	6029      	str	r1, [r5, #0]
 800e910:	0601      	lsls	r1, r0, #24
 800e912:	d501      	bpl.n	800e918 <_printf_i+0xec>
 800e914:	681e      	ldr	r6, [r3, #0]
 800e916:	e002      	b.n	800e91e <_printf_i+0xf2>
 800e918:	0646      	lsls	r6, r0, #25
 800e91a:	d5fb      	bpl.n	800e914 <_printf_i+0xe8>
 800e91c:	881e      	ldrh	r6, [r3, #0]
 800e91e:	4854      	ldr	r0, [pc, #336]	; (800ea70 <_printf_i+0x244>)
 800e920:	2f6f      	cmp	r7, #111	; 0x6f
 800e922:	bf0c      	ite	eq
 800e924:	2308      	moveq	r3, #8
 800e926:	230a      	movne	r3, #10
 800e928:	2100      	movs	r1, #0
 800e92a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e92e:	6865      	ldr	r5, [r4, #4]
 800e930:	60a5      	str	r5, [r4, #8]
 800e932:	2d00      	cmp	r5, #0
 800e934:	bfa2      	ittt	ge
 800e936:	6821      	ldrge	r1, [r4, #0]
 800e938:	f021 0104 	bicge.w	r1, r1, #4
 800e93c:	6021      	strge	r1, [r4, #0]
 800e93e:	b90e      	cbnz	r6, 800e944 <_printf_i+0x118>
 800e940:	2d00      	cmp	r5, #0
 800e942:	d04d      	beq.n	800e9e0 <_printf_i+0x1b4>
 800e944:	4615      	mov	r5, r2
 800e946:	fbb6 f1f3 	udiv	r1, r6, r3
 800e94a:	fb03 6711 	mls	r7, r3, r1, r6
 800e94e:	5dc7      	ldrb	r7, [r0, r7]
 800e950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e954:	4637      	mov	r7, r6
 800e956:	42bb      	cmp	r3, r7
 800e958:	460e      	mov	r6, r1
 800e95a:	d9f4      	bls.n	800e946 <_printf_i+0x11a>
 800e95c:	2b08      	cmp	r3, #8
 800e95e:	d10b      	bne.n	800e978 <_printf_i+0x14c>
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	07de      	lsls	r6, r3, #31
 800e964:	d508      	bpl.n	800e978 <_printf_i+0x14c>
 800e966:	6923      	ldr	r3, [r4, #16]
 800e968:	6861      	ldr	r1, [r4, #4]
 800e96a:	4299      	cmp	r1, r3
 800e96c:	bfde      	ittt	le
 800e96e:	2330      	movle	r3, #48	; 0x30
 800e970:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e974:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e978:	1b52      	subs	r2, r2, r5
 800e97a:	6122      	str	r2, [r4, #16]
 800e97c:	f8cd a000 	str.w	sl, [sp]
 800e980:	464b      	mov	r3, r9
 800e982:	aa03      	add	r2, sp, #12
 800e984:	4621      	mov	r1, r4
 800e986:	4640      	mov	r0, r8
 800e988:	f7ff fee2 	bl	800e750 <_printf_common>
 800e98c:	3001      	adds	r0, #1
 800e98e:	d14c      	bne.n	800ea2a <_printf_i+0x1fe>
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
 800e994:	b004      	add	sp, #16
 800e996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99a:	4835      	ldr	r0, [pc, #212]	; (800ea70 <_printf_i+0x244>)
 800e99c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e9a0:	6829      	ldr	r1, [r5, #0]
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e9a8:	6029      	str	r1, [r5, #0]
 800e9aa:	061d      	lsls	r5, r3, #24
 800e9ac:	d514      	bpl.n	800e9d8 <_printf_i+0x1ac>
 800e9ae:	07df      	lsls	r7, r3, #31
 800e9b0:	bf44      	itt	mi
 800e9b2:	f043 0320 	orrmi.w	r3, r3, #32
 800e9b6:	6023      	strmi	r3, [r4, #0]
 800e9b8:	b91e      	cbnz	r6, 800e9c2 <_printf_i+0x196>
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	f023 0320 	bic.w	r3, r3, #32
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	2310      	movs	r3, #16
 800e9c4:	e7b0      	b.n	800e928 <_printf_i+0xfc>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f043 0320 	orr.w	r3, r3, #32
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	2378      	movs	r3, #120	; 0x78
 800e9d0:	4828      	ldr	r0, [pc, #160]	; (800ea74 <_printf_i+0x248>)
 800e9d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9d6:	e7e3      	b.n	800e9a0 <_printf_i+0x174>
 800e9d8:	0659      	lsls	r1, r3, #25
 800e9da:	bf48      	it	mi
 800e9dc:	b2b6      	uxthmi	r6, r6
 800e9de:	e7e6      	b.n	800e9ae <_printf_i+0x182>
 800e9e0:	4615      	mov	r5, r2
 800e9e2:	e7bb      	b.n	800e95c <_printf_i+0x130>
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	6826      	ldr	r6, [r4, #0]
 800e9e8:	6961      	ldr	r1, [r4, #20]
 800e9ea:	1d18      	adds	r0, r3, #4
 800e9ec:	6028      	str	r0, [r5, #0]
 800e9ee:	0635      	lsls	r5, r6, #24
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	d501      	bpl.n	800e9f8 <_printf_i+0x1cc>
 800e9f4:	6019      	str	r1, [r3, #0]
 800e9f6:	e002      	b.n	800e9fe <_printf_i+0x1d2>
 800e9f8:	0670      	lsls	r0, r6, #25
 800e9fa:	d5fb      	bpl.n	800e9f4 <_printf_i+0x1c8>
 800e9fc:	8019      	strh	r1, [r3, #0]
 800e9fe:	2300      	movs	r3, #0
 800ea00:	6123      	str	r3, [r4, #16]
 800ea02:	4615      	mov	r5, r2
 800ea04:	e7ba      	b.n	800e97c <_printf_i+0x150>
 800ea06:	682b      	ldr	r3, [r5, #0]
 800ea08:	1d1a      	adds	r2, r3, #4
 800ea0a:	602a      	str	r2, [r5, #0]
 800ea0c:	681d      	ldr	r5, [r3, #0]
 800ea0e:	6862      	ldr	r2, [r4, #4]
 800ea10:	2100      	movs	r1, #0
 800ea12:	4628      	mov	r0, r5
 800ea14:	f7f1 fbec 	bl	80001f0 <memchr>
 800ea18:	b108      	cbz	r0, 800ea1e <_printf_i+0x1f2>
 800ea1a:	1b40      	subs	r0, r0, r5
 800ea1c:	6060      	str	r0, [r4, #4]
 800ea1e:	6863      	ldr	r3, [r4, #4]
 800ea20:	6123      	str	r3, [r4, #16]
 800ea22:	2300      	movs	r3, #0
 800ea24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea28:	e7a8      	b.n	800e97c <_printf_i+0x150>
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	4649      	mov	r1, r9
 800ea30:	4640      	mov	r0, r8
 800ea32:	47d0      	blx	sl
 800ea34:	3001      	adds	r0, #1
 800ea36:	d0ab      	beq.n	800e990 <_printf_i+0x164>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	079b      	lsls	r3, r3, #30
 800ea3c:	d413      	bmi.n	800ea66 <_printf_i+0x23a>
 800ea3e:	68e0      	ldr	r0, [r4, #12]
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	4298      	cmp	r0, r3
 800ea44:	bfb8      	it	lt
 800ea46:	4618      	movlt	r0, r3
 800ea48:	e7a4      	b.n	800e994 <_printf_i+0x168>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4649      	mov	r1, r9
 800ea50:	4640      	mov	r0, r8
 800ea52:	47d0      	blx	sl
 800ea54:	3001      	adds	r0, #1
 800ea56:	d09b      	beq.n	800e990 <_printf_i+0x164>
 800ea58:	3501      	adds	r5, #1
 800ea5a:	68e3      	ldr	r3, [r4, #12]
 800ea5c:	9903      	ldr	r1, [sp, #12]
 800ea5e:	1a5b      	subs	r3, r3, r1
 800ea60:	42ab      	cmp	r3, r5
 800ea62:	dcf2      	bgt.n	800ea4a <_printf_i+0x21e>
 800ea64:	e7eb      	b.n	800ea3e <_printf_i+0x212>
 800ea66:	2500      	movs	r5, #0
 800ea68:	f104 0619 	add.w	r6, r4, #25
 800ea6c:	e7f5      	b.n	800ea5a <_printf_i+0x22e>
 800ea6e:	bf00      	nop
 800ea70:	080158ce 	.word	0x080158ce
 800ea74:	080158df 	.word	0x080158df

0800ea78 <_sbrk_r>:
 800ea78:	b538      	push	{r3, r4, r5, lr}
 800ea7a:	4d06      	ldr	r5, [pc, #24]	; (800ea94 <_sbrk_r+0x1c>)
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	4604      	mov	r4, r0
 800ea80:	4608      	mov	r0, r1
 800ea82:	602b      	str	r3, [r5, #0]
 800ea84:	f7f7 f990 	bl	8005da8 <_sbrk>
 800ea88:	1c43      	adds	r3, r0, #1
 800ea8a:	d102      	bne.n	800ea92 <_sbrk_r+0x1a>
 800ea8c:	682b      	ldr	r3, [r5, #0]
 800ea8e:	b103      	cbz	r3, 800ea92 <_sbrk_r+0x1a>
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	bd38      	pop	{r3, r4, r5, pc}
 800ea94:	200030f8 	.word	0x200030f8

0800ea98 <siprintf>:
 800ea98:	b40e      	push	{r1, r2, r3}
 800ea9a:	b500      	push	{lr}
 800ea9c:	b09c      	sub	sp, #112	; 0x70
 800ea9e:	ab1d      	add	r3, sp, #116	; 0x74
 800eaa0:	9002      	str	r0, [sp, #8]
 800eaa2:	9006      	str	r0, [sp, #24]
 800eaa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eaa8:	4809      	ldr	r0, [pc, #36]	; (800ead0 <siprintf+0x38>)
 800eaaa:	9107      	str	r1, [sp, #28]
 800eaac:	9104      	str	r1, [sp, #16]
 800eaae:	4909      	ldr	r1, [pc, #36]	; (800ead4 <siprintf+0x3c>)
 800eab0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab4:	9105      	str	r1, [sp, #20]
 800eab6:	6800      	ldr	r0, [r0, #0]
 800eab8:	9301      	str	r3, [sp, #4]
 800eaba:	a902      	add	r1, sp, #8
 800eabc:	f002 fd8e 	bl	80115dc <_svfiprintf_r>
 800eac0:	9b02      	ldr	r3, [sp, #8]
 800eac2:	2200      	movs	r2, #0
 800eac4:	701a      	strb	r2, [r3, #0]
 800eac6:	b01c      	add	sp, #112	; 0x70
 800eac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eacc:	b003      	add	sp, #12
 800eace:	4770      	bx	lr
 800ead0:	20000034 	.word	0x20000034
 800ead4:	ffff0208 	.word	0xffff0208

0800ead8 <strncmp>:
 800ead8:	b510      	push	{r4, lr}
 800eada:	b17a      	cbz	r2, 800eafc <strncmp+0x24>
 800eadc:	4603      	mov	r3, r0
 800eade:	3901      	subs	r1, #1
 800eae0:	1884      	adds	r4, r0, r2
 800eae2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eae6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eaea:	4290      	cmp	r0, r2
 800eaec:	d101      	bne.n	800eaf2 <strncmp+0x1a>
 800eaee:	42a3      	cmp	r3, r4
 800eaf0:	d101      	bne.n	800eaf6 <strncmp+0x1e>
 800eaf2:	1a80      	subs	r0, r0, r2
 800eaf4:	bd10      	pop	{r4, pc}
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d1f3      	bne.n	800eae2 <strncmp+0xa>
 800eafa:	e7fa      	b.n	800eaf2 <strncmp+0x1a>
 800eafc:	4610      	mov	r0, r2
 800eafe:	e7f9      	b.n	800eaf4 <strncmp+0x1c>

0800eb00 <sulp>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	4604      	mov	r4, r0
 800eb04:	460d      	mov	r5, r1
 800eb06:	ec45 4b10 	vmov	d0, r4, r5
 800eb0a:	4616      	mov	r6, r2
 800eb0c:	f002 fba6 	bl	801125c <__ulp>
 800eb10:	ec51 0b10 	vmov	r0, r1, d0
 800eb14:	b17e      	cbz	r6, 800eb36 <sulp+0x36>
 800eb16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eb1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	dd09      	ble.n	800eb36 <sulp+0x36>
 800eb22:	051b      	lsls	r3, r3, #20
 800eb24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800eb28:	2400      	movs	r4, #0
 800eb2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eb2e:	4622      	mov	r2, r4
 800eb30:	462b      	mov	r3, r5
 800eb32:	f7f1 fd69 	bl	8000608 <__aeabi_dmul>
 800eb36:	bd70      	pop	{r4, r5, r6, pc}

0800eb38 <_strtod_l>:
 800eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3c:	ed2d 8b02 	vpush	{d8}
 800eb40:	b09d      	sub	sp, #116	; 0x74
 800eb42:	461f      	mov	r7, r3
 800eb44:	2300      	movs	r3, #0
 800eb46:	9318      	str	r3, [sp, #96]	; 0x60
 800eb48:	4ba2      	ldr	r3, [pc, #648]	; (800edd4 <_strtod_l+0x29c>)
 800eb4a:	9213      	str	r2, [sp, #76]	; 0x4c
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	9305      	str	r3, [sp, #20]
 800eb50:	4604      	mov	r4, r0
 800eb52:	4618      	mov	r0, r3
 800eb54:	4688      	mov	r8, r1
 800eb56:	f7f1 fb43 	bl	80001e0 <strlen>
 800eb5a:	f04f 0a00 	mov.w	sl, #0
 800eb5e:	4605      	mov	r5, r0
 800eb60:	f04f 0b00 	mov.w	fp, #0
 800eb64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800eb68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb6a:	781a      	ldrb	r2, [r3, #0]
 800eb6c:	2a2b      	cmp	r2, #43	; 0x2b
 800eb6e:	d04e      	beq.n	800ec0e <_strtod_l+0xd6>
 800eb70:	d83b      	bhi.n	800ebea <_strtod_l+0xb2>
 800eb72:	2a0d      	cmp	r2, #13
 800eb74:	d834      	bhi.n	800ebe0 <_strtod_l+0xa8>
 800eb76:	2a08      	cmp	r2, #8
 800eb78:	d834      	bhi.n	800ebe4 <_strtod_l+0xac>
 800eb7a:	2a00      	cmp	r2, #0
 800eb7c:	d03e      	beq.n	800ebfc <_strtod_l+0xc4>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	930a      	str	r3, [sp, #40]	; 0x28
 800eb82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800eb84:	7833      	ldrb	r3, [r6, #0]
 800eb86:	2b30      	cmp	r3, #48	; 0x30
 800eb88:	f040 80b0 	bne.w	800ecec <_strtod_l+0x1b4>
 800eb8c:	7873      	ldrb	r3, [r6, #1]
 800eb8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eb92:	2b58      	cmp	r3, #88	; 0x58
 800eb94:	d168      	bne.n	800ec68 <_strtod_l+0x130>
 800eb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	ab18      	add	r3, sp, #96	; 0x60
 800eb9c:	9702      	str	r7, [sp, #8]
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	4a8d      	ldr	r2, [pc, #564]	; (800edd8 <_strtod_l+0x2a0>)
 800eba2:	ab19      	add	r3, sp, #100	; 0x64
 800eba4:	a917      	add	r1, sp, #92	; 0x5c
 800eba6:	4620      	mov	r0, r4
 800eba8:	f001 fcbc 	bl	8010524 <__gethex>
 800ebac:	f010 0707 	ands.w	r7, r0, #7
 800ebb0:	4605      	mov	r5, r0
 800ebb2:	d005      	beq.n	800ebc0 <_strtod_l+0x88>
 800ebb4:	2f06      	cmp	r7, #6
 800ebb6:	d12c      	bne.n	800ec12 <_strtod_l+0xda>
 800ebb8:	3601      	adds	r6, #1
 800ebba:	2300      	movs	r3, #0
 800ebbc:	9617      	str	r6, [sp, #92]	; 0x5c
 800ebbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ebc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f040 8590 	bne.w	800f6e8 <_strtod_l+0xbb0>
 800ebc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebca:	b1eb      	cbz	r3, 800ec08 <_strtod_l+0xd0>
 800ebcc:	4652      	mov	r2, sl
 800ebce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ebd2:	ec43 2b10 	vmov	d0, r2, r3
 800ebd6:	b01d      	add	sp, #116	; 0x74
 800ebd8:	ecbd 8b02 	vpop	{d8}
 800ebdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe0:	2a20      	cmp	r2, #32
 800ebe2:	d1cc      	bne.n	800eb7e <_strtod_l+0x46>
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	9317      	str	r3, [sp, #92]	; 0x5c
 800ebe8:	e7be      	b.n	800eb68 <_strtod_l+0x30>
 800ebea:	2a2d      	cmp	r2, #45	; 0x2d
 800ebec:	d1c7      	bne.n	800eb7e <_strtod_l+0x46>
 800ebee:	2201      	movs	r2, #1
 800ebf0:	920a      	str	r2, [sp, #40]	; 0x28
 800ebf2:	1c5a      	adds	r2, r3, #1
 800ebf4:	9217      	str	r2, [sp, #92]	; 0x5c
 800ebf6:	785b      	ldrb	r3, [r3, #1]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1c2      	bne.n	800eb82 <_strtod_l+0x4a>
 800ebfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebfe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f040 856e 	bne.w	800f6e4 <_strtod_l+0xbac>
 800ec08:	4652      	mov	r2, sl
 800ec0a:	465b      	mov	r3, fp
 800ec0c:	e7e1      	b.n	800ebd2 <_strtod_l+0x9a>
 800ec0e:	2200      	movs	r2, #0
 800ec10:	e7ee      	b.n	800ebf0 <_strtod_l+0xb8>
 800ec12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec14:	b13a      	cbz	r2, 800ec26 <_strtod_l+0xee>
 800ec16:	2135      	movs	r1, #53	; 0x35
 800ec18:	a81a      	add	r0, sp, #104	; 0x68
 800ec1a:	f002 fc2a 	bl	8011472 <__copybits>
 800ec1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec20:	4620      	mov	r0, r4
 800ec22:	f001 ffe9 	bl	8010bf8 <_Bfree>
 800ec26:	3f01      	subs	r7, #1
 800ec28:	2f04      	cmp	r7, #4
 800ec2a:	d806      	bhi.n	800ec3a <_strtod_l+0x102>
 800ec2c:	e8df f007 	tbb	[pc, r7]
 800ec30:	1714030a 	.word	0x1714030a
 800ec34:	0a          	.byte	0x0a
 800ec35:	00          	.byte	0x00
 800ec36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ec3a:	0728      	lsls	r0, r5, #28
 800ec3c:	d5c0      	bpl.n	800ebc0 <_strtod_l+0x88>
 800ec3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ec42:	e7bd      	b.n	800ebc0 <_strtod_l+0x88>
 800ec44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ec48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ec4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ec52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ec56:	e7f0      	b.n	800ec3a <_strtod_l+0x102>
 800ec58:	f8df b180 	ldr.w	fp, [pc, #384]	; 800eddc <_strtod_l+0x2a4>
 800ec5c:	e7ed      	b.n	800ec3a <_strtod_l+0x102>
 800ec5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ec62:	f04f 3aff 	mov.w	sl, #4294967295
 800ec66:	e7e8      	b.n	800ec3a <_strtod_l+0x102>
 800ec68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec6a:	1c5a      	adds	r2, r3, #1
 800ec6c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec6e:	785b      	ldrb	r3, [r3, #1]
 800ec70:	2b30      	cmp	r3, #48	; 0x30
 800ec72:	d0f9      	beq.n	800ec68 <_strtod_l+0x130>
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0a3      	beq.n	800ebc0 <_strtod_l+0x88>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	f04f 0900 	mov.w	r9, #0
 800ec7e:	9304      	str	r3, [sp, #16]
 800ec80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec82:	9308      	str	r3, [sp, #32]
 800ec84:	f8cd 901c 	str.w	r9, [sp, #28]
 800ec88:	464f      	mov	r7, r9
 800ec8a:	220a      	movs	r2, #10
 800ec8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ec8e:	7806      	ldrb	r6, [r0, #0]
 800ec90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ec94:	b2d9      	uxtb	r1, r3
 800ec96:	2909      	cmp	r1, #9
 800ec98:	d92a      	bls.n	800ecf0 <_strtod_l+0x1b8>
 800ec9a:	9905      	ldr	r1, [sp, #20]
 800ec9c:	462a      	mov	r2, r5
 800ec9e:	f7ff ff1b 	bl	800ead8 <strncmp>
 800eca2:	b398      	cbz	r0, 800ed0c <_strtod_l+0x1d4>
 800eca4:	2000      	movs	r0, #0
 800eca6:	4632      	mov	r2, r6
 800eca8:	463d      	mov	r5, r7
 800ecaa:	9005      	str	r0, [sp, #20]
 800ecac:	4603      	mov	r3, r0
 800ecae:	2a65      	cmp	r2, #101	; 0x65
 800ecb0:	d001      	beq.n	800ecb6 <_strtod_l+0x17e>
 800ecb2:	2a45      	cmp	r2, #69	; 0x45
 800ecb4:	d118      	bne.n	800ece8 <_strtod_l+0x1b0>
 800ecb6:	b91d      	cbnz	r5, 800ecc0 <_strtod_l+0x188>
 800ecb8:	9a04      	ldr	r2, [sp, #16]
 800ecba:	4302      	orrs	r2, r0
 800ecbc:	d09e      	beq.n	800ebfc <_strtod_l+0xc4>
 800ecbe:	2500      	movs	r5, #0
 800ecc0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ecc4:	f108 0201 	add.w	r2, r8, #1
 800ecc8:	9217      	str	r2, [sp, #92]	; 0x5c
 800ecca:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ecce:	2a2b      	cmp	r2, #43	; 0x2b
 800ecd0:	d075      	beq.n	800edbe <_strtod_l+0x286>
 800ecd2:	2a2d      	cmp	r2, #45	; 0x2d
 800ecd4:	d07b      	beq.n	800edce <_strtod_l+0x296>
 800ecd6:	f04f 0c00 	mov.w	ip, #0
 800ecda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ecde:	2909      	cmp	r1, #9
 800ece0:	f240 8082 	bls.w	800ede8 <_strtod_l+0x2b0>
 800ece4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ece8:	2600      	movs	r6, #0
 800ecea:	e09d      	b.n	800ee28 <_strtod_l+0x2f0>
 800ecec:	2300      	movs	r3, #0
 800ecee:	e7c4      	b.n	800ec7a <_strtod_l+0x142>
 800ecf0:	2f08      	cmp	r7, #8
 800ecf2:	bfd8      	it	le
 800ecf4:	9907      	ldrle	r1, [sp, #28]
 800ecf6:	f100 0001 	add.w	r0, r0, #1
 800ecfa:	bfda      	itte	le
 800ecfc:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed00:	9307      	strle	r3, [sp, #28]
 800ed02:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ed06:	3701      	adds	r7, #1
 800ed08:	9017      	str	r0, [sp, #92]	; 0x5c
 800ed0a:	e7bf      	b.n	800ec8c <_strtod_l+0x154>
 800ed0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed0e:	195a      	adds	r2, r3, r5
 800ed10:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed12:	5d5a      	ldrb	r2, [r3, r5]
 800ed14:	2f00      	cmp	r7, #0
 800ed16:	d037      	beq.n	800ed88 <_strtod_l+0x250>
 800ed18:	9005      	str	r0, [sp, #20]
 800ed1a:	463d      	mov	r5, r7
 800ed1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ed20:	2b09      	cmp	r3, #9
 800ed22:	d912      	bls.n	800ed4a <_strtod_l+0x212>
 800ed24:	2301      	movs	r3, #1
 800ed26:	e7c2      	b.n	800ecae <_strtod_l+0x176>
 800ed28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed2a:	1c5a      	adds	r2, r3, #1
 800ed2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed2e:	785a      	ldrb	r2, [r3, #1]
 800ed30:	3001      	adds	r0, #1
 800ed32:	2a30      	cmp	r2, #48	; 0x30
 800ed34:	d0f8      	beq.n	800ed28 <_strtod_l+0x1f0>
 800ed36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ed3a:	2b08      	cmp	r3, #8
 800ed3c:	f200 84d9 	bhi.w	800f6f2 <_strtod_l+0xbba>
 800ed40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed42:	9005      	str	r0, [sp, #20]
 800ed44:	2000      	movs	r0, #0
 800ed46:	9308      	str	r3, [sp, #32]
 800ed48:	4605      	mov	r5, r0
 800ed4a:	3a30      	subs	r2, #48	; 0x30
 800ed4c:	f100 0301 	add.w	r3, r0, #1
 800ed50:	d014      	beq.n	800ed7c <_strtod_l+0x244>
 800ed52:	9905      	ldr	r1, [sp, #20]
 800ed54:	4419      	add	r1, r3
 800ed56:	9105      	str	r1, [sp, #20]
 800ed58:	462b      	mov	r3, r5
 800ed5a:	eb00 0e05 	add.w	lr, r0, r5
 800ed5e:	210a      	movs	r1, #10
 800ed60:	4573      	cmp	r3, lr
 800ed62:	d113      	bne.n	800ed8c <_strtod_l+0x254>
 800ed64:	182b      	adds	r3, r5, r0
 800ed66:	2b08      	cmp	r3, #8
 800ed68:	f105 0501 	add.w	r5, r5, #1
 800ed6c:	4405      	add	r5, r0
 800ed6e:	dc1c      	bgt.n	800edaa <_strtod_l+0x272>
 800ed70:	9907      	ldr	r1, [sp, #28]
 800ed72:	230a      	movs	r3, #10
 800ed74:	fb03 2301 	mla	r3, r3, r1, r2
 800ed78:	9307      	str	r3, [sp, #28]
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ed7e:	1c51      	adds	r1, r2, #1
 800ed80:	9117      	str	r1, [sp, #92]	; 0x5c
 800ed82:	7852      	ldrb	r2, [r2, #1]
 800ed84:	4618      	mov	r0, r3
 800ed86:	e7c9      	b.n	800ed1c <_strtod_l+0x1e4>
 800ed88:	4638      	mov	r0, r7
 800ed8a:	e7d2      	b.n	800ed32 <_strtod_l+0x1fa>
 800ed8c:	2b08      	cmp	r3, #8
 800ed8e:	dc04      	bgt.n	800ed9a <_strtod_l+0x262>
 800ed90:	9e07      	ldr	r6, [sp, #28]
 800ed92:	434e      	muls	r6, r1
 800ed94:	9607      	str	r6, [sp, #28]
 800ed96:	3301      	adds	r3, #1
 800ed98:	e7e2      	b.n	800ed60 <_strtod_l+0x228>
 800ed9a:	f103 0c01 	add.w	ip, r3, #1
 800ed9e:	f1bc 0f10 	cmp.w	ip, #16
 800eda2:	bfd8      	it	le
 800eda4:	fb01 f909 	mulle.w	r9, r1, r9
 800eda8:	e7f5      	b.n	800ed96 <_strtod_l+0x25e>
 800edaa:	2d10      	cmp	r5, #16
 800edac:	bfdc      	itt	le
 800edae:	230a      	movle	r3, #10
 800edb0:	fb03 2909 	mlale	r9, r3, r9, r2
 800edb4:	e7e1      	b.n	800ed7a <_strtod_l+0x242>
 800edb6:	2300      	movs	r3, #0
 800edb8:	9305      	str	r3, [sp, #20]
 800edba:	2301      	movs	r3, #1
 800edbc:	e77c      	b.n	800ecb8 <_strtod_l+0x180>
 800edbe:	f04f 0c00 	mov.w	ip, #0
 800edc2:	f108 0202 	add.w	r2, r8, #2
 800edc6:	9217      	str	r2, [sp, #92]	; 0x5c
 800edc8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800edcc:	e785      	b.n	800ecda <_strtod_l+0x1a2>
 800edce:	f04f 0c01 	mov.w	ip, #1
 800edd2:	e7f6      	b.n	800edc2 <_strtod_l+0x28a>
 800edd4:	08015a38 	.word	0x08015a38
 800edd8:	080158f0 	.word	0x080158f0
 800eddc:	7ff00000 	.word	0x7ff00000
 800ede0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ede2:	1c51      	adds	r1, r2, #1
 800ede4:	9117      	str	r1, [sp, #92]	; 0x5c
 800ede6:	7852      	ldrb	r2, [r2, #1]
 800ede8:	2a30      	cmp	r2, #48	; 0x30
 800edea:	d0f9      	beq.n	800ede0 <_strtod_l+0x2a8>
 800edec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800edf0:	2908      	cmp	r1, #8
 800edf2:	f63f af79 	bhi.w	800ece8 <_strtod_l+0x1b0>
 800edf6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800edfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800edfc:	9206      	str	r2, [sp, #24]
 800edfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee00:	1c51      	adds	r1, r2, #1
 800ee02:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee04:	7852      	ldrb	r2, [r2, #1]
 800ee06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ee0a:	2e09      	cmp	r6, #9
 800ee0c:	d937      	bls.n	800ee7e <_strtod_l+0x346>
 800ee0e:	9e06      	ldr	r6, [sp, #24]
 800ee10:	1b89      	subs	r1, r1, r6
 800ee12:	2908      	cmp	r1, #8
 800ee14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ee18:	dc02      	bgt.n	800ee20 <_strtod_l+0x2e8>
 800ee1a:	4576      	cmp	r6, lr
 800ee1c:	bfa8      	it	ge
 800ee1e:	4676      	movge	r6, lr
 800ee20:	f1bc 0f00 	cmp.w	ip, #0
 800ee24:	d000      	beq.n	800ee28 <_strtod_l+0x2f0>
 800ee26:	4276      	negs	r6, r6
 800ee28:	2d00      	cmp	r5, #0
 800ee2a:	d14d      	bne.n	800eec8 <_strtod_l+0x390>
 800ee2c:	9904      	ldr	r1, [sp, #16]
 800ee2e:	4301      	orrs	r1, r0
 800ee30:	f47f aec6 	bne.w	800ebc0 <_strtod_l+0x88>
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	f47f aee1 	bne.w	800ebfc <_strtod_l+0xc4>
 800ee3a:	2a69      	cmp	r2, #105	; 0x69
 800ee3c:	d027      	beq.n	800ee8e <_strtod_l+0x356>
 800ee3e:	dc24      	bgt.n	800ee8a <_strtod_l+0x352>
 800ee40:	2a49      	cmp	r2, #73	; 0x49
 800ee42:	d024      	beq.n	800ee8e <_strtod_l+0x356>
 800ee44:	2a4e      	cmp	r2, #78	; 0x4e
 800ee46:	f47f aed9 	bne.w	800ebfc <_strtod_l+0xc4>
 800ee4a:	499f      	ldr	r1, [pc, #636]	; (800f0c8 <_strtod_l+0x590>)
 800ee4c:	a817      	add	r0, sp, #92	; 0x5c
 800ee4e:	f001 fdc1 	bl	80109d4 <__match>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	f43f aed2 	beq.w	800ebfc <_strtod_l+0xc4>
 800ee58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	2b28      	cmp	r3, #40	; 0x28
 800ee5e:	d12d      	bne.n	800eebc <_strtod_l+0x384>
 800ee60:	499a      	ldr	r1, [pc, #616]	; (800f0cc <_strtod_l+0x594>)
 800ee62:	aa1a      	add	r2, sp, #104	; 0x68
 800ee64:	a817      	add	r0, sp, #92	; 0x5c
 800ee66:	f001 fdc9 	bl	80109fc <__hexnan>
 800ee6a:	2805      	cmp	r0, #5
 800ee6c:	d126      	bne.n	800eebc <_strtod_l+0x384>
 800ee6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ee74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ee78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ee7c:	e6a0      	b.n	800ebc0 <_strtod_l+0x88>
 800ee7e:	210a      	movs	r1, #10
 800ee80:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ee84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ee88:	e7b9      	b.n	800edfe <_strtod_l+0x2c6>
 800ee8a:	2a6e      	cmp	r2, #110	; 0x6e
 800ee8c:	e7db      	b.n	800ee46 <_strtod_l+0x30e>
 800ee8e:	4990      	ldr	r1, [pc, #576]	; (800f0d0 <_strtod_l+0x598>)
 800ee90:	a817      	add	r0, sp, #92	; 0x5c
 800ee92:	f001 fd9f 	bl	80109d4 <__match>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f43f aeb0 	beq.w	800ebfc <_strtod_l+0xc4>
 800ee9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee9e:	498d      	ldr	r1, [pc, #564]	; (800f0d4 <_strtod_l+0x59c>)
 800eea0:	3b01      	subs	r3, #1
 800eea2:	a817      	add	r0, sp, #92	; 0x5c
 800eea4:	9317      	str	r3, [sp, #92]	; 0x5c
 800eea6:	f001 fd95 	bl	80109d4 <__match>
 800eeaa:	b910      	cbnz	r0, 800eeb2 <_strtod_l+0x37a>
 800eeac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eeae:	3301      	adds	r3, #1
 800eeb0:	9317      	str	r3, [sp, #92]	; 0x5c
 800eeb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f0e4 <_strtod_l+0x5ac>
 800eeb6:	f04f 0a00 	mov.w	sl, #0
 800eeba:	e681      	b.n	800ebc0 <_strtod_l+0x88>
 800eebc:	4886      	ldr	r0, [pc, #536]	; (800f0d8 <_strtod_l+0x5a0>)
 800eebe:	f002 fc8f 	bl	80117e0 <nan>
 800eec2:	ec5b ab10 	vmov	sl, fp, d0
 800eec6:	e67b      	b.n	800ebc0 <_strtod_l+0x88>
 800eec8:	9b05      	ldr	r3, [sp, #20]
 800eeca:	9807      	ldr	r0, [sp, #28]
 800eecc:	1af3      	subs	r3, r6, r3
 800eece:	2f00      	cmp	r7, #0
 800eed0:	bf08      	it	eq
 800eed2:	462f      	moveq	r7, r5
 800eed4:	2d10      	cmp	r5, #16
 800eed6:	9306      	str	r3, [sp, #24]
 800eed8:	46a8      	mov	r8, r5
 800eeda:	bfa8      	it	ge
 800eedc:	f04f 0810 	movge.w	r8, #16
 800eee0:	f7f1 fb18 	bl	8000514 <__aeabi_ui2d>
 800eee4:	2d09      	cmp	r5, #9
 800eee6:	4682      	mov	sl, r0
 800eee8:	468b      	mov	fp, r1
 800eeea:	dd13      	ble.n	800ef14 <_strtod_l+0x3dc>
 800eeec:	4b7b      	ldr	r3, [pc, #492]	; (800f0dc <_strtod_l+0x5a4>)
 800eeee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800eef2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800eef6:	f7f1 fb87 	bl	8000608 <__aeabi_dmul>
 800eefa:	4682      	mov	sl, r0
 800eefc:	4648      	mov	r0, r9
 800eefe:	468b      	mov	fp, r1
 800ef00:	f7f1 fb08 	bl	8000514 <__aeabi_ui2d>
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	4650      	mov	r0, sl
 800ef0a:	4659      	mov	r1, fp
 800ef0c:	f7f1 f9c6 	bl	800029c <__adddf3>
 800ef10:	4682      	mov	sl, r0
 800ef12:	468b      	mov	fp, r1
 800ef14:	2d0f      	cmp	r5, #15
 800ef16:	dc38      	bgt.n	800ef8a <_strtod_l+0x452>
 800ef18:	9b06      	ldr	r3, [sp, #24]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f43f ae50 	beq.w	800ebc0 <_strtod_l+0x88>
 800ef20:	dd24      	ble.n	800ef6c <_strtod_l+0x434>
 800ef22:	2b16      	cmp	r3, #22
 800ef24:	dc0b      	bgt.n	800ef3e <_strtod_l+0x406>
 800ef26:	496d      	ldr	r1, [pc, #436]	; (800f0dc <_strtod_l+0x5a4>)
 800ef28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ef2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef30:	4652      	mov	r2, sl
 800ef32:	465b      	mov	r3, fp
 800ef34:	f7f1 fb68 	bl	8000608 <__aeabi_dmul>
 800ef38:	4682      	mov	sl, r0
 800ef3a:	468b      	mov	fp, r1
 800ef3c:	e640      	b.n	800ebc0 <_strtod_l+0x88>
 800ef3e:	9a06      	ldr	r2, [sp, #24]
 800ef40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ef44:	4293      	cmp	r3, r2
 800ef46:	db20      	blt.n	800ef8a <_strtod_l+0x452>
 800ef48:	4c64      	ldr	r4, [pc, #400]	; (800f0dc <_strtod_l+0x5a4>)
 800ef4a:	f1c5 050f 	rsb	r5, r5, #15
 800ef4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ef52:	4652      	mov	r2, sl
 800ef54:	465b      	mov	r3, fp
 800ef56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef5a:	f7f1 fb55 	bl	8000608 <__aeabi_dmul>
 800ef5e:	9b06      	ldr	r3, [sp, #24]
 800ef60:	1b5d      	subs	r5, r3, r5
 800ef62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ef66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ef6a:	e7e3      	b.n	800ef34 <_strtod_l+0x3fc>
 800ef6c:	9b06      	ldr	r3, [sp, #24]
 800ef6e:	3316      	adds	r3, #22
 800ef70:	db0b      	blt.n	800ef8a <_strtod_l+0x452>
 800ef72:	9b05      	ldr	r3, [sp, #20]
 800ef74:	1b9e      	subs	r6, r3, r6
 800ef76:	4b59      	ldr	r3, [pc, #356]	; (800f0dc <_strtod_l+0x5a4>)
 800ef78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ef7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef80:	4650      	mov	r0, sl
 800ef82:	4659      	mov	r1, fp
 800ef84:	f7f1 fc6a 	bl	800085c <__aeabi_ddiv>
 800ef88:	e7d6      	b.n	800ef38 <_strtod_l+0x400>
 800ef8a:	9b06      	ldr	r3, [sp, #24]
 800ef8c:	eba5 0808 	sub.w	r8, r5, r8
 800ef90:	4498      	add	r8, r3
 800ef92:	f1b8 0f00 	cmp.w	r8, #0
 800ef96:	dd74      	ble.n	800f082 <_strtod_l+0x54a>
 800ef98:	f018 030f 	ands.w	r3, r8, #15
 800ef9c:	d00a      	beq.n	800efb4 <_strtod_l+0x47c>
 800ef9e:	494f      	ldr	r1, [pc, #316]	; (800f0dc <_strtod_l+0x5a4>)
 800efa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efa4:	4652      	mov	r2, sl
 800efa6:	465b      	mov	r3, fp
 800efa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efac:	f7f1 fb2c 	bl	8000608 <__aeabi_dmul>
 800efb0:	4682      	mov	sl, r0
 800efb2:	468b      	mov	fp, r1
 800efb4:	f038 080f 	bics.w	r8, r8, #15
 800efb8:	d04f      	beq.n	800f05a <_strtod_l+0x522>
 800efba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800efbe:	dd22      	ble.n	800f006 <_strtod_l+0x4ce>
 800efc0:	2500      	movs	r5, #0
 800efc2:	462e      	mov	r6, r5
 800efc4:	9507      	str	r5, [sp, #28]
 800efc6:	9505      	str	r5, [sp, #20]
 800efc8:	2322      	movs	r3, #34	; 0x22
 800efca:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f0e4 <_strtod_l+0x5ac>
 800efce:	6023      	str	r3, [r4, #0]
 800efd0:	f04f 0a00 	mov.w	sl, #0
 800efd4:	9b07      	ldr	r3, [sp, #28]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f43f adf2 	beq.w	800ebc0 <_strtod_l+0x88>
 800efdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800efde:	4620      	mov	r0, r4
 800efe0:	f001 fe0a 	bl	8010bf8 <_Bfree>
 800efe4:	9905      	ldr	r1, [sp, #20]
 800efe6:	4620      	mov	r0, r4
 800efe8:	f001 fe06 	bl	8010bf8 <_Bfree>
 800efec:	4631      	mov	r1, r6
 800efee:	4620      	mov	r0, r4
 800eff0:	f001 fe02 	bl	8010bf8 <_Bfree>
 800eff4:	9907      	ldr	r1, [sp, #28]
 800eff6:	4620      	mov	r0, r4
 800eff8:	f001 fdfe 	bl	8010bf8 <_Bfree>
 800effc:	4629      	mov	r1, r5
 800effe:	4620      	mov	r0, r4
 800f000:	f001 fdfa 	bl	8010bf8 <_Bfree>
 800f004:	e5dc      	b.n	800ebc0 <_strtod_l+0x88>
 800f006:	4b36      	ldr	r3, [pc, #216]	; (800f0e0 <_strtod_l+0x5a8>)
 800f008:	9304      	str	r3, [sp, #16]
 800f00a:	2300      	movs	r3, #0
 800f00c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f010:	4650      	mov	r0, sl
 800f012:	4659      	mov	r1, fp
 800f014:	4699      	mov	r9, r3
 800f016:	f1b8 0f01 	cmp.w	r8, #1
 800f01a:	dc21      	bgt.n	800f060 <_strtod_l+0x528>
 800f01c:	b10b      	cbz	r3, 800f022 <_strtod_l+0x4ea>
 800f01e:	4682      	mov	sl, r0
 800f020:	468b      	mov	fp, r1
 800f022:	4b2f      	ldr	r3, [pc, #188]	; (800f0e0 <_strtod_l+0x5a8>)
 800f024:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f028:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f02c:	4652      	mov	r2, sl
 800f02e:	465b      	mov	r3, fp
 800f030:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f034:	f7f1 fae8 	bl	8000608 <__aeabi_dmul>
 800f038:	4b2a      	ldr	r3, [pc, #168]	; (800f0e4 <_strtod_l+0x5ac>)
 800f03a:	460a      	mov	r2, r1
 800f03c:	400b      	ands	r3, r1
 800f03e:	492a      	ldr	r1, [pc, #168]	; (800f0e8 <_strtod_l+0x5b0>)
 800f040:	428b      	cmp	r3, r1
 800f042:	4682      	mov	sl, r0
 800f044:	d8bc      	bhi.n	800efc0 <_strtod_l+0x488>
 800f046:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f04a:	428b      	cmp	r3, r1
 800f04c:	bf86      	itte	hi
 800f04e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f0ec <_strtod_l+0x5b4>
 800f052:	f04f 3aff 	movhi.w	sl, #4294967295
 800f056:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f05a:	2300      	movs	r3, #0
 800f05c:	9304      	str	r3, [sp, #16]
 800f05e:	e084      	b.n	800f16a <_strtod_l+0x632>
 800f060:	f018 0f01 	tst.w	r8, #1
 800f064:	d005      	beq.n	800f072 <_strtod_l+0x53a>
 800f066:	9b04      	ldr	r3, [sp, #16]
 800f068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06c:	f7f1 facc 	bl	8000608 <__aeabi_dmul>
 800f070:	2301      	movs	r3, #1
 800f072:	9a04      	ldr	r2, [sp, #16]
 800f074:	3208      	adds	r2, #8
 800f076:	f109 0901 	add.w	r9, r9, #1
 800f07a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f07e:	9204      	str	r2, [sp, #16]
 800f080:	e7c9      	b.n	800f016 <_strtod_l+0x4de>
 800f082:	d0ea      	beq.n	800f05a <_strtod_l+0x522>
 800f084:	f1c8 0800 	rsb	r8, r8, #0
 800f088:	f018 020f 	ands.w	r2, r8, #15
 800f08c:	d00a      	beq.n	800f0a4 <_strtod_l+0x56c>
 800f08e:	4b13      	ldr	r3, [pc, #76]	; (800f0dc <_strtod_l+0x5a4>)
 800f090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f094:	4650      	mov	r0, sl
 800f096:	4659      	mov	r1, fp
 800f098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09c:	f7f1 fbde 	bl	800085c <__aeabi_ddiv>
 800f0a0:	4682      	mov	sl, r0
 800f0a2:	468b      	mov	fp, r1
 800f0a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f0a8:	d0d7      	beq.n	800f05a <_strtod_l+0x522>
 800f0aa:	f1b8 0f1f 	cmp.w	r8, #31
 800f0ae:	dd1f      	ble.n	800f0f0 <_strtod_l+0x5b8>
 800f0b0:	2500      	movs	r5, #0
 800f0b2:	462e      	mov	r6, r5
 800f0b4:	9507      	str	r5, [sp, #28]
 800f0b6:	9505      	str	r5, [sp, #20]
 800f0b8:	2322      	movs	r3, #34	; 0x22
 800f0ba:	f04f 0a00 	mov.w	sl, #0
 800f0be:	f04f 0b00 	mov.w	fp, #0
 800f0c2:	6023      	str	r3, [r4, #0]
 800f0c4:	e786      	b.n	800efd4 <_strtod_l+0x49c>
 800f0c6:	bf00      	nop
 800f0c8:	080158c9 	.word	0x080158c9
 800f0cc:	08015904 	.word	0x08015904
 800f0d0:	080158c1 	.word	0x080158c1
 800f0d4:	08015943 	.word	0x08015943
 800f0d8:	08015bf0 	.word	0x08015bf0
 800f0dc:	08015ad0 	.word	0x08015ad0
 800f0e0:	08015aa8 	.word	0x08015aa8
 800f0e4:	7ff00000 	.word	0x7ff00000
 800f0e8:	7ca00000 	.word	0x7ca00000
 800f0ec:	7fefffff 	.word	0x7fefffff
 800f0f0:	f018 0310 	ands.w	r3, r8, #16
 800f0f4:	bf18      	it	ne
 800f0f6:	236a      	movne	r3, #106	; 0x6a
 800f0f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f4a8 <_strtod_l+0x970>
 800f0fc:	9304      	str	r3, [sp, #16]
 800f0fe:	4650      	mov	r0, sl
 800f100:	4659      	mov	r1, fp
 800f102:	2300      	movs	r3, #0
 800f104:	f018 0f01 	tst.w	r8, #1
 800f108:	d004      	beq.n	800f114 <_strtod_l+0x5dc>
 800f10a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f10e:	f7f1 fa7b 	bl	8000608 <__aeabi_dmul>
 800f112:	2301      	movs	r3, #1
 800f114:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f118:	f109 0908 	add.w	r9, r9, #8
 800f11c:	d1f2      	bne.n	800f104 <_strtod_l+0x5cc>
 800f11e:	b10b      	cbz	r3, 800f124 <_strtod_l+0x5ec>
 800f120:	4682      	mov	sl, r0
 800f122:	468b      	mov	fp, r1
 800f124:	9b04      	ldr	r3, [sp, #16]
 800f126:	b1c3      	cbz	r3, 800f15a <_strtod_l+0x622>
 800f128:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f12c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f130:	2b00      	cmp	r3, #0
 800f132:	4659      	mov	r1, fp
 800f134:	dd11      	ble.n	800f15a <_strtod_l+0x622>
 800f136:	2b1f      	cmp	r3, #31
 800f138:	f340 8124 	ble.w	800f384 <_strtod_l+0x84c>
 800f13c:	2b34      	cmp	r3, #52	; 0x34
 800f13e:	bfde      	ittt	le
 800f140:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f144:	f04f 33ff 	movle.w	r3, #4294967295
 800f148:	fa03 f202 	lslle.w	r2, r3, r2
 800f14c:	f04f 0a00 	mov.w	sl, #0
 800f150:	bfcc      	ite	gt
 800f152:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f156:	ea02 0b01 	andle.w	fp, r2, r1
 800f15a:	2200      	movs	r2, #0
 800f15c:	2300      	movs	r3, #0
 800f15e:	4650      	mov	r0, sl
 800f160:	4659      	mov	r1, fp
 800f162:	f7f1 fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f166:	2800      	cmp	r0, #0
 800f168:	d1a2      	bne.n	800f0b0 <_strtod_l+0x578>
 800f16a:	9b07      	ldr	r3, [sp, #28]
 800f16c:	9300      	str	r3, [sp, #0]
 800f16e:	9908      	ldr	r1, [sp, #32]
 800f170:	462b      	mov	r3, r5
 800f172:	463a      	mov	r2, r7
 800f174:	4620      	mov	r0, r4
 800f176:	f001 fda7 	bl	8010cc8 <__s2b>
 800f17a:	9007      	str	r0, [sp, #28]
 800f17c:	2800      	cmp	r0, #0
 800f17e:	f43f af1f 	beq.w	800efc0 <_strtod_l+0x488>
 800f182:	9b05      	ldr	r3, [sp, #20]
 800f184:	1b9e      	subs	r6, r3, r6
 800f186:	9b06      	ldr	r3, [sp, #24]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	bfb4      	ite	lt
 800f18c:	4633      	movlt	r3, r6
 800f18e:	2300      	movge	r3, #0
 800f190:	930c      	str	r3, [sp, #48]	; 0x30
 800f192:	9b06      	ldr	r3, [sp, #24]
 800f194:	2500      	movs	r5, #0
 800f196:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f19a:	9312      	str	r3, [sp, #72]	; 0x48
 800f19c:	462e      	mov	r6, r5
 800f19e:	9b07      	ldr	r3, [sp, #28]
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	6859      	ldr	r1, [r3, #4]
 800f1a4:	f001 fce8 	bl	8010b78 <_Balloc>
 800f1a8:	9005      	str	r0, [sp, #20]
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	f43f af0c 	beq.w	800efc8 <_strtod_l+0x490>
 800f1b0:	9b07      	ldr	r3, [sp, #28]
 800f1b2:	691a      	ldr	r2, [r3, #16]
 800f1b4:	3202      	adds	r2, #2
 800f1b6:	f103 010c 	add.w	r1, r3, #12
 800f1ba:	0092      	lsls	r2, r2, #2
 800f1bc:	300c      	adds	r0, #12
 800f1be:	f7fe fefb 	bl	800dfb8 <memcpy>
 800f1c2:	ec4b ab10 	vmov	d0, sl, fp
 800f1c6:	aa1a      	add	r2, sp, #104	; 0x68
 800f1c8:	a919      	add	r1, sp, #100	; 0x64
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f002 f8c2 	bl	8011354 <__d2b>
 800f1d0:	ec4b ab18 	vmov	d8, sl, fp
 800f1d4:	9018      	str	r0, [sp, #96]	; 0x60
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	f43f aef6 	beq.w	800efc8 <_strtod_l+0x490>
 800f1dc:	2101      	movs	r1, #1
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f001 fe0c 	bl	8010dfc <__i2b>
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	f43f aeee 	beq.w	800efc8 <_strtod_l+0x490>
 800f1ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f1ee:	9904      	ldr	r1, [sp, #16]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	bfab      	itete	ge
 800f1f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f1f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f1f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f1fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f1fe:	bfac      	ite	ge
 800f200:	eb03 0902 	addge.w	r9, r3, r2
 800f204:	1ad7      	sublt	r7, r2, r3
 800f206:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f208:	eba3 0801 	sub.w	r8, r3, r1
 800f20c:	4490      	add	r8, r2
 800f20e:	4ba1      	ldr	r3, [pc, #644]	; (800f494 <_strtod_l+0x95c>)
 800f210:	f108 38ff 	add.w	r8, r8, #4294967295
 800f214:	4598      	cmp	r8, r3
 800f216:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f21a:	f280 80c7 	bge.w	800f3ac <_strtod_l+0x874>
 800f21e:	eba3 0308 	sub.w	r3, r3, r8
 800f222:	2b1f      	cmp	r3, #31
 800f224:	eba2 0203 	sub.w	r2, r2, r3
 800f228:	f04f 0101 	mov.w	r1, #1
 800f22c:	f300 80b1 	bgt.w	800f392 <_strtod_l+0x85a>
 800f230:	fa01 f303 	lsl.w	r3, r1, r3
 800f234:	930d      	str	r3, [sp, #52]	; 0x34
 800f236:	2300      	movs	r3, #0
 800f238:	9308      	str	r3, [sp, #32]
 800f23a:	eb09 0802 	add.w	r8, r9, r2
 800f23e:	9b04      	ldr	r3, [sp, #16]
 800f240:	45c1      	cmp	r9, r8
 800f242:	4417      	add	r7, r2
 800f244:	441f      	add	r7, r3
 800f246:	464b      	mov	r3, r9
 800f248:	bfa8      	it	ge
 800f24a:	4643      	movge	r3, r8
 800f24c:	42bb      	cmp	r3, r7
 800f24e:	bfa8      	it	ge
 800f250:	463b      	movge	r3, r7
 800f252:	2b00      	cmp	r3, #0
 800f254:	bfc2      	ittt	gt
 800f256:	eba8 0803 	subgt.w	r8, r8, r3
 800f25a:	1aff      	subgt	r7, r7, r3
 800f25c:	eba9 0903 	subgt.w	r9, r9, r3
 800f260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f262:	2b00      	cmp	r3, #0
 800f264:	dd17      	ble.n	800f296 <_strtod_l+0x75e>
 800f266:	4631      	mov	r1, r6
 800f268:	461a      	mov	r2, r3
 800f26a:	4620      	mov	r0, r4
 800f26c:	f001 fe86 	bl	8010f7c <__pow5mult>
 800f270:	4606      	mov	r6, r0
 800f272:	2800      	cmp	r0, #0
 800f274:	f43f aea8 	beq.w	800efc8 <_strtod_l+0x490>
 800f278:	4601      	mov	r1, r0
 800f27a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f27c:	4620      	mov	r0, r4
 800f27e:	f001 fdd3 	bl	8010e28 <__multiply>
 800f282:	900b      	str	r0, [sp, #44]	; 0x2c
 800f284:	2800      	cmp	r0, #0
 800f286:	f43f ae9f 	beq.w	800efc8 <_strtod_l+0x490>
 800f28a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f28c:	4620      	mov	r0, r4
 800f28e:	f001 fcb3 	bl	8010bf8 <_Bfree>
 800f292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f294:	9318      	str	r3, [sp, #96]	; 0x60
 800f296:	f1b8 0f00 	cmp.w	r8, #0
 800f29a:	f300 808c 	bgt.w	800f3b6 <_strtod_l+0x87e>
 800f29e:	9b06      	ldr	r3, [sp, #24]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	dd08      	ble.n	800f2b6 <_strtod_l+0x77e>
 800f2a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2a6:	9905      	ldr	r1, [sp, #20]
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	f001 fe67 	bl	8010f7c <__pow5mult>
 800f2ae:	9005      	str	r0, [sp, #20]
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	f43f ae89 	beq.w	800efc8 <_strtod_l+0x490>
 800f2b6:	2f00      	cmp	r7, #0
 800f2b8:	dd08      	ble.n	800f2cc <_strtod_l+0x794>
 800f2ba:	9905      	ldr	r1, [sp, #20]
 800f2bc:	463a      	mov	r2, r7
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f001 feb6 	bl	8011030 <__lshift>
 800f2c4:	9005      	str	r0, [sp, #20]
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	f43f ae7e 	beq.w	800efc8 <_strtod_l+0x490>
 800f2cc:	f1b9 0f00 	cmp.w	r9, #0
 800f2d0:	dd08      	ble.n	800f2e4 <_strtod_l+0x7ac>
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	464a      	mov	r2, r9
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f001 feaa 	bl	8011030 <__lshift>
 800f2dc:	4606      	mov	r6, r0
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	f43f ae72 	beq.w	800efc8 <_strtod_l+0x490>
 800f2e4:	9a05      	ldr	r2, [sp, #20]
 800f2e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f001 ff2d 	bl	8011148 <__mdiff>
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	f43f ae69 	beq.w	800efc8 <_strtod_l+0x490>
 800f2f6:	68c3      	ldr	r3, [r0, #12]
 800f2f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	60c3      	str	r3, [r0, #12]
 800f2fe:	4631      	mov	r1, r6
 800f300:	f001 ff06 	bl	8011110 <__mcmp>
 800f304:	2800      	cmp	r0, #0
 800f306:	da60      	bge.n	800f3ca <_strtod_l+0x892>
 800f308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f30a:	ea53 030a 	orrs.w	r3, r3, sl
 800f30e:	f040 8082 	bne.w	800f416 <_strtod_l+0x8de>
 800f312:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f316:	2b00      	cmp	r3, #0
 800f318:	d17d      	bne.n	800f416 <_strtod_l+0x8de>
 800f31a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f31e:	0d1b      	lsrs	r3, r3, #20
 800f320:	051b      	lsls	r3, r3, #20
 800f322:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f326:	d976      	bls.n	800f416 <_strtod_l+0x8de>
 800f328:	696b      	ldr	r3, [r5, #20]
 800f32a:	b913      	cbnz	r3, 800f332 <_strtod_l+0x7fa>
 800f32c:	692b      	ldr	r3, [r5, #16]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	dd71      	ble.n	800f416 <_strtod_l+0x8de>
 800f332:	4629      	mov	r1, r5
 800f334:	2201      	movs	r2, #1
 800f336:	4620      	mov	r0, r4
 800f338:	f001 fe7a 	bl	8011030 <__lshift>
 800f33c:	4631      	mov	r1, r6
 800f33e:	4605      	mov	r5, r0
 800f340:	f001 fee6 	bl	8011110 <__mcmp>
 800f344:	2800      	cmp	r0, #0
 800f346:	dd66      	ble.n	800f416 <_strtod_l+0x8de>
 800f348:	9904      	ldr	r1, [sp, #16]
 800f34a:	4a53      	ldr	r2, [pc, #332]	; (800f498 <_strtod_l+0x960>)
 800f34c:	465b      	mov	r3, fp
 800f34e:	2900      	cmp	r1, #0
 800f350:	f000 8081 	beq.w	800f456 <_strtod_l+0x91e>
 800f354:	ea02 010b 	and.w	r1, r2, fp
 800f358:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f35c:	dc7b      	bgt.n	800f456 <_strtod_l+0x91e>
 800f35e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f362:	f77f aea9 	ble.w	800f0b8 <_strtod_l+0x580>
 800f366:	4b4d      	ldr	r3, [pc, #308]	; (800f49c <_strtod_l+0x964>)
 800f368:	4650      	mov	r0, sl
 800f36a:	4659      	mov	r1, fp
 800f36c:	2200      	movs	r2, #0
 800f36e:	f7f1 f94b 	bl	8000608 <__aeabi_dmul>
 800f372:	460b      	mov	r3, r1
 800f374:	4303      	orrs	r3, r0
 800f376:	bf08      	it	eq
 800f378:	2322      	moveq	r3, #34	; 0x22
 800f37a:	4682      	mov	sl, r0
 800f37c:	468b      	mov	fp, r1
 800f37e:	bf08      	it	eq
 800f380:	6023      	streq	r3, [r4, #0]
 800f382:	e62b      	b.n	800efdc <_strtod_l+0x4a4>
 800f384:	f04f 32ff 	mov.w	r2, #4294967295
 800f388:	fa02 f303 	lsl.w	r3, r2, r3
 800f38c:	ea03 0a0a 	and.w	sl, r3, sl
 800f390:	e6e3      	b.n	800f15a <_strtod_l+0x622>
 800f392:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f396:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f39a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f39e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f3a2:	fa01 f308 	lsl.w	r3, r1, r8
 800f3a6:	9308      	str	r3, [sp, #32]
 800f3a8:	910d      	str	r1, [sp, #52]	; 0x34
 800f3aa:	e746      	b.n	800f23a <_strtod_l+0x702>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	9308      	str	r3, [sp, #32]
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	930d      	str	r3, [sp, #52]	; 0x34
 800f3b4:	e741      	b.n	800f23a <_strtod_l+0x702>
 800f3b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f3b8:	4642      	mov	r2, r8
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f001 fe38 	bl	8011030 <__lshift>
 800f3c0:	9018      	str	r0, [sp, #96]	; 0x60
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	f47f af6b 	bne.w	800f29e <_strtod_l+0x766>
 800f3c8:	e5fe      	b.n	800efc8 <_strtod_l+0x490>
 800f3ca:	465f      	mov	r7, fp
 800f3cc:	d16e      	bne.n	800f4ac <_strtod_l+0x974>
 800f3ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f3d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3d4:	b342      	cbz	r2, 800f428 <_strtod_l+0x8f0>
 800f3d6:	4a32      	ldr	r2, [pc, #200]	; (800f4a0 <_strtod_l+0x968>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d128      	bne.n	800f42e <_strtod_l+0x8f6>
 800f3dc:	9b04      	ldr	r3, [sp, #16]
 800f3de:	4651      	mov	r1, sl
 800f3e0:	b1eb      	cbz	r3, 800f41e <_strtod_l+0x8e6>
 800f3e2:	4b2d      	ldr	r3, [pc, #180]	; (800f498 <_strtod_l+0x960>)
 800f3e4:	403b      	ands	r3, r7
 800f3e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ee:	d819      	bhi.n	800f424 <_strtod_l+0x8ec>
 800f3f0:	0d1b      	lsrs	r3, r3, #20
 800f3f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f3fa:	4299      	cmp	r1, r3
 800f3fc:	d117      	bne.n	800f42e <_strtod_l+0x8f6>
 800f3fe:	4b29      	ldr	r3, [pc, #164]	; (800f4a4 <_strtod_l+0x96c>)
 800f400:	429f      	cmp	r7, r3
 800f402:	d102      	bne.n	800f40a <_strtod_l+0x8d2>
 800f404:	3101      	adds	r1, #1
 800f406:	f43f addf 	beq.w	800efc8 <_strtod_l+0x490>
 800f40a:	4b23      	ldr	r3, [pc, #140]	; (800f498 <_strtod_l+0x960>)
 800f40c:	403b      	ands	r3, r7
 800f40e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f412:	f04f 0a00 	mov.w	sl, #0
 800f416:	9b04      	ldr	r3, [sp, #16]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1a4      	bne.n	800f366 <_strtod_l+0x82e>
 800f41c:	e5de      	b.n	800efdc <_strtod_l+0x4a4>
 800f41e:	f04f 33ff 	mov.w	r3, #4294967295
 800f422:	e7ea      	b.n	800f3fa <_strtod_l+0x8c2>
 800f424:	4613      	mov	r3, r2
 800f426:	e7e8      	b.n	800f3fa <_strtod_l+0x8c2>
 800f428:	ea53 030a 	orrs.w	r3, r3, sl
 800f42c:	d08c      	beq.n	800f348 <_strtod_l+0x810>
 800f42e:	9b08      	ldr	r3, [sp, #32]
 800f430:	b1db      	cbz	r3, 800f46a <_strtod_l+0x932>
 800f432:	423b      	tst	r3, r7
 800f434:	d0ef      	beq.n	800f416 <_strtod_l+0x8de>
 800f436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f438:	9a04      	ldr	r2, [sp, #16]
 800f43a:	4650      	mov	r0, sl
 800f43c:	4659      	mov	r1, fp
 800f43e:	b1c3      	cbz	r3, 800f472 <_strtod_l+0x93a>
 800f440:	f7ff fb5e 	bl	800eb00 <sulp>
 800f444:	4602      	mov	r2, r0
 800f446:	460b      	mov	r3, r1
 800f448:	ec51 0b18 	vmov	r0, r1, d8
 800f44c:	f7f0 ff26 	bl	800029c <__adddf3>
 800f450:	4682      	mov	sl, r0
 800f452:	468b      	mov	fp, r1
 800f454:	e7df      	b.n	800f416 <_strtod_l+0x8de>
 800f456:	4013      	ands	r3, r2
 800f458:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f45c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f460:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f464:	f04f 3aff 	mov.w	sl, #4294967295
 800f468:	e7d5      	b.n	800f416 <_strtod_l+0x8de>
 800f46a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f46c:	ea13 0f0a 	tst.w	r3, sl
 800f470:	e7e0      	b.n	800f434 <_strtod_l+0x8fc>
 800f472:	f7ff fb45 	bl	800eb00 <sulp>
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	ec51 0b18 	vmov	r0, r1, d8
 800f47e:	f7f0 ff0b 	bl	8000298 <__aeabi_dsub>
 800f482:	2200      	movs	r2, #0
 800f484:	2300      	movs	r3, #0
 800f486:	4682      	mov	sl, r0
 800f488:	468b      	mov	fp, r1
 800f48a:	f7f1 fb25 	bl	8000ad8 <__aeabi_dcmpeq>
 800f48e:	2800      	cmp	r0, #0
 800f490:	d0c1      	beq.n	800f416 <_strtod_l+0x8de>
 800f492:	e611      	b.n	800f0b8 <_strtod_l+0x580>
 800f494:	fffffc02 	.word	0xfffffc02
 800f498:	7ff00000 	.word	0x7ff00000
 800f49c:	39500000 	.word	0x39500000
 800f4a0:	000fffff 	.word	0x000fffff
 800f4a4:	7fefffff 	.word	0x7fefffff
 800f4a8:	08015918 	.word	0x08015918
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f001 ffac 	bl	801140c <__ratio>
 800f4b4:	ec59 8b10 	vmov	r8, r9, d0
 800f4b8:	ee10 0a10 	vmov	r0, s0
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f4c2:	4649      	mov	r1, r9
 800f4c4:	f7f1 fb1c 	bl	8000b00 <__aeabi_dcmple>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	d07a      	beq.n	800f5c2 <_strtod_l+0xa8a>
 800f4cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d04a      	beq.n	800f568 <_strtod_l+0xa30>
 800f4d2:	4b95      	ldr	r3, [pc, #596]	; (800f728 <_strtod_l+0xbf0>)
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f4da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f728 <_strtod_l+0xbf0>
 800f4de:	f04f 0800 	mov.w	r8, #0
 800f4e2:	4b92      	ldr	r3, [pc, #584]	; (800f72c <_strtod_l+0xbf4>)
 800f4e4:	403b      	ands	r3, r7
 800f4e6:	930d      	str	r3, [sp, #52]	; 0x34
 800f4e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4ea:	4b91      	ldr	r3, [pc, #580]	; (800f730 <_strtod_l+0xbf8>)
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	f040 80b0 	bne.w	800f652 <_strtod_l+0xb1a>
 800f4f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f4f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f4fa:	ec4b ab10 	vmov	d0, sl, fp
 800f4fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f502:	f001 feab 	bl	801125c <__ulp>
 800f506:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f50a:	ec53 2b10 	vmov	r2, r3, d0
 800f50e:	f7f1 f87b 	bl	8000608 <__aeabi_dmul>
 800f512:	4652      	mov	r2, sl
 800f514:	465b      	mov	r3, fp
 800f516:	f7f0 fec1 	bl	800029c <__adddf3>
 800f51a:	460b      	mov	r3, r1
 800f51c:	4983      	ldr	r1, [pc, #524]	; (800f72c <_strtod_l+0xbf4>)
 800f51e:	4a85      	ldr	r2, [pc, #532]	; (800f734 <_strtod_l+0xbfc>)
 800f520:	4019      	ands	r1, r3
 800f522:	4291      	cmp	r1, r2
 800f524:	4682      	mov	sl, r0
 800f526:	d960      	bls.n	800f5ea <_strtod_l+0xab2>
 800f528:	ee18 3a90 	vmov	r3, s17
 800f52c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f530:	4293      	cmp	r3, r2
 800f532:	d104      	bne.n	800f53e <_strtod_l+0xa06>
 800f534:	ee18 3a10 	vmov	r3, s16
 800f538:	3301      	adds	r3, #1
 800f53a:	f43f ad45 	beq.w	800efc8 <_strtod_l+0x490>
 800f53e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f740 <_strtod_l+0xc08>
 800f542:	f04f 3aff 	mov.w	sl, #4294967295
 800f546:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f548:	4620      	mov	r0, r4
 800f54a:	f001 fb55 	bl	8010bf8 <_Bfree>
 800f54e:	9905      	ldr	r1, [sp, #20]
 800f550:	4620      	mov	r0, r4
 800f552:	f001 fb51 	bl	8010bf8 <_Bfree>
 800f556:	4631      	mov	r1, r6
 800f558:	4620      	mov	r0, r4
 800f55a:	f001 fb4d 	bl	8010bf8 <_Bfree>
 800f55e:	4629      	mov	r1, r5
 800f560:	4620      	mov	r0, r4
 800f562:	f001 fb49 	bl	8010bf8 <_Bfree>
 800f566:	e61a      	b.n	800f19e <_strtod_l+0x666>
 800f568:	f1ba 0f00 	cmp.w	sl, #0
 800f56c:	d11b      	bne.n	800f5a6 <_strtod_l+0xa6e>
 800f56e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f572:	b9f3      	cbnz	r3, 800f5b2 <_strtod_l+0xa7a>
 800f574:	4b6c      	ldr	r3, [pc, #432]	; (800f728 <_strtod_l+0xbf0>)
 800f576:	2200      	movs	r2, #0
 800f578:	4640      	mov	r0, r8
 800f57a:	4649      	mov	r1, r9
 800f57c:	f7f1 fab6 	bl	8000aec <__aeabi_dcmplt>
 800f580:	b9d0      	cbnz	r0, 800f5b8 <_strtod_l+0xa80>
 800f582:	4640      	mov	r0, r8
 800f584:	4649      	mov	r1, r9
 800f586:	4b6c      	ldr	r3, [pc, #432]	; (800f738 <_strtod_l+0xc00>)
 800f588:	2200      	movs	r2, #0
 800f58a:	f7f1 f83d 	bl	8000608 <__aeabi_dmul>
 800f58e:	4680      	mov	r8, r0
 800f590:	4689      	mov	r9, r1
 800f592:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f596:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f59a:	9315      	str	r3, [sp, #84]	; 0x54
 800f59c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f5a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f5a4:	e79d      	b.n	800f4e2 <_strtod_l+0x9aa>
 800f5a6:	f1ba 0f01 	cmp.w	sl, #1
 800f5aa:	d102      	bne.n	800f5b2 <_strtod_l+0xa7a>
 800f5ac:	2f00      	cmp	r7, #0
 800f5ae:	f43f ad83 	beq.w	800f0b8 <_strtod_l+0x580>
 800f5b2:	4b62      	ldr	r3, [pc, #392]	; (800f73c <_strtod_l+0xc04>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	e78e      	b.n	800f4d6 <_strtod_l+0x99e>
 800f5b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f738 <_strtod_l+0xc00>
 800f5bc:	f04f 0800 	mov.w	r8, #0
 800f5c0:	e7e7      	b.n	800f592 <_strtod_l+0xa5a>
 800f5c2:	4b5d      	ldr	r3, [pc, #372]	; (800f738 <_strtod_l+0xc00>)
 800f5c4:	4640      	mov	r0, r8
 800f5c6:	4649      	mov	r1, r9
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	f7f1 f81d 	bl	8000608 <__aeabi_dmul>
 800f5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5d0:	4680      	mov	r8, r0
 800f5d2:	4689      	mov	r9, r1
 800f5d4:	b933      	cbnz	r3, 800f5e4 <_strtod_l+0xaac>
 800f5d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5da:	900e      	str	r0, [sp, #56]	; 0x38
 800f5dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f5e2:	e7dd      	b.n	800f5a0 <_strtod_l+0xa68>
 800f5e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f5e8:	e7f9      	b.n	800f5de <_strtod_l+0xaa6>
 800f5ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f5ee:	9b04      	ldr	r3, [sp, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d1a8      	bne.n	800f546 <_strtod_l+0xa0e>
 800f5f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5fa:	0d1b      	lsrs	r3, r3, #20
 800f5fc:	051b      	lsls	r3, r3, #20
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d1a1      	bne.n	800f546 <_strtod_l+0xa0e>
 800f602:	4640      	mov	r0, r8
 800f604:	4649      	mov	r1, r9
 800f606:	f7f1 fbaf 	bl	8000d68 <__aeabi_d2lz>
 800f60a:	f7f0 ffcf 	bl	80005ac <__aeabi_l2d>
 800f60e:	4602      	mov	r2, r0
 800f610:	460b      	mov	r3, r1
 800f612:	4640      	mov	r0, r8
 800f614:	4649      	mov	r1, r9
 800f616:	f7f0 fe3f 	bl	8000298 <__aeabi_dsub>
 800f61a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f61c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f620:	ea43 030a 	orr.w	r3, r3, sl
 800f624:	4313      	orrs	r3, r2
 800f626:	4680      	mov	r8, r0
 800f628:	4689      	mov	r9, r1
 800f62a:	d055      	beq.n	800f6d8 <_strtod_l+0xba0>
 800f62c:	a336      	add	r3, pc, #216	; (adr r3, 800f708 <_strtod_l+0xbd0>)
 800f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f632:	f7f1 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800f636:	2800      	cmp	r0, #0
 800f638:	f47f acd0 	bne.w	800efdc <_strtod_l+0x4a4>
 800f63c:	a334      	add	r3, pc, #208	; (adr r3, 800f710 <_strtod_l+0xbd8>)
 800f63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f642:	4640      	mov	r0, r8
 800f644:	4649      	mov	r1, r9
 800f646:	f7f1 fa6f 	bl	8000b28 <__aeabi_dcmpgt>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	f43f af7b 	beq.w	800f546 <_strtod_l+0xa0e>
 800f650:	e4c4      	b.n	800efdc <_strtod_l+0x4a4>
 800f652:	9b04      	ldr	r3, [sp, #16]
 800f654:	b333      	cbz	r3, 800f6a4 <_strtod_l+0xb6c>
 800f656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f658:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f65c:	d822      	bhi.n	800f6a4 <_strtod_l+0xb6c>
 800f65e:	a32e      	add	r3, pc, #184	; (adr r3, 800f718 <_strtod_l+0xbe0>)
 800f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f664:	4640      	mov	r0, r8
 800f666:	4649      	mov	r1, r9
 800f668:	f7f1 fa4a 	bl	8000b00 <__aeabi_dcmple>
 800f66c:	b1a0      	cbz	r0, 800f698 <_strtod_l+0xb60>
 800f66e:	4649      	mov	r1, r9
 800f670:	4640      	mov	r0, r8
 800f672:	f7f1 faa1 	bl	8000bb8 <__aeabi_d2uiz>
 800f676:	2801      	cmp	r0, #1
 800f678:	bf38      	it	cc
 800f67a:	2001      	movcc	r0, #1
 800f67c:	f7f0 ff4a 	bl	8000514 <__aeabi_ui2d>
 800f680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f682:	4680      	mov	r8, r0
 800f684:	4689      	mov	r9, r1
 800f686:	bb23      	cbnz	r3, 800f6d2 <_strtod_l+0xb9a>
 800f688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f68c:	9010      	str	r0, [sp, #64]	; 0x40
 800f68e:	9311      	str	r3, [sp, #68]	; 0x44
 800f690:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f694:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f69a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f69c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f6a0:	1a9b      	subs	r3, r3, r2
 800f6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f6a8:	eeb0 0a48 	vmov.f32	s0, s16
 800f6ac:	eef0 0a68 	vmov.f32	s1, s17
 800f6b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f6b4:	f001 fdd2 	bl	801125c <__ulp>
 800f6b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f6bc:	ec53 2b10 	vmov	r2, r3, d0
 800f6c0:	f7f0 ffa2 	bl	8000608 <__aeabi_dmul>
 800f6c4:	ec53 2b18 	vmov	r2, r3, d8
 800f6c8:	f7f0 fde8 	bl	800029c <__adddf3>
 800f6cc:	4682      	mov	sl, r0
 800f6ce:	468b      	mov	fp, r1
 800f6d0:	e78d      	b.n	800f5ee <_strtod_l+0xab6>
 800f6d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f6d6:	e7db      	b.n	800f690 <_strtod_l+0xb58>
 800f6d8:	a311      	add	r3, pc, #68	; (adr r3, 800f720 <_strtod_l+0xbe8>)
 800f6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6de:	f7f1 fa05 	bl	8000aec <__aeabi_dcmplt>
 800f6e2:	e7b2      	b.n	800f64a <_strtod_l+0xb12>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f6e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f6ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6ec:	6013      	str	r3, [r2, #0]
 800f6ee:	f7ff ba6b 	b.w	800ebc8 <_strtod_l+0x90>
 800f6f2:	2a65      	cmp	r2, #101	; 0x65
 800f6f4:	f43f ab5f 	beq.w	800edb6 <_strtod_l+0x27e>
 800f6f8:	2a45      	cmp	r2, #69	; 0x45
 800f6fa:	f43f ab5c 	beq.w	800edb6 <_strtod_l+0x27e>
 800f6fe:	2301      	movs	r3, #1
 800f700:	f7ff bb94 	b.w	800ee2c <_strtod_l+0x2f4>
 800f704:	f3af 8000 	nop.w
 800f708:	94a03595 	.word	0x94a03595
 800f70c:	3fdfffff 	.word	0x3fdfffff
 800f710:	35afe535 	.word	0x35afe535
 800f714:	3fe00000 	.word	0x3fe00000
 800f718:	ffc00000 	.word	0xffc00000
 800f71c:	41dfffff 	.word	0x41dfffff
 800f720:	94a03595 	.word	0x94a03595
 800f724:	3fcfffff 	.word	0x3fcfffff
 800f728:	3ff00000 	.word	0x3ff00000
 800f72c:	7ff00000 	.word	0x7ff00000
 800f730:	7fe00000 	.word	0x7fe00000
 800f734:	7c9fffff 	.word	0x7c9fffff
 800f738:	3fe00000 	.word	0x3fe00000
 800f73c:	bff00000 	.word	0xbff00000
 800f740:	7fefffff 	.word	0x7fefffff

0800f744 <strtod>:
 800f744:	460a      	mov	r2, r1
 800f746:	4601      	mov	r1, r0
 800f748:	4802      	ldr	r0, [pc, #8]	; (800f754 <strtod+0x10>)
 800f74a:	4b03      	ldr	r3, [pc, #12]	; (800f758 <strtod+0x14>)
 800f74c:	6800      	ldr	r0, [r0, #0]
 800f74e:	f7ff b9f3 	b.w	800eb38 <_strtod_l>
 800f752:	bf00      	nop
 800f754:	20000034 	.word	0x20000034
 800f758:	2000009c 	.word	0x2000009c

0800f75c <quorem>:
 800f75c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f760:	6903      	ldr	r3, [r0, #16]
 800f762:	690c      	ldr	r4, [r1, #16]
 800f764:	42a3      	cmp	r3, r4
 800f766:	4607      	mov	r7, r0
 800f768:	f2c0 8081 	blt.w	800f86e <quorem+0x112>
 800f76c:	3c01      	subs	r4, #1
 800f76e:	f101 0814 	add.w	r8, r1, #20
 800f772:	f100 0514 	add.w	r5, r0, #20
 800f776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f77a:	9301      	str	r3, [sp, #4]
 800f77c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f784:	3301      	adds	r3, #1
 800f786:	429a      	cmp	r2, r3
 800f788:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f78c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f790:	fbb2 f6f3 	udiv	r6, r2, r3
 800f794:	d331      	bcc.n	800f7fa <quorem+0x9e>
 800f796:	f04f 0e00 	mov.w	lr, #0
 800f79a:	4640      	mov	r0, r8
 800f79c:	46ac      	mov	ip, r5
 800f79e:	46f2      	mov	sl, lr
 800f7a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800f7a4:	b293      	uxth	r3, r2
 800f7a6:	fb06 e303 	mla	r3, r6, r3, lr
 800f7aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	ebaa 0303 	sub.w	r3, sl, r3
 800f7b4:	f8dc a000 	ldr.w	sl, [ip]
 800f7b8:	0c12      	lsrs	r2, r2, #16
 800f7ba:	fa13 f38a 	uxtah	r3, r3, sl
 800f7be:	fb06 e202 	mla	r2, r6, r2, lr
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	9b00      	ldr	r3, [sp, #0]
 800f7c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f7ca:	b292      	uxth	r2, r2
 800f7cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f7d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f7d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800f7d8:	4581      	cmp	r9, r0
 800f7da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7de:	f84c 3b04 	str.w	r3, [ip], #4
 800f7e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f7e6:	d2db      	bcs.n	800f7a0 <quorem+0x44>
 800f7e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800f7ec:	b92b      	cbnz	r3, 800f7fa <quorem+0x9e>
 800f7ee:	9b01      	ldr	r3, [sp, #4]
 800f7f0:	3b04      	subs	r3, #4
 800f7f2:	429d      	cmp	r5, r3
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	d32e      	bcc.n	800f856 <quorem+0xfa>
 800f7f8:	613c      	str	r4, [r7, #16]
 800f7fa:	4638      	mov	r0, r7
 800f7fc:	f001 fc88 	bl	8011110 <__mcmp>
 800f800:	2800      	cmp	r0, #0
 800f802:	db24      	blt.n	800f84e <quorem+0xf2>
 800f804:	3601      	adds	r6, #1
 800f806:	4628      	mov	r0, r5
 800f808:	f04f 0c00 	mov.w	ip, #0
 800f80c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f810:	f8d0 e000 	ldr.w	lr, [r0]
 800f814:	b293      	uxth	r3, r2
 800f816:	ebac 0303 	sub.w	r3, ip, r3
 800f81a:	0c12      	lsrs	r2, r2, #16
 800f81c:	fa13 f38e 	uxtah	r3, r3, lr
 800f820:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f828:	b29b      	uxth	r3, r3
 800f82a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f82e:	45c1      	cmp	r9, r8
 800f830:	f840 3b04 	str.w	r3, [r0], #4
 800f834:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f838:	d2e8      	bcs.n	800f80c <quorem+0xb0>
 800f83a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f83e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f842:	b922      	cbnz	r2, 800f84e <quorem+0xf2>
 800f844:	3b04      	subs	r3, #4
 800f846:	429d      	cmp	r5, r3
 800f848:	461a      	mov	r2, r3
 800f84a:	d30a      	bcc.n	800f862 <quorem+0x106>
 800f84c:	613c      	str	r4, [r7, #16]
 800f84e:	4630      	mov	r0, r6
 800f850:	b003      	add	sp, #12
 800f852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f856:	6812      	ldr	r2, [r2, #0]
 800f858:	3b04      	subs	r3, #4
 800f85a:	2a00      	cmp	r2, #0
 800f85c:	d1cc      	bne.n	800f7f8 <quorem+0x9c>
 800f85e:	3c01      	subs	r4, #1
 800f860:	e7c7      	b.n	800f7f2 <quorem+0x96>
 800f862:	6812      	ldr	r2, [r2, #0]
 800f864:	3b04      	subs	r3, #4
 800f866:	2a00      	cmp	r2, #0
 800f868:	d1f0      	bne.n	800f84c <quorem+0xf0>
 800f86a:	3c01      	subs	r4, #1
 800f86c:	e7eb      	b.n	800f846 <quorem+0xea>
 800f86e:	2000      	movs	r0, #0
 800f870:	e7ee      	b.n	800f850 <quorem+0xf4>
 800f872:	0000      	movs	r0, r0
 800f874:	0000      	movs	r0, r0
	...

0800f878 <_dtoa_r>:
 800f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	ed2d 8b04 	vpush	{d8-d9}
 800f880:	ec57 6b10 	vmov	r6, r7, d0
 800f884:	b093      	sub	sp, #76	; 0x4c
 800f886:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f888:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f88c:	9106      	str	r1, [sp, #24]
 800f88e:	ee10 aa10 	vmov	sl, s0
 800f892:	4604      	mov	r4, r0
 800f894:	9209      	str	r2, [sp, #36]	; 0x24
 800f896:	930c      	str	r3, [sp, #48]	; 0x30
 800f898:	46bb      	mov	fp, r7
 800f89a:	b975      	cbnz	r5, 800f8ba <_dtoa_r+0x42>
 800f89c:	2010      	movs	r0, #16
 800f89e:	f7fe fb7b 	bl	800df98 <malloc>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	6260      	str	r0, [r4, #36]	; 0x24
 800f8a6:	b920      	cbnz	r0, 800f8b2 <_dtoa_r+0x3a>
 800f8a8:	4ba7      	ldr	r3, [pc, #668]	; (800fb48 <_dtoa_r+0x2d0>)
 800f8aa:	21ea      	movs	r1, #234	; 0xea
 800f8ac:	48a7      	ldr	r0, [pc, #668]	; (800fb4c <_dtoa_r+0x2d4>)
 800f8ae:	f001 ffad 	bl	801180c <__assert_func>
 800f8b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f8b6:	6005      	str	r5, [r0, #0]
 800f8b8:	60c5      	str	r5, [r0, #12]
 800f8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8bc:	6819      	ldr	r1, [r3, #0]
 800f8be:	b151      	cbz	r1, 800f8d6 <_dtoa_r+0x5e>
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	604a      	str	r2, [r1, #4]
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	4093      	lsls	r3, r2
 800f8c8:	608b      	str	r3, [r1, #8]
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f001 f994 	bl	8010bf8 <_Bfree>
 800f8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	601a      	str	r2, [r3, #0]
 800f8d6:	1e3b      	subs	r3, r7, #0
 800f8d8:	bfaa      	itet	ge
 800f8da:	2300      	movge	r3, #0
 800f8dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f8e0:	f8c8 3000 	strge.w	r3, [r8]
 800f8e4:	4b9a      	ldr	r3, [pc, #616]	; (800fb50 <_dtoa_r+0x2d8>)
 800f8e6:	bfbc      	itt	lt
 800f8e8:	2201      	movlt	r2, #1
 800f8ea:	f8c8 2000 	strlt.w	r2, [r8]
 800f8ee:	ea33 030b 	bics.w	r3, r3, fp
 800f8f2:	d11b      	bne.n	800f92c <_dtoa_r+0xb4>
 800f8f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f8f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800f8fa:	6013      	str	r3, [r2, #0]
 800f8fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f900:	4333      	orrs	r3, r6
 800f902:	f000 8592 	beq.w	801042a <_dtoa_r+0xbb2>
 800f906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f908:	b963      	cbnz	r3, 800f924 <_dtoa_r+0xac>
 800f90a:	4b92      	ldr	r3, [pc, #584]	; (800fb54 <_dtoa_r+0x2dc>)
 800f90c:	e022      	b.n	800f954 <_dtoa_r+0xdc>
 800f90e:	4b92      	ldr	r3, [pc, #584]	; (800fb58 <_dtoa_r+0x2e0>)
 800f910:	9301      	str	r3, [sp, #4]
 800f912:	3308      	adds	r3, #8
 800f914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f916:	6013      	str	r3, [r2, #0]
 800f918:	9801      	ldr	r0, [sp, #4]
 800f91a:	b013      	add	sp, #76	; 0x4c
 800f91c:	ecbd 8b04 	vpop	{d8-d9}
 800f920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f924:	4b8b      	ldr	r3, [pc, #556]	; (800fb54 <_dtoa_r+0x2dc>)
 800f926:	9301      	str	r3, [sp, #4]
 800f928:	3303      	adds	r3, #3
 800f92a:	e7f3      	b.n	800f914 <_dtoa_r+0x9c>
 800f92c:	2200      	movs	r2, #0
 800f92e:	2300      	movs	r3, #0
 800f930:	4650      	mov	r0, sl
 800f932:	4659      	mov	r1, fp
 800f934:	f7f1 f8d0 	bl	8000ad8 <__aeabi_dcmpeq>
 800f938:	ec4b ab19 	vmov	d9, sl, fp
 800f93c:	4680      	mov	r8, r0
 800f93e:	b158      	cbz	r0, 800f958 <_dtoa_r+0xe0>
 800f940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f942:	2301      	movs	r3, #1
 800f944:	6013      	str	r3, [r2, #0]
 800f946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f000 856b 	beq.w	8010424 <_dtoa_r+0xbac>
 800f94e:	4883      	ldr	r0, [pc, #524]	; (800fb5c <_dtoa_r+0x2e4>)
 800f950:	6018      	str	r0, [r3, #0]
 800f952:	1e43      	subs	r3, r0, #1
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	e7df      	b.n	800f918 <_dtoa_r+0xa0>
 800f958:	ec4b ab10 	vmov	d0, sl, fp
 800f95c:	aa10      	add	r2, sp, #64	; 0x40
 800f95e:	a911      	add	r1, sp, #68	; 0x44
 800f960:	4620      	mov	r0, r4
 800f962:	f001 fcf7 	bl	8011354 <__d2b>
 800f966:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f96a:	ee08 0a10 	vmov	s16, r0
 800f96e:	2d00      	cmp	r5, #0
 800f970:	f000 8084 	beq.w	800fa7c <_dtoa_r+0x204>
 800f974:	ee19 3a90 	vmov	r3, s19
 800f978:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f97c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f980:	4656      	mov	r6, sl
 800f982:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f98a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f98e:	4b74      	ldr	r3, [pc, #464]	; (800fb60 <_dtoa_r+0x2e8>)
 800f990:	2200      	movs	r2, #0
 800f992:	4630      	mov	r0, r6
 800f994:	4639      	mov	r1, r7
 800f996:	f7f0 fc7f 	bl	8000298 <__aeabi_dsub>
 800f99a:	a365      	add	r3, pc, #404	; (adr r3, 800fb30 <_dtoa_r+0x2b8>)
 800f99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a0:	f7f0 fe32 	bl	8000608 <__aeabi_dmul>
 800f9a4:	a364      	add	r3, pc, #400	; (adr r3, 800fb38 <_dtoa_r+0x2c0>)
 800f9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9aa:	f7f0 fc77 	bl	800029c <__adddf3>
 800f9ae:	4606      	mov	r6, r0
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	460f      	mov	r7, r1
 800f9b4:	f7f0 fdbe 	bl	8000534 <__aeabi_i2d>
 800f9b8:	a361      	add	r3, pc, #388	; (adr r3, 800fb40 <_dtoa_r+0x2c8>)
 800f9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9be:	f7f0 fe23 	bl	8000608 <__aeabi_dmul>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	4639      	mov	r1, r7
 800f9ca:	f7f0 fc67 	bl	800029c <__adddf3>
 800f9ce:	4606      	mov	r6, r0
 800f9d0:	460f      	mov	r7, r1
 800f9d2:	f7f1 f8c9 	bl	8000b68 <__aeabi_d2iz>
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	9000      	str	r0, [sp, #0]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	4630      	mov	r0, r6
 800f9de:	4639      	mov	r1, r7
 800f9e0:	f7f1 f884 	bl	8000aec <__aeabi_dcmplt>
 800f9e4:	b150      	cbz	r0, 800f9fc <_dtoa_r+0x184>
 800f9e6:	9800      	ldr	r0, [sp, #0]
 800f9e8:	f7f0 fda4 	bl	8000534 <__aeabi_i2d>
 800f9ec:	4632      	mov	r2, r6
 800f9ee:	463b      	mov	r3, r7
 800f9f0:	f7f1 f872 	bl	8000ad8 <__aeabi_dcmpeq>
 800f9f4:	b910      	cbnz	r0, 800f9fc <_dtoa_r+0x184>
 800f9f6:	9b00      	ldr	r3, [sp, #0]
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	9b00      	ldr	r3, [sp, #0]
 800f9fe:	2b16      	cmp	r3, #22
 800fa00:	d85a      	bhi.n	800fab8 <_dtoa_r+0x240>
 800fa02:	9a00      	ldr	r2, [sp, #0]
 800fa04:	4b57      	ldr	r3, [pc, #348]	; (800fb64 <_dtoa_r+0x2ec>)
 800fa06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	ec51 0b19 	vmov	r0, r1, d9
 800fa12:	f7f1 f86b 	bl	8000aec <__aeabi_dcmplt>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	d050      	beq.n	800fabc <_dtoa_r+0x244>
 800fa1a:	9b00      	ldr	r3, [sp, #0]
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	9300      	str	r3, [sp, #0]
 800fa20:	2300      	movs	r3, #0
 800fa22:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa26:	1b5d      	subs	r5, r3, r5
 800fa28:	1e6b      	subs	r3, r5, #1
 800fa2a:	9305      	str	r3, [sp, #20]
 800fa2c:	bf45      	ittet	mi
 800fa2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800fa32:	9304      	strmi	r3, [sp, #16]
 800fa34:	2300      	movpl	r3, #0
 800fa36:	2300      	movmi	r3, #0
 800fa38:	bf4c      	ite	mi
 800fa3a:	9305      	strmi	r3, [sp, #20]
 800fa3c:	9304      	strpl	r3, [sp, #16]
 800fa3e:	9b00      	ldr	r3, [sp, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	db3d      	blt.n	800fac0 <_dtoa_r+0x248>
 800fa44:	9b05      	ldr	r3, [sp, #20]
 800fa46:	9a00      	ldr	r2, [sp, #0]
 800fa48:	920a      	str	r2, [sp, #40]	; 0x28
 800fa4a:	4413      	add	r3, r2
 800fa4c:	9305      	str	r3, [sp, #20]
 800fa4e:	2300      	movs	r3, #0
 800fa50:	9307      	str	r3, [sp, #28]
 800fa52:	9b06      	ldr	r3, [sp, #24]
 800fa54:	2b09      	cmp	r3, #9
 800fa56:	f200 8089 	bhi.w	800fb6c <_dtoa_r+0x2f4>
 800fa5a:	2b05      	cmp	r3, #5
 800fa5c:	bfc4      	itt	gt
 800fa5e:	3b04      	subgt	r3, #4
 800fa60:	9306      	strgt	r3, [sp, #24]
 800fa62:	9b06      	ldr	r3, [sp, #24]
 800fa64:	f1a3 0302 	sub.w	r3, r3, #2
 800fa68:	bfcc      	ite	gt
 800fa6a:	2500      	movgt	r5, #0
 800fa6c:	2501      	movle	r5, #1
 800fa6e:	2b03      	cmp	r3, #3
 800fa70:	f200 8087 	bhi.w	800fb82 <_dtoa_r+0x30a>
 800fa74:	e8df f003 	tbb	[pc, r3]
 800fa78:	59383a2d 	.word	0x59383a2d
 800fa7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fa80:	441d      	add	r5, r3
 800fa82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fa86:	2b20      	cmp	r3, #32
 800fa88:	bfc1      	itttt	gt
 800fa8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fa8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fa92:	fa0b f303 	lslgt.w	r3, fp, r3
 800fa96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fa9a:	bfda      	itte	le
 800fa9c:	f1c3 0320 	rsble	r3, r3, #32
 800faa0:	fa06 f003 	lslle.w	r0, r6, r3
 800faa4:	4318      	orrgt	r0, r3
 800faa6:	f7f0 fd35 	bl	8000514 <__aeabi_ui2d>
 800faaa:	2301      	movs	r3, #1
 800faac:	4606      	mov	r6, r0
 800faae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fab2:	3d01      	subs	r5, #1
 800fab4:	930e      	str	r3, [sp, #56]	; 0x38
 800fab6:	e76a      	b.n	800f98e <_dtoa_r+0x116>
 800fab8:	2301      	movs	r3, #1
 800faba:	e7b2      	b.n	800fa22 <_dtoa_r+0x1aa>
 800fabc:	900b      	str	r0, [sp, #44]	; 0x2c
 800fabe:	e7b1      	b.n	800fa24 <_dtoa_r+0x1ac>
 800fac0:	9b04      	ldr	r3, [sp, #16]
 800fac2:	9a00      	ldr	r2, [sp, #0]
 800fac4:	1a9b      	subs	r3, r3, r2
 800fac6:	9304      	str	r3, [sp, #16]
 800fac8:	4253      	negs	r3, r2
 800faca:	9307      	str	r3, [sp, #28]
 800facc:	2300      	movs	r3, #0
 800face:	930a      	str	r3, [sp, #40]	; 0x28
 800fad0:	e7bf      	b.n	800fa52 <_dtoa_r+0x1da>
 800fad2:	2300      	movs	r3, #0
 800fad4:	9308      	str	r3, [sp, #32]
 800fad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fad8:	2b00      	cmp	r3, #0
 800fada:	dc55      	bgt.n	800fb88 <_dtoa_r+0x310>
 800fadc:	2301      	movs	r3, #1
 800fade:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fae2:	461a      	mov	r2, r3
 800fae4:	9209      	str	r2, [sp, #36]	; 0x24
 800fae6:	e00c      	b.n	800fb02 <_dtoa_r+0x28a>
 800fae8:	2301      	movs	r3, #1
 800faea:	e7f3      	b.n	800fad4 <_dtoa_r+0x25c>
 800faec:	2300      	movs	r3, #0
 800faee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faf0:	9308      	str	r3, [sp, #32]
 800faf2:	9b00      	ldr	r3, [sp, #0]
 800faf4:	4413      	add	r3, r2
 800faf6:	9302      	str	r3, [sp, #8]
 800faf8:	3301      	adds	r3, #1
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	9303      	str	r3, [sp, #12]
 800fafe:	bfb8      	it	lt
 800fb00:	2301      	movlt	r3, #1
 800fb02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fb04:	2200      	movs	r2, #0
 800fb06:	6042      	str	r2, [r0, #4]
 800fb08:	2204      	movs	r2, #4
 800fb0a:	f102 0614 	add.w	r6, r2, #20
 800fb0e:	429e      	cmp	r6, r3
 800fb10:	6841      	ldr	r1, [r0, #4]
 800fb12:	d93d      	bls.n	800fb90 <_dtoa_r+0x318>
 800fb14:	4620      	mov	r0, r4
 800fb16:	f001 f82f 	bl	8010b78 <_Balloc>
 800fb1a:	9001      	str	r0, [sp, #4]
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	d13b      	bne.n	800fb98 <_dtoa_r+0x320>
 800fb20:	4b11      	ldr	r3, [pc, #68]	; (800fb68 <_dtoa_r+0x2f0>)
 800fb22:	4602      	mov	r2, r0
 800fb24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb28:	e6c0      	b.n	800f8ac <_dtoa_r+0x34>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e7df      	b.n	800faee <_dtoa_r+0x276>
 800fb2e:	bf00      	nop
 800fb30:	636f4361 	.word	0x636f4361
 800fb34:	3fd287a7 	.word	0x3fd287a7
 800fb38:	8b60c8b3 	.word	0x8b60c8b3
 800fb3c:	3fc68a28 	.word	0x3fc68a28
 800fb40:	509f79fb 	.word	0x509f79fb
 800fb44:	3fd34413 	.word	0x3fd34413
 800fb48:	0801594d 	.word	0x0801594d
 800fb4c:	08015964 	.word	0x08015964
 800fb50:	7ff00000 	.word	0x7ff00000
 800fb54:	08015949 	.word	0x08015949
 800fb58:	08015940 	.word	0x08015940
 800fb5c:	080158cd 	.word	0x080158cd
 800fb60:	3ff80000 	.word	0x3ff80000
 800fb64:	08015ad0 	.word	0x08015ad0
 800fb68:	080159bf 	.word	0x080159bf
 800fb6c:	2501      	movs	r5, #1
 800fb6e:	2300      	movs	r3, #0
 800fb70:	9306      	str	r3, [sp, #24]
 800fb72:	9508      	str	r5, [sp, #32]
 800fb74:	f04f 33ff 	mov.w	r3, #4294967295
 800fb78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	2312      	movs	r3, #18
 800fb80:	e7b0      	b.n	800fae4 <_dtoa_r+0x26c>
 800fb82:	2301      	movs	r3, #1
 800fb84:	9308      	str	r3, [sp, #32]
 800fb86:	e7f5      	b.n	800fb74 <_dtoa_r+0x2fc>
 800fb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fb8e:	e7b8      	b.n	800fb02 <_dtoa_r+0x28a>
 800fb90:	3101      	adds	r1, #1
 800fb92:	6041      	str	r1, [r0, #4]
 800fb94:	0052      	lsls	r2, r2, #1
 800fb96:	e7b8      	b.n	800fb0a <_dtoa_r+0x292>
 800fb98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb9a:	9a01      	ldr	r2, [sp, #4]
 800fb9c:	601a      	str	r2, [r3, #0]
 800fb9e:	9b03      	ldr	r3, [sp, #12]
 800fba0:	2b0e      	cmp	r3, #14
 800fba2:	f200 809d 	bhi.w	800fce0 <_dtoa_r+0x468>
 800fba6:	2d00      	cmp	r5, #0
 800fba8:	f000 809a 	beq.w	800fce0 <_dtoa_r+0x468>
 800fbac:	9b00      	ldr	r3, [sp, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	dd32      	ble.n	800fc18 <_dtoa_r+0x3a0>
 800fbb2:	4ab7      	ldr	r2, [pc, #732]	; (800fe90 <_dtoa_r+0x618>)
 800fbb4:	f003 030f 	and.w	r3, r3, #15
 800fbb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fbbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fbc0:	9b00      	ldr	r3, [sp, #0]
 800fbc2:	05d8      	lsls	r0, r3, #23
 800fbc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800fbc8:	d516      	bpl.n	800fbf8 <_dtoa_r+0x380>
 800fbca:	4bb2      	ldr	r3, [pc, #712]	; (800fe94 <_dtoa_r+0x61c>)
 800fbcc:	ec51 0b19 	vmov	r0, r1, d9
 800fbd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fbd4:	f7f0 fe42 	bl	800085c <__aeabi_ddiv>
 800fbd8:	f007 070f 	and.w	r7, r7, #15
 800fbdc:	4682      	mov	sl, r0
 800fbde:	468b      	mov	fp, r1
 800fbe0:	2503      	movs	r5, #3
 800fbe2:	4eac      	ldr	r6, [pc, #688]	; (800fe94 <_dtoa_r+0x61c>)
 800fbe4:	b957      	cbnz	r7, 800fbfc <_dtoa_r+0x384>
 800fbe6:	4642      	mov	r2, r8
 800fbe8:	464b      	mov	r3, r9
 800fbea:	4650      	mov	r0, sl
 800fbec:	4659      	mov	r1, fp
 800fbee:	f7f0 fe35 	bl	800085c <__aeabi_ddiv>
 800fbf2:	4682      	mov	sl, r0
 800fbf4:	468b      	mov	fp, r1
 800fbf6:	e028      	b.n	800fc4a <_dtoa_r+0x3d2>
 800fbf8:	2502      	movs	r5, #2
 800fbfa:	e7f2      	b.n	800fbe2 <_dtoa_r+0x36a>
 800fbfc:	07f9      	lsls	r1, r7, #31
 800fbfe:	d508      	bpl.n	800fc12 <_dtoa_r+0x39a>
 800fc00:	4640      	mov	r0, r8
 800fc02:	4649      	mov	r1, r9
 800fc04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fc08:	f7f0 fcfe 	bl	8000608 <__aeabi_dmul>
 800fc0c:	3501      	adds	r5, #1
 800fc0e:	4680      	mov	r8, r0
 800fc10:	4689      	mov	r9, r1
 800fc12:	107f      	asrs	r7, r7, #1
 800fc14:	3608      	adds	r6, #8
 800fc16:	e7e5      	b.n	800fbe4 <_dtoa_r+0x36c>
 800fc18:	f000 809b 	beq.w	800fd52 <_dtoa_r+0x4da>
 800fc1c:	9b00      	ldr	r3, [sp, #0]
 800fc1e:	4f9d      	ldr	r7, [pc, #628]	; (800fe94 <_dtoa_r+0x61c>)
 800fc20:	425e      	negs	r6, r3
 800fc22:	4b9b      	ldr	r3, [pc, #620]	; (800fe90 <_dtoa_r+0x618>)
 800fc24:	f006 020f 	and.w	r2, r6, #15
 800fc28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc30:	ec51 0b19 	vmov	r0, r1, d9
 800fc34:	f7f0 fce8 	bl	8000608 <__aeabi_dmul>
 800fc38:	1136      	asrs	r6, r6, #4
 800fc3a:	4682      	mov	sl, r0
 800fc3c:	468b      	mov	fp, r1
 800fc3e:	2300      	movs	r3, #0
 800fc40:	2502      	movs	r5, #2
 800fc42:	2e00      	cmp	r6, #0
 800fc44:	d17a      	bne.n	800fd3c <_dtoa_r+0x4c4>
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1d3      	bne.n	800fbf2 <_dtoa_r+0x37a>
 800fc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f000 8082 	beq.w	800fd56 <_dtoa_r+0x4de>
 800fc52:	4b91      	ldr	r3, [pc, #580]	; (800fe98 <_dtoa_r+0x620>)
 800fc54:	2200      	movs	r2, #0
 800fc56:	4650      	mov	r0, sl
 800fc58:	4659      	mov	r1, fp
 800fc5a:	f7f0 ff47 	bl	8000aec <__aeabi_dcmplt>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d079      	beq.n	800fd56 <_dtoa_r+0x4de>
 800fc62:	9b03      	ldr	r3, [sp, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d076      	beq.n	800fd56 <_dtoa_r+0x4de>
 800fc68:	9b02      	ldr	r3, [sp, #8]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	dd36      	ble.n	800fcdc <_dtoa_r+0x464>
 800fc6e:	9b00      	ldr	r3, [sp, #0]
 800fc70:	4650      	mov	r0, sl
 800fc72:	4659      	mov	r1, fp
 800fc74:	1e5f      	subs	r7, r3, #1
 800fc76:	2200      	movs	r2, #0
 800fc78:	4b88      	ldr	r3, [pc, #544]	; (800fe9c <_dtoa_r+0x624>)
 800fc7a:	f7f0 fcc5 	bl	8000608 <__aeabi_dmul>
 800fc7e:	9e02      	ldr	r6, [sp, #8]
 800fc80:	4682      	mov	sl, r0
 800fc82:	468b      	mov	fp, r1
 800fc84:	3501      	adds	r5, #1
 800fc86:	4628      	mov	r0, r5
 800fc88:	f7f0 fc54 	bl	8000534 <__aeabi_i2d>
 800fc8c:	4652      	mov	r2, sl
 800fc8e:	465b      	mov	r3, fp
 800fc90:	f7f0 fcba 	bl	8000608 <__aeabi_dmul>
 800fc94:	4b82      	ldr	r3, [pc, #520]	; (800fea0 <_dtoa_r+0x628>)
 800fc96:	2200      	movs	r2, #0
 800fc98:	f7f0 fb00 	bl	800029c <__adddf3>
 800fc9c:	46d0      	mov	r8, sl
 800fc9e:	46d9      	mov	r9, fp
 800fca0:	4682      	mov	sl, r0
 800fca2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800fca6:	2e00      	cmp	r6, #0
 800fca8:	d158      	bne.n	800fd5c <_dtoa_r+0x4e4>
 800fcaa:	4b7e      	ldr	r3, [pc, #504]	; (800fea4 <_dtoa_r+0x62c>)
 800fcac:	2200      	movs	r2, #0
 800fcae:	4640      	mov	r0, r8
 800fcb0:	4649      	mov	r1, r9
 800fcb2:	f7f0 faf1 	bl	8000298 <__aeabi_dsub>
 800fcb6:	4652      	mov	r2, sl
 800fcb8:	465b      	mov	r3, fp
 800fcba:	4680      	mov	r8, r0
 800fcbc:	4689      	mov	r9, r1
 800fcbe:	f7f0 ff33 	bl	8000b28 <__aeabi_dcmpgt>
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	f040 8295 	bne.w	80101f2 <_dtoa_r+0x97a>
 800fcc8:	4652      	mov	r2, sl
 800fcca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fcce:	4640      	mov	r0, r8
 800fcd0:	4649      	mov	r1, r9
 800fcd2:	f7f0 ff0b 	bl	8000aec <__aeabi_dcmplt>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f040 8289 	bne.w	80101ee <_dtoa_r+0x976>
 800fcdc:	ec5b ab19 	vmov	sl, fp, d9
 800fce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f2c0 8148 	blt.w	800ff78 <_dtoa_r+0x700>
 800fce8:	9a00      	ldr	r2, [sp, #0]
 800fcea:	2a0e      	cmp	r2, #14
 800fcec:	f300 8144 	bgt.w	800ff78 <_dtoa_r+0x700>
 800fcf0:	4b67      	ldr	r3, [pc, #412]	; (800fe90 <_dtoa_r+0x618>)
 800fcf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	f280 80d5 	bge.w	800feac <_dtoa_r+0x634>
 800fd02:	9b03      	ldr	r3, [sp, #12]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f300 80d1 	bgt.w	800feac <_dtoa_r+0x634>
 800fd0a:	f040 826f 	bne.w	80101ec <_dtoa_r+0x974>
 800fd0e:	4b65      	ldr	r3, [pc, #404]	; (800fea4 <_dtoa_r+0x62c>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	4640      	mov	r0, r8
 800fd14:	4649      	mov	r1, r9
 800fd16:	f7f0 fc77 	bl	8000608 <__aeabi_dmul>
 800fd1a:	4652      	mov	r2, sl
 800fd1c:	465b      	mov	r3, fp
 800fd1e:	f7f0 fef9 	bl	8000b14 <__aeabi_dcmpge>
 800fd22:	9e03      	ldr	r6, [sp, #12]
 800fd24:	4637      	mov	r7, r6
 800fd26:	2800      	cmp	r0, #0
 800fd28:	f040 8245 	bne.w	80101b6 <_dtoa_r+0x93e>
 800fd2c:	9d01      	ldr	r5, [sp, #4]
 800fd2e:	2331      	movs	r3, #49	; 0x31
 800fd30:	f805 3b01 	strb.w	r3, [r5], #1
 800fd34:	9b00      	ldr	r3, [sp, #0]
 800fd36:	3301      	adds	r3, #1
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	e240      	b.n	80101be <_dtoa_r+0x946>
 800fd3c:	07f2      	lsls	r2, r6, #31
 800fd3e:	d505      	bpl.n	800fd4c <_dtoa_r+0x4d4>
 800fd40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd44:	f7f0 fc60 	bl	8000608 <__aeabi_dmul>
 800fd48:	3501      	adds	r5, #1
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	1076      	asrs	r6, r6, #1
 800fd4e:	3708      	adds	r7, #8
 800fd50:	e777      	b.n	800fc42 <_dtoa_r+0x3ca>
 800fd52:	2502      	movs	r5, #2
 800fd54:	e779      	b.n	800fc4a <_dtoa_r+0x3d2>
 800fd56:	9f00      	ldr	r7, [sp, #0]
 800fd58:	9e03      	ldr	r6, [sp, #12]
 800fd5a:	e794      	b.n	800fc86 <_dtoa_r+0x40e>
 800fd5c:	9901      	ldr	r1, [sp, #4]
 800fd5e:	4b4c      	ldr	r3, [pc, #304]	; (800fe90 <_dtoa_r+0x618>)
 800fd60:	4431      	add	r1, r6
 800fd62:	910d      	str	r1, [sp, #52]	; 0x34
 800fd64:	9908      	ldr	r1, [sp, #32]
 800fd66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fd6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd6e:	2900      	cmp	r1, #0
 800fd70:	d043      	beq.n	800fdfa <_dtoa_r+0x582>
 800fd72:	494d      	ldr	r1, [pc, #308]	; (800fea8 <_dtoa_r+0x630>)
 800fd74:	2000      	movs	r0, #0
 800fd76:	f7f0 fd71 	bl	800085c <__aeabi_ddiv>
 800fd7a:	4652      	mov	r2, sl
 800fd7c:	465b      	mov	r3, fp
 800fd7e:	f7f0 fa8b 	bl	8000298 <__aeabi_dsub>
 800fd82:	9d01      	ldr	r5, [sp, #4]
 800fd84:	4682      	mov	sl, r0
 800fd86:	468b      	mov	fp, r1
 800fd88:	4649      	mov	r1, r9
 800fd8a:	4640      	mov	r0, r8
 800fd8c:	f7f0 feec 	bl	8000b68 <__aeabi_d2iz>
 800fd90:	4606      	mov	r6, r0
 800fd92:	f7f0 fbcf 	bl	8000534 <__aeabi_i2d>
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4640      	mov	r0, r8
 800fd9c:	4649      	mov	r1, r9
 800fd9e:	f7f0 fa7b 	bl	8000298 <__aeabi_dsub>
 800fda2:	3630      	adds	r6, #48	; 0x30
 800fda4:	f805 6b01 	strb.w	r6, [r5], #1
 800fda8:	4652      	mov	r2, sl
 800fdaa:	465b      	mov	r3, fp
 800fdac:	4680      	mov	r8, r0
 800fdae:	4689      	mov	r9, r1
 800fdb0:	f7f0 fe9c 	bl	8000aec <__aeabi_dcmplt>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d163      	bne.n	800fe80 <_dtoa_r+0x608>
 800fdb8:	4642      	mov	r2, r8
 800fdba:	464b      	mov	r3, r9
 800fdbc:	4936      	ldr	r1, [pc, #216]	; (800fe98 <_dtoa_r+0x620>)
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	f7f0 fa6a 	bl	8000298 <__aeabi_dsub>
 800fdc4:	4652      	mov	r2, sl
 800fdc6:	465b      	mov	r3, fp
 800fdc8:	f7f0 fe90 	bl	8000aec <__aeabi_dcmplt>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	f040 80b5 	bne.w	800ff3c <_dtoa_r+0x6c4>
 800fdd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fdd4:	429d      	cmp	r5, r3
 800fdd6:	d081      	beq.n	800fcdc <_dtoa_r+0x464>
 800fdd8:	4b30      	ldr	r3, [pc, #192]	; (800fe9c <_dtoa_r+0x624>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	4650      	mov	r0, sl
 800fdde:	4659      	mov	r1, fp
 800fde0:	f7f0 fc12 	bl	8000608 <__aeabi_dmul>
 800fde4:	4b2d      	ldr	r3, [pc, #180]	; (800fe9c <_dtoa_r+0x624>)
 800fde6:	4682      	mov	sl, r0
 800fde8:	468b      	mov	fp, r1
 800fdea:	4640      	mov	r0, r8
 800fdec:	4649      	mov	r1, r9
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f7f0 fc0a 	bl	8000608 <__aeabi_dmul>
 800fdf4:	4680      	mov	r8, r0
 800fdf6:	4689      	mov	r9, r1
 800fdf8:	e7c6      	b.n	800fd88 <_dtoa_r+0x510>
 800fdfa:	4650      	mov	r0, sl
 800fdfc:	4659      	mov	r1, fp
 800fdfe:	f7f0 fc03 	bl	8000608 <__aeabi_dmul>
 800fe02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe04:	9d01      	ldr	r5, [sp, #4]
 800fe06:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe08:	4682      	mov	sl, r0
 800fe0a:	468b      	mov	fp, r1
 800fe0c:	4649      	mov	r1, r9
 800fe0e:	4640      	mov	r0, r8
 800fe10:	f7f0 feaa 	bl	8000b68 <__aeabi_d2iz>
 800fe14:	4606      	mov	r6, r0
 800fe16:	f7f0 fb8d 	bl	8000534 <__aeabi_i2d>
 800fe1a:	3630      	adds	r6, #48	; 0x30
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	460b      	mov	r3, r1
 800fe20:	4640      	mov	r0, r8
 800fe22:	4649      	mov	r1, r9
 800fe24:	f7f0 fa38 	bl	8000298 <__aeabi_dsub>
 800fe28:	f805 6b01 	strb.w	r6, [r5], #1
 800fe2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe2e:	429d      	cmp	r5, r3
 800fe30:	4680      	mov	r8, r0
 800fe32:	4689      	mov	r9, r1
 800fe34:	f04f 0200 	mov.w	r2, #0
 800fe38:	d124      	bne.n	800fe84 <_dtoa_r+0x60c>
 800fe3a:	4b1b      	ldr	r3, [pc, #108]	; (800fea8 <_dtoa_r+0x630>)
 800fe3c:	4650      	mov	r0, sl
 800fe3e:	4659      	mov	r1, fp
 800fe40:	f7f0 fa2c 	bl	800029c <__adddf3>
 800fe44:	4602      	mov	r2, r0
 800fe46:	460b      	mov	r3, r1
 800fe48:	4640      	mov	r0, r8
 800fe4a:	4649      	mov	r1, r9
 800fe4c:	f7f0 fe6c 	bl	8000b28 <__aeabi_dcmpgt>
 800fe50:	2800      	cmp	r0, #0
 800fe52:	d173      	bne.n	800ff3c <_dtoa_r+0x6c4>
 800fe54:	4652      	mov	r2, sl
 800fe56:	465b      	mov	r3, fp
 800fe58:	4913      	ldr	r1, [pc, #76]	; (800fea8 <_dtoa_r+0x630>)
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	f7f0 fa1c 	bl	8000298 <__aeabi_dsub>
 800fe60:	4602      	mov	r2, r0
 800fe62:	460b      	mov	r3, r1
 800fe64:	4640      	mov	r0, r8
 800fe66:	4649      	mov	r1, r9
 800fe68:	f7f0 fe40 	bl	8000aec <__aeabi_dcmplt>
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	f43f af35 	beq.w	800fcdc <_dtoa_r+0x464>
 800fe72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fe74:	1e6b      	subs	r3, r5, #1
 800fe76:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fe7c:	2b30      	cmp	r3, #48	; 0x30
 800fe7e:	d0f8      	beq.n	800fe72 <_dtoa_r+0x5fa>
 800fe80:	9700      	str	r7, [sp, #0]
 800fe82:	e049      	b.n	800ff18 <_dtoa_r+0x6a0>
 800fe84:	4b05      	ldr	r3, [pc, #20]	; (800fe9c <_dtoa_r+0x624>)
 800fe86:	f7f0 fbbf 	bl	8000608 <__aeabi_dmul>
 800fe8a:	4680      	mov	r8, r0
 800fe8c:	4689      	mov	r9, r1
 800fe8e:	e7bd      	b.n	800fe0c <_dtoa_r+0x594>
 800fe90:	08015ad0 	.word	0x08015ad0
 800fe94:	08015aa8 	.word	0x08015aa8
 800fe98:	3ff00000 	.word	0x3ff00000
 800fe9c:	40240000 	.word	0x40240000
 800fea0:	401c0000 	.word	0x401c0000
 800fea4:	40140000 	.word	0x40140000
 800fea8:	3fe00000 	.word	0x3fe00000
 800feac:	9d01      	ldr	r5, [sp, #4]
 800feae:	4656      	mov	r6, sl
 800feb0:	465f      	mov	r7, fp
 800feb2:	4642      	mov	r2, r8
 800feb4:	464b      	mov	r3, r9
 800feb6:	4630      	mov	r0, r6
 800feb8:	4639      	mov	r1, r7
 800feba:	f7f0 fccf 	bl	800085c <__aeabi_ddiv>
 800febe:	f7f0 fe53 	bl	8000b68 <__aeabi_d2iz>
 800fec2:	4682      	mov	sl, r0
 800fec4:	f7f0 fb36 	bl	8000534 <__aeabi_i2d>
 800fec8:	4642      	mov	r2, r8
 800feca:	464b      	mov	r3, r9
 800fecc:	f7f0 fb9c 	bl	8000608 <__aeabi_dmul>
 800fed0:	4602      	mov	r2, r0
 800fed2:	460b      	mov	r3, r1
 800fed4:	4630      	mov	r0, r6
 800fed6:	4639      	mov	r1, r7
 800fed8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800fedc:	f7f0 f9dc 	bl	8000298 <__aeabi_dsub>
 800fee0:	f805 6b01 	strb.w	r6, [r5], #1
 800fee4:	9e01      	ldr	r6, [sp, #4]
 800fee6:	9f03      	ldr	r7, [sp, #12]
 800fee8:	1bae      	subs	r6, r5, r6
 800feea:	42b7      	cmp	r7, r6
 800feec:	4602      	mov	r2, r0
 800feee:	460b      	mov	r3, r1
 800fef0:	d135      	bne.n	800ff5e <_dtoa_r+0x6e6>
 800fef2:	f7f0 f9d3 	bl	800029c <__adddf3>
 800fef6:	4642      	mov	r2, r8
 800fef8:	464b      	mov	r3, r9
 800fefa:	4606      	mov	r6, r0
 800fefc:	460f      	mov	r7, r1
 800fefe:	f7f0 fe13 	bl	8000b28 <__aeabi_dcmpgt>
 800ff02:	b9d0      	cbnz	r0, 800ff3a <_dtoa_r+0x6c2>
 800ff04:	4642      	mov	r2, r8
 800ff06:	464b      	mov	r3, r9
 800ff08:	4630      	mov	r0, r6
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	f7f0 fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff10:	b110      	cbz	r0, 800ff18 <_dtoa_r+0x6a0>
 800ff12:	f01a 0f01 	tst.w	sl, #1
 800ff16:	d110      	bne.n	800ff3a <_dtoa_r+0x6c2>
 800ff18:	4620      	mov	r0, r4
 800ff1a:	ee18 1a10 	vmov	r1, s16
 800ff1e:	f000 fe6b 	bl	8010bf8 <_Bfree>
 800ff22:	2300      	movs	r3, #0
 800ff24:	9800      	ldr	r0, [sp, #0]
 800ff26:	702b      	strb	r3, [r5, #0]
 800ff28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff2a:	3001      	adds	r0, #1
 800ff2c:	6018      	str	r0, [r3, #0]
 800ff2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f43f acf1 	beq.w	800f918 <_dtoa_r+0xa0>
 800ff36:	601d      	str	r5, [r3, #0]
 800ff38:	e4ee      	b.n	800f918 <_dtoa_r+0xa0>
 800ff3a:	9f00      	ldr	r7, [sp, #0]
 800ff3c:	462b      	mov	r3, r5
 800ff3e:	461d      	mov	r5, r3
 800ff40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff44:	2a39      	cmp	r2, #57	; 0x39
 800ff46:	d106      	bne.n	800ff56 <_dtoa_r+0x6de>
 800ff48:	9a01      	ldr	r2, [sp, #4]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d1f7      	bne.n	800ff3e <_dtoa_r+0x6c6>
 800ff4e:	9901      	ldr	r1, [sp, #4]
 800ff50:	2230      	movs	r2, #48	; 0x30
 800ff52:	3701      	adds	r7, #1
 800ff54:	700a      	strb	r2, [r1, #0]
 800ff56:	781a      	ldrb	r2, [r3, #0]
 800ff58:	3201      	adds	r2, #1
 800ff5a:	701a      	strb	r2, [r3, #0]
 800ff5c:	e790      	b.n	800fe80 <_dtoa_r+0x608>
 800ff5e:	4ba6      	ldr	r3, [pc, #664]	; (80101f8 <_dtoa_r+0x980>)
 800ff60:	2200      	movs	r2, #0
 800ff62:	f7f0 fb51 	bl	8000608 <__aeabi_dmul>
 800ff66:	2200      	movs	r2, #0
 800ff68:	2300      	movs	r3, #0
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	460f      	mov	r7, r1
 800ff6e:	f7f0 fdb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d09d      	beq.n	800feb2 <_dtoa_r+0x63a>
 800ff76:	e7cf      	b.n	800ff18 <_dtoa_r+0x6a0>
 800ff78:	9a08      	ldr	r2, [sp, #32]
 800ff7a:	2a00      	cmp	r2, #0
 800ff7c:	f000 80d7 	beq.w	801012e <_dtoa_r+0x8b6>
 800ff80:	9a06      	ldr	r2, [sp, #24]
 800ff82:	2a01      	cmp	r2, #1
 800ff84:	f300 80ba 	bgt.w	80100fc <_dtoa_r+0x884>
 800ff88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff8a:	2a00      	cmp	r2, #0
 800ff8c:	f000 80b2 	beq.w	80100f4 <_dtoa_r+0x87c>
 800ff90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ff94:	9e07      	ldr	r6, [sp, #28]
 800ff96:	9d04      	ldr	r5, [sp, #16]
 800ff98:	9a04      	ldr	r2, [sp, #16]
 800ff9a:	441a      	add	r2, r3
 800ff9c:	9204      	str	r2, [sp, #16]
 800ff9e:	9a05      	ldr	r2, [sp, #20]
 800ffa0:	2101      	movs	r1, #1
 800ffa2:	441a      	add	r2, r3
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	9205      	str	r2, [sp, #20]
 800ffa8:	f000 ff28 	bl	8010dfc <__i2b>
 800ffac:	4607      	mov	r7, r0
 800ffae:	2d00      	cmp	r5, #0
 800ffb0:	dd0c      	ble.n	800ffcc <_dtoa_r+0x754>
 800ffb2:	9b05      	ldr	r3, [sp, #20]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	dd09      	ble.n	800ffcc <_dtoa_r+0x754>
 800ffb8:	42ab      	cmp	r3, r5
 800ffba:	9a04      	ldr	r2, [sp, #16]
 800ffbc:	bfa8      	it	ge
 800ffbe:	462b      	movge	r3, r5
 800ffc0:	1ad2      	subs	r2, r2, r3
 800ffc2:	9204      	str	r2, [sp, #16]
 800ffc4:	9a05      	ldr	r2, [sp, #20]
 800ffc6:	1aed      	subs	r5, r5, r3
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	9305      	str	r3, [sp, #20]
 800ffcc:	9b07      	ldr	r3, [sp, #28]
 800ffce:	b31b      	cbz	r3, 8010018 <_dtoa_r+0x7a0>
 800ffd0:	9b08      	ldr	r3, [sp, #32]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	f000 80af 	beq.w	8010136 <_dtoa_r+0x8be>
 800ffd8:	2e00      	cmp	r6, #0
 800ffda:	dd13      	ble.n	8010004 <_dtoa_r+0x78c>
 800ffdc:	4639      	mov	r1, r7
 800ffde:	4632      	mov	r2, r6
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 ffcb 	bl	8010f7c <__pow5mult>
 800ffe6:	ee18 2a10 	vmov	r2, s16
 800ffea:	4601      	mov	r1, r0
 800ffec:	4607      	mov	r7, r0
 800ffee:	4620      	mov	r0, r4
 800fff0:	f000 ff1a 	bl	8010e28 <__multiply>
 800fff4:	ee18 1a10 	vmov	r1, s16
 800fff8:	4680      	mov	r8, r0
 800fffa:	4620      	mov	r0, r4
 800fffc:	f000 fdfc 	bl	8010bf8 <_Bfree>
 8010000:	ee08 8a10 	vmov	s16, r8
 8010004:	9b07      	ldr	r3, [sp, #28]
 8010006:	1b9a      	subs	r2, r3, r6
 8010008:	d006      	beq.n	8010018 <_dtoa_r+0x7a0>
 801000a:	ee18 1a10 	vmov	r1, s16
 801000e:	4620      	mov	r0, r4
 8010010:	f000 ffb4 	bl	8010f7c <__pow5mult>
 8010014:	ee08 0a10 	vmov	s16, r0
 8010018:	2101      	movs	r1, #1
 801001a:	4620      	mov	r0, r4
 801001c:	f000 feee 	bl	8010dfc <__i2b>
 8010020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010022:	2b00      	cmp	r3, #0
 8010024:	4606      	mov	r6, r0
 8010026:	f340 8088 	ble.w	801013a <_dtoa_r+0x8c2>
 801002a:	461a      	mov	r2, r3
 801002c:	4601      	mov	r1, r0
 801002e:	4620      	mov	r0, r4
 8010030:	f000 ffa4 	bl	8010f7c <__pow5mult>
 8010034:	9b06      	ldr	r3, [sp, #24]
 8010036:	2b01      	cmp	r3, #1
 8010038:	4606      	mov	r6, r0
 801003a:	f340 8081 	ble.w	8010140 <_dtoa_r+0x8c8>
 801003e:	f04f 0800 	mov.w	r8, #0
 8010042:	6933      	ldr	r3, [r6, #16]
 8010044:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010048:	6918      	ldr	r0, [r3, #16]
 801004a:	f000 fe87 	bl	8010d5c <__hi0bits>
 801004e:	f1c0 0020 	rsb	r0, r0, #32
 8010052:	9b05      	ldr	r3, [sp, #20]
 8010054:	4418      	add	r0, r3
 8010056:	f010 001f 	ands.w	r0, r0, #31
 801005a:	f000 8092 	beq.w	8010182 <_dtoa_r+0x90a>
 801005e:	f1c0 0320 	rsb	r3, r0, #32
 8010062:	2b04      	cmp	r3, #4
 8010064:	f340 808a 	ble.w	801017c <_dtoa_r+0x904>
 8010068:	f1c0 001c 	rsb	r0, r0, #28
 801006c:	9b04      	ldr	r3, [sp, #16]
 801006e:	4403      	add	r3, r0
 8010070:	9304      	str	r3, [sp, #16]
 8010072:	9b05      	ldr	r3, [sp, #20]
 8010074:	4403      	add	r3, r0
 8010076:	4405      	add	r5, r0
 8010078:	9305      	str	r3, [sp, #20]
 801007a:	9b04      	ldr	r3, [sp, #16]
 801007c:	2b00      	cmp	r3, #0
 801007e:	dd07      	ble.n	8010090 <_dtoa_r+0x818>
 8010080:	ee18 1a10 	vmov	r1, s16
 8010084:	461a      	mov	r2, r3
 8010086:	4620      	mov	r0, r4
 8010088:	f000 ffd2 	bl	8011030 <__lshift>
 801008c:	ee08 0a10 	vmov	s16, r0
 8010090:	9b05      	ldr	r3, [sp, #20]
 8010092:	2b00      	cmp	r3, #0
 8010094:	dd05      	ble.n	80100a2 <_dtoa_r+0x82a>
 8010096:	4631      	mov	r1, r6
 8010098:	461a      	mov	r2, r3
 801009a:	4620      	mov	r0, r4
 801009c:	f000 ffc8 	bl	8011030 <__lshift>
 80100a0:	4606      	mov	r6, r0
 80100a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d06e      	beq.n	8010186 <_dtoa_r+0x90e>
 80100a8:	ee18 0a10 	vmov	r0, s16
 80100ac:	4631      	mov	r1, r6
 80100ae:	f001 f82f 	bl	8011110 <__mcmp>
 80100b2:	2800      	cmp	r0, #0
 80100b4:	da67      	bge.n	8010186 <_dtoa_r+0x90e>
 80100b6:	9b00      	ldr	r3, [sp, #0]
 80100b8:	3b01      	subs	r3, #1
 80100ba:	ee18 1a10 	vmov	r1, s16
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	220a      	movs	r2, #10
 80100c2:	2300      	movs	r3, #0
 80100c4:	4620      	mov	r0, r4
 80100c6:	f000 fdb9 	bl	8010c3c <__multadd>
 80100ca:	9b08      	ldr	r3, [sp, #32]
 80100cc:	ee08 0a10 	vmov	s16, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	f000 81b1 	beq.w	8010438 <_dtoa_r+0xbc0>
 80100d6:	2300      	movs	r3, #0
 80100d8:	4639      	mov	r1, r7
 80100da:	220a      	movs	r2, #10
 80100dc:	4620      	mov	r0, r4
 80100de:	f000 fdad 	bl	8010c3c <__multadd>
 80100e2:	9b02      	ldr	r3, [sp, #8]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	4607      	mov	r7, r0
 80100e8:	f300 808e 	bgt.w	8010208 <_dtoa_r+0x990>
 80100ec:	9b06      	ldr	r3, [sp, #24]
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	dc51      	bgt.n	8010196 <_dtoa_r+0x91e>
 80100f2:	e089      	b.n	8010208 <_dtoa_r+0x990>
 80100f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80100fa:	e74b      	b.n	800ff94 <_dtoa_r+0x71c>
 80100fc:	9b03      	ldr	r3, [sp, #12]
 80100fe:	1e5e      	subs	r6, r3, #1
 8010100:	9b07      	ldr	r3, [sp, #28]
 8010102:	42b3      	cmp	r3, r6
 8010104:	bfbf      	itttt	lt
 8010106:	9b07      	ldrlt	r3, [sp, #28]
 8010108:	9607      	strlt	r6, [sp, #28]
 801010a:	1af2      	sublt	r2, r6, r3
 801010c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801010e:	bfb6      	itet	lt
 8010110:	189b      	addlt	r3, r3, r2
 8010112:	1b9e      	subge	r6, r3, r6
 8010114:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010116:	9b03      	ldr	r3, [sp, #12]
 8010118:	bfb8      	it	lt
 801011a:	2600      	movlt	r6, #0
 801011c:	2b00      	cmp	r3, #0
 801011e:	bfb7      	itett	lt
 8010120:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010124:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010128:	1a9d      	sublt	r5, r3, r2
 801012a:	2300      	movlt	r3, #0
 801012c:	e734      	b.n	800ff98 <_dtoa_r+0x720>
 801012e:	9e07      	ldr	r6, [sp, #28]
 8010130:	9d04      	ldr	r5, [sp, #16]
 8010132:	9f08      	ldr	r7, [sp, #32]
 8010134:	e73b      	b.n	800ffae <_dtoa_r+0x736>
 8010136:	9a07      	ldr	r2, [sp, #28]
 8010138:	e767      	b.n	801000a <_dtoa_r+0x792>
 801013a:	9b06      	ldr	r3, [sp, #24]
 801013c:	2b01      	cmp	r3, #1
 801013e:	dc18      	bgt.n	8010172 <_dtoa_r+0x8fa>
 8010140:	f1ba 0f00 	cmp.w	sl, #0
 8010144:	d115      	bne.n	8010172 <_dtoa_r+0x8fa>
 8010146:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801014a:	b993      	cbnz	r3, 8010172 <_dtoa_r+0x8fa>
 801014c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010150:	0d1b      	lsrs	r3, r3, #20
 8010152:	051b      	lsls	r3, r3, #20
 8010154:	b183      	cbz	r3, 8010178 <_dtoa_r+0x900>
 8010156:	9b04      	ldr	r3, [sp, #16]
 8010158:	3301      	adds	r3, #1
 801015a:	9304      	str	r3, [sp, #16]
 801015c:	9b05      	ldr	r3, [sp, #20]
 801015e:	3301      	adds	r3, #1
 8010160:	9305      	str	r3, [sp, #20]
 8010162:	f04f 0801 	mov.w	r8, #1
 8010166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010168:	2b00      	cmp	r3, #0
 801016a:	f47f af6a 	bne.w	8010042 <_dtoa_r+0x7ca>
 801016e:	2001      	movs	r0, #1
 8010170:	e76f      	b.n	8010052 <_dtoa_r+0x7da>
 8010172:	f04f 0800 	mov.w	r8, #0
 8010176:	e7f6      	b.n	8010166 <_dtoa_r+0x8ee>
 8010178:	4698      	mov	r8, r3
 801017a:	e7f4      	b.n	8010166 <_dtoa_r+0x8ee>
 801017c:	f43f af7d 	beq.w	801007a <_dtoa_r+0x802>
 8010180:	4618      	mov	r0, r3
 8010182:	301c      	adds	r0, #28
 8010184:	e772      	b.n	801006c <_dtoa_r+0x7f4>
 8010186:	9b03      	ldr	r3, [sp, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	dc37      	bgt.n	80101fc <_dtoa_r+0x984>
 801018c:	9b06      	ldr	r3, [sp, #24]
 801018e:	2b02      	cmp	r3, #2
 8010190:	dd34      	ble.n	80101fc <_dtoa_r+0x984>
 8010192:	9b03      	ldr	r3, [sp, #12]
 8010194:	9302      	str	r3, [sp, #8]
 8010196:	9b02      	ldr	r3, [sp, #8]
 8010198:	b96b      	cbnz	r3, 80101b6 <_dtoa_r+0x93e>
 801019a:	4631      	mov	r1, r6
 801019c:	2205      	movs	r2, #5
 801019e:	4620      	mov	r0, r4
 80101a0:	f000 fd4c 	bl	8010c3c <__multadd>
 80101a4:	4601      	mov	r1, r0
 80101a6:	4606      	mov	r6, r0
 80101a8:	ee18 0a10 	vmov	r0, s16
 80101ac:	f000 ffb0 	bl	8011110 <__mcmp>
 80101b0:	2800      	cmp	r0, #0
 80101b2:	f73f adbb 	bgt.w	800fd2c <_dtoa_r+0x4b4>
 80101b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b8:	9d01      	ldr	r5, [sp, #4]
 80101ba:	43db      	mvns	r3, r3
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	f04f 0800 	mov.w	r8, #0
 80101c2:	4631      	mov	r1, r6
 80101c4:	4620      	mov	r0, r4
 80101c6:	f000 fd17 	bl	8010bf8 <_Bfree>
 80101ca:	2f00      	cmp	r7, #0
 80101cc:	f43f aea4 	beq.w	800ff18 <_dtoa_r+0x6a0>
 80101d0:	f1b8 0f00 	cmp.w	r8, #0
 80101d4:	d005      	beq.n	80101e2 <_dtoa_r+0x96a>
 80101d6:	45b8      	cmp	r8, r7
 80101d8:	d003      	beq.n	80101e2 <_dtoa_r+0x96a>
 80101da:	4641      	mov	r1, r8
 80101dc:	4620      	mov	r0, r4
 80101de:	f000 fd0b 	bl	8010bf8 <_Bfree>
 80101e2:	4639      	mov	r1, r7
 80101e4:	4620      	mov	r0, r4
 80101e6:	f000 fd07 	bl	8010bf8 <_Bfree>
 80101ea:	e695      	b.n	800ff18 <_dtoa_r+0x6a0>
 80101ec:	2600      	movs	r6, #0
 80101ee:	4637      	mov	r7, r6
 80101f0:	e7e1      	b.n	80101b6 <_dtoa_r+0x93e>
 80101f2:	9700      	str	r7, [sp, #0]
 80101f4:	4637      	mov	r7, r6
 80101f6:	e599      	b.n	800fd2c <_dtoa_r+0x4b4>
 80101f8:	40240000 	.word	0x40240000
 80101fc:	9b08      	ldr	r3, [sp, #32]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	f000 80ca 	beq.w	8010398 <_dtoa_r+0xb20>
 8010204:	9b03      	ldr	r3, [sp, #12]
 8010206:	9302      	str	r3, [sp, #8]
 8010208:	2d00      	cmp	r5, #0
 801020a:	dd05      	ble.n	8010218 <_dtoa_r+0x9a0>
 801020c:	4639      	mov	r1, r7
 801020e:	462a      	mov	r2, r5
 8010210:	4620      	mov	r0, r4
 8010212:	f000 ff0d 	bl	8011030 <__lshift>
 8010216:	4607      	mov	r7, r0
 8010218:	f1b8 0f00 	cmp.w	r8, #0
 801021c:	d05b      	beq.n	80102d6 <_dtoa_r+0xa5e>
 801021e:	6879      	ldr	r1, [r7, #4]
 8010220:	4620      	mov	r0, r4
 8010222:	f000 fca9 	bl	8010b78 <_Balloc>
 8010226:	4605      	mov	r5, r0
 8010228:	b928      	cbnz	r0, 8010236 <_dtoa_r+0x9be>
 801022a:	4b87      	ldr	r3, [pc, #540]	; (8010448 <_dtoa_r+0xbd0>)
 801022c:	4602      	mov	r2, r0
 801022e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010232:	f7ff bb3b 	b.w	800f8ac <_dtoa_r+0x34>
 8010236:	693a      	ldr	r2, [r7, #16]
 8010238:	3202      	adds	r2, #2
 801023a:	0092      	lsls	r2, r2, #2
 801023c:	f107 010c 	add.w	r1, r7, #12
 8010240:	300c      	adds	r0, #12
 8010242:	f7fd feb9 	bl	800dfb8 <memcpy>
 8010246:	2201      	movs	r2, #1
 8010248:	4629      	mov	r1, r5
 801024a:	4620      	mov	r0, r4
 801024c:	f000 fef0 	bl	8011030 <__lshift>
 8010250:	9b01      	ldr	r3, [sp, #4]
 8010252:	f103 0901 	add.w	r9, r3, #1
 8010256:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801025a:	4413      	add	r3, r2
 801025c:	9305      	str	r3, [sp, #20]
 801025e:	f00a 0301 	and.w	r3, sl, #1
 8010262:	46b8      	mov	r8, r7
 8010264:	9304      	str	r3, [sp, #16]
 8010266:	4607      	mov	r7, r0
 8010268:	4631      	mov	r1, r6
 801026a:	ee18 0a10 	vmov	r0, s16
 801026e:	f7ff fa75 	bl	800f75c <quorem>
 8010272:	4641      	mov	r1, r8
 8010274:	9002      	str	r0, [sp, #8]
 8010276:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801027a:	ee18 0a10 	vmov	r0, s16
 801027e:	f000 ff47 	bl	8011110 <__mcmp>
 8010282:	463a      	mov	r2, r7
 8010284:	9003      	str	r0, [sp, #12]
 8010286:	4631      	mov	r1, r6
 8010288:	4620      	mov	r0, r4
 801028a:	f000 ff5d 	bl	8011148 <__mdiff>
 801028e:	68c2      	ldr	r2, [r0, #12]
 8010290:	f109 3bff 	add.w	fp, r9, #4294967295
 8010294:	4605      	mov	r5, r0
 8010296:	bb02      	cbnz	r2, 80102da <_dtoa_r+0xa62>
 8010298:	4601      	mov	r1, r0
 801029a:	ee18 0a10 	vmov	r0, s16
 801029e:	f000 ff37 	bl	8011110 <__mcmp>
 80102a2:	4602      	mov	r2, r0
 80102a4:	4629      	mov	r1, r5
 80102a6:	4620      	mov	r0, r4
 80102a8:	9207      	str	r2, [sp, #28]
 80102aa:	f000 fca5 	bl	8010bf8 <_Bfree>
 80102ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80102b2:	ea43 0102 	orr.w	r1, r3, r2
 80102b6:	9b04      	ldr	r3, [sp, #16]
 80102b8:	430b      	orrs	r3, r1
 80102ba:	464d      	mov	r5, r9
 80102bc:	d10f      	bne.n	80102de <_dtoa_r+0xa66>
 80102be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80102c2:	d02a      	beq.n	801031a <_dtoa_r+0xaa2>
 80102c4:	9b03      	ldr	r3, [sp, #12]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	dd02      	ble.n	80102d0 <_dtoa_r+0xa58>
 80102ca:	9b02      	ldr	r3, [sp, #8]
 80102cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80102d0:	f88b a000 	strb.w	sl, [fp]
 80102d4:	e775      	b.n	80101c2 <_dtoa_r+0x94a>
 80102d6:	4638      	mov	r0, r7
 80102d8:	e7ba      	b.n	8010250 <_dtoa_r+0x9d8>
 80102da:	2201      	movs	r2, #1
 80102dc:	e7e2      	b.n	80102a4 <_dtoa_r+0xa2c>
 80102de:	9b03      	ldr	r3, [sp, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	db04      	blt.n	80102ee <_dtoa_r+0xa76>
 80102e4:	9906      	ldr	r1, [sp, #24]
 80102e6:	430b      	orrs	r3, r1
 80102e8:	9904      	ldr	r1, [sp, #16]
 80102ea:	430b      	orrs	r3, r1
 80102ec:	d122      	bne.n	8010334 <_dtoa_r+0xabc>
 80102ee:	2a00      	cmp	r2, #0
 80102f0:	ddee      	ble.n	80102d0 <_dtoa_r+0xa58>
 80102f2:	ee18 1a10 	vmov	r1, s16
 80102f6:	2201      	movs	r2, #1
 80102f8:	4620      	mov	r0, r4
 80102fa:	f000 fe99 	bl	8011030 <__lshift>
 80102fe:	4631      	mov	r1, r6
 8010300:	ee08 0a10 	vmov	s16, r0
 8010304:	f000 ff04 	bl	8011110 <__mcmp>
 8010308:	2800      	cmp	r0, #0
 801030a:	dc03      	bgt.n	8010314 <_dtoa_r+0xa9c>
 801030c:	d1e0      	bne.n	80102d0 <_dtoa_r+0xa58>
 801030e:	f01a 0f01 	tst.w	sl, #1
 8010312:	d0dd      	beq.n	80102d0 <_dtoa_r+0xa58>
 8010314:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010318:	d1d7      	bne.n	80102ca <_dtoa_r+0xa52>
 801031a:	2339      	movs	r3, #57	; 0x39
 801031c:	f88b 3000 	strb.w	r3, [fp]
 8010320:	462b      	mov	r3, r5
 8010322:	461d      	mov	r5, r3
 8010324:	3b01      	subs	r3, #1
 8010326:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801032a:	2a39      	cmp	r2, #57	; 0x39
 801032c:	d071      	beq.n	8010412 <_dtoa_r+0xb9a>
 801032e:	3201      	adds	r2, #1
 8010330:	701a      	strb	r2, [r3, #0]
 8010332:	e746      	b.n	80101c2 <_dtoa_r+0x94a>
 8010334:	2a00      	cmp	r2, #0
 8010336:	dd07      	ble.n	8010348 <_dtoa_r+0xad0>
 8010338:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801033c:	d0ed      	beq.n	801031a <_dtoa_r+0xaa2>
 801033e:	f10a 0301 	add.w	r3, sl, #1
 8010342:	f88b 3000 	strb.w	r3, [fp]
 8010346:	e73c      	b.n	80101c2 <_dtoa_r+0x94a>
 8010348:	9b05      	ldr	r3, [sp, #20]
 801034a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801034e:	4599      	cmp	r9, r3
 8010350:	d047      	beq.n	80103e2 <_dtoa_r+0xb6a>
 8010352:	ee18 1a10 	vmov	r1, s16
 8010356:	2300      	movs	r3, #0
 8010358:	220a      	movs	r2, #10
 801035a:	4620      	mov	r0, r4
 801035c:	f000 fc6e 	bl	8010c3c <__multadd>
 8010360:	45b8      	cmp	r8, r7
 8010362:	ee08 0a10 	vmov	s16, r0
 8010366:	f04f 0300 	mov.w	r3, #0
 801036a:	f04f 020a 	mov.w	r2, #10
 801036e:	4641      	mov	r1, r8
 8010370:	4620      	mov	r0, r4
 8010372:	d106      	bne.n	8010382 <_dtoa_r+0xb0a>
 8010374:	f000 fc62 	bl	8010c3c <__multadd>
 8010378:	4680      	mov	r8, r0
 801037a:	4607      	mov	r7, r0
 801037c:	f109 0901 	add.w	r9, r9, #1
 8010380:	e772      	b.n	8010268 <_dtoa_r+0x9f0>
 8010382:	f000 fc5b 	bl	8010c3c <__multadd>
 8010386:	4639      	mov	r1, r7
 8010388:	4680      	mov	r8, r0
 801038a:	2300      	movs	r3, #0
 801038c:	220a      	movs	r2, #10
 801038e:	4620      	mov	r0, r4
 8010390:	f000 fc54 	bl	8010c3c <__multadd>
 8010394:	4607      	mov	r7, r0
 8010396:	e7f1      	b.n	801037c <_dtoa_r+0xb04>
 8010398:	9b03      	ldr	r3, [sp, #12]
 801039a:	9302      	str	r3, [sp, #8]
 801039c:	9d01      	ldr	r5, [sp, #4]
 801039e:	ee18 0a10 	vmov	r0, s16
 80103a2:	4631      	mov	r1, r6
 80103a4:	f7ff f9da 	bl	800f75c <quorem>
 80103a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80103ac:	9b01      	ldr	r3, [sp, #4]
 80103ae:	f805 ab01 	strb.w	sl, [r5], #1
 80103b2:	1aea      	subs	r2, r5, r3
 80103b4:	9b02      	ldr	r3, [sp, #8]
 80103b6:	4293      	cmp	r3, r2
 80103b8:	dd09      	ble.n	80103ce <_dtoa_r+0xb56>
 80103ba:	ee18 1a10 	vmov	r1, s16
 80103be:	2300      	movs	r3, #0
 80103c0:	220a      	movs	r2, #10
 80103c2:	4620      	mov	r0, r4
 80103c4:	f000 fc3a 	bl	8010c3c <__multadd>
 80103c8:	ee08 0a10 	vmov	s16, r0
 80103cc:	e7e7      	b.n	801039e <_dtoa_r+0xb26>
 80103ce:	9b02      	ldr	r3, [sp, #8]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	bfc8      	it	gt
 80103d4:	461d      	movgt	r5, r3
 80103d6:	9b01      	ldr	r3, [sp, #4]
 80103d8:	bfd8      	it	le
 80103da:	2501      	movle	r5, #1
 80103dc:	441d      	add	r5, r3
 80103de:	f04f 0800 	mov.w	r8, #0
 80103e2:	ee18 1a10 	vmov	r1, s16
 80103e6:	2201      	movs	r2, #1
 80103e8:	4620      	mov	r0, r4
 80103ea:	f000 fe21 	bl	8011030 <__lshift>
 80103ee:	4631      	mov	r1, r6
 80103f0:	ee08 0a10 	vmov	s16, r0
 80103f4:	f000 fe8c 	bl	8011110 <__mcmp>
 80103f8:	2800      	cmp	r0, #0
 80103fa:	dc91      	bgt.n	8010320 <_dtoa_r+0xaa8>
 80103fc:	d102      	bne.n	8010404 <_dtoa_r+0xb8c>
 80103fe:	f01a 0f01 	tst.w	sl, #1
 8010402:	d18d      	bne.n	8010320 <_dtoa_r+0xaa8>
 8010404:	462b      	mov	r3, r5
 8010406:	461d      	mov	r5, r3
 8010408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801040c:	2a30      	cmp	r2, #48	; 0x30
 801040e:	d0fa      	beq.n	8010406 <_dtoa_r+0xb8e>
 8010410:	e6d7      	b.n	80101c2 <_dtoa_r+0x94a>
 8010412:	9a01      	ldr	r2, [sp, #4]
 8010414:	429a      	cmp	r2, r3
 8010416:	d184      	bne.n	8010322 <_dtoa_r+0xaaa>
 8010418:	9b00      	ldr	r3, [sp, #0]
 801041a:	3301      	adds	r3, #1
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	2331      	movs	r3, #49	; 0x31
 8010420:	7013      	strb	r3, [r2, #0]
 8010422:	e6ce      	b.n	80101c2 <_dtoa_r+0x94a>
 8010424:	4b09      	ldr	r3, [pc, #36]	; (801044c <_dtoa_r+0xbd4>)
 8010426:	f7ff ba95 	b.w	800f954 <_dtoa_r+0xdc>
 801042a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801042c:	2b00      	cmp	r3, #0
 801042e:	f47f aa6e 	bne.w	800f90e <_dtoa_r+0x96>
 8010432:	4b07      	ldr	r3, [pc, #28]	; (8010450 <_dtoa_r+0xbd8>)
 8010434:	f7ff ba8e 	b.w	800f954 <_dtoa_r+0xdc>
 8010438:	9b02      	ldr	r3, [sp, #8]
 801043a:	2b00      	cmp	r3, #0
 801043c:	dcae      	bgt.n	801039c <_dtoa_r+0xb24>
 801043e:	9b06      	ldr	r3, [sp, #24]
 8010440:	2b02      	cmp	r3, #2
 8010442:	f73f aea8 	bgt.w	8010196 <_dtoa_r+0x91e>
 8010446:	e7a9      	b.n	801039c <_dtoa_r+0xb24>
 8010448:	080159bf 	.word	0x080159bf
 801044c:	080158cc 	.word	0x080158cc
 8010450:	08015940 	.word	0x08015940

08010454 <rshift>:
 8010454:	6903      	ldr	r3, [r0, #16]
 8010456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801045a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801045e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010462:	f100 0414 	add.w	r4, r0, #20
 8010466:	dd45      	ble.n	80104f4 <rshift+0xa0>
 8010468:	f011 011f 	ands.w	r1, r1, #31
 801046c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010474:	d10c      	bne.n	8010490 <rshift+0x3c>
 8010476:	f100 0710 	add.w	r7, r0, #16
 801047a:	4629      	mov	r1, r5
 801047c:	42b1      	cmp	r1, r6
 801047e:	d334      	bcc.n	80104ea <rshift+0x96>
 8010480:	1a9b      	subs	r3, r3, r2
 8010482:	009b      	lsls	r3, r3, #2
 8010484:	1eea      	subs	r2, r5, #3
 8010486:	4296      	cmp	r6, r2
 8010488:	bf38      	it	cc
 801048a:	2300      	movcc	r3, #0
 801048c:	4423      	add	r3, r4
 801048e:	e015      	b.n	80104bc <rshift+0x68>
 8010490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010494:	f1c1 0820 	rsb	r8, r1, #32
 8010498:	40cf      	lsrs	r7, r1
 801049a:	f105 0e04 	add.w	lr, r5, #4
 801049e:	46a1      	mov	r9, r4
 80104a0:	4576      	cmp	r6, lr
 80104a2:	46f4      	mov	ip, lr
 80104a4:	d815      	bhi.n	80104d2 <rshift+0x7e>
 80104a6:	1a9a      	subs	r2, r3, r2
 80104a8:	0092      	lsls	r2, r2, #2
 80104aa:	3a04      	subs	r2, #4
 80104ac:	3501      	adds	r5, #1
 80104ae:	42ae      	cmp	r6, r5
 80104b0:	bf38      	it	cc
 80104b2:	2200      	movcc	r2, #0
 80104b4:	18a3      	adds	r3, r4, r2
 80104b6:	50a7      	str	r7, [r4, r2]
 80104b8:	b107      	cbz	r7, 80104bc <rshift+0x68>
 80104ba:	3304      	adds	r3, #4
 80104bc:	1b1a      	subs	r2, r3, r4
 80104be:	42a3      	cmp	r3, r4
 80104c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80104c4:	bf08      	it	eq
 80104c6:	2300      	moveq	r3, #0
 80104c8:	6102      	str	r2, [r0, #16]
 80104ca:	bf08      	it	eq
 80104cc:	6143      	streq	r3, [r0, #20]
 80104ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104d2:	f8dc c000 	ldr.w	ip, [ip]
 80104d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80104da:	ea4c 0707 	orr.w	r7, ip, r7
 80104de:	f849 7b04 	str.w	r7, [r9], #4
 80104e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80104e6:	40cf      	lsrs	r7, r1
 80104e8:	e7da      	b.n	80104a0 <rshift+0x4c>
 80104ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80104ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80104f2:	e7c3      	b.n	801047c <rshift+0x28>
 80104f4:	4623      	mov	r3, r4
 80104f6:	e7e1      	b.n	80104bc <rshift+0x68>

080104f8 <__hexdig_fun>:
 80104f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80104fc:	2b09      	cmp	r3, #9
 80104fe:	d802      	bhi.n	8010506 <__hexdig_fun+0xe>
 8010500:	3820      	subs	r0, #32
 8010502:	b2c0      	uxtb	r0, r0
 8010504:	4770      	bx	lr
 8010506:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801050a:	2b05      	cmp	r3, #5
 801050c:	d801      	bhi.n	8010512 <__hexdig_fun+0x1a>
 801050e:	3847      	subs	r0, #71	; 0x47
 8010510:	e7f7      	b.n	8010502 <__hexdig_fun+0xa>
 8010512:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010516:	2b05      	cmp	r3, #5
 8010518:	d801      	bhi.n	801051e <__hexdig_fun+0x26>
 801051a:	3827      	subs	r0, #39	; 0x27
 801051c:	e7f1      	b.n	8010502 <__hexdig_fun+0xa>
 801051e:	2000      	movs	r0, #0
 8010520:	4770      	bx	lr
	...

08010524 <__gethex>:
 8010524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010528:	ed2d 8b02 	vpush	{d8}
 801052c:	b089      	sub	sp, #36	; 0x24
 801052e:	ee08 0a10 	vmov	s16, r0
 8010532:	9304      	str	r3, [sp, #16]
 8010534:	4bb4      	ldr	r3, [pc, #720]	; (8010808 <__gethex+0x2e4>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	9301      	str	r3, [sp, #4]
 801053a:	4618      	mov	r0, r3
 801053c:	468b      	mov	fp, r1
 801053e:	4690      	mov	r8, r2
 8010540:	f7ef fe4e 	bl	80001e0 <strlen>
 8010544:	9b01      	ldr	r3, [sp, #4]
 8010546:	f8db 2000 	ldr.w	r2, [fp]
 801054a:	4403      	add	r3, r0
 801054c:	4682      	mov	sl, r0
 801054e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010552:	9305      	str	r3, [sp, #20]
 8010554:	1c93      	adds	r3, r2, #2
 8010556:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801055a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801055e:	32fe      	adds	r2, #254	; 0xfe
 8010560:	18d1      	adds	r1, r2, r3
 8010562:	461f      	mov	r7, r3
 8010564:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010568:	9100      	str	r1, [sp, #0]
 801056a:	2830      	cmp	r0, #48	; 0x30
 801056c:	d0f8      	beq.n	8010560 <__gethex+0x3c>
 801056e:	f7ff ffc3 	bl	80104f8 <__hexdig_fun>
 8010572:	4604      	mov	r4, r0
 8010574:	2800      	cmp	r0, #0
 8010576:	d13a      	bne.n	80105ee <__gethex+0xca>
 8010578:	9901      	ldr	r1, [sp, #4]
 801057a:	4652      	mov	r2, sl
 801057c:	4638      	mov	r0, r7
 801057e:	f7fe faab 	bl	800ead8 <strncmp>
 8010582:	4605      	mov	r5, r0
 8010584:	2800      	cmp	r0, #0
 8010586:	d168      	bne.n	801065a <__gethex+0x136>
 8010588:	f817 000a 	ldrb.w	r0, [r7, sl]
 801058c:	eb07 060a 	add.w	r6, r7, sl
 8010590:	f7ff ffb2 	bl	80104f8 <__hexdig_fun>
 8010594:	2800      	cmp	r0, #0
 8010596:	d062      	beq.n	801065e <__gethex+0x13a>
 8010598:	4633      	mov	r3, r6
 801059a:	7818      	ldrb	r0, [r3, #0]
 801059c:	2830      	cmp	r0, #48	; 0x30
 801059e:	461f      	mov	r7, r3
 80105a0:	f103 0301 	add.w	r3, r3, #1
 80105a4:	d0f9      	beq.n	801059a <__gethex+0x76>
 80105a6:	f7ff ffa7 	bl	80104f8 <__hexdig_fun>
 80105aa:	2301      	movs	r3, #1
 80105ac:	fab0 f480 	clz	r4, r0
 80105b0:	0964      	lsrs	r4, r4, #5
 80105b2:	4635      	mov	r5, r6
 80105b4:	9300      	str	r3, [sp, #0]
 80105b6:	463a      	mov	r2, r7
 80105b8:	4616      	mov	r6, r2
 80105ba:	3201      	adds	r2, #1
 80105bc:	7830      	ldrb	r0, [r6, #0]
 80105be:	f7ff ff9b 	bl	80104f8 <__hexdig_fun>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	d1f8      	bne.n	80105b8 <__gethex+0x94>
 80105c6:	9901      	ldr	r1, [sp, #4]
 80105c8:	4652      	mov	r2, sl
 80105ca:	4630      	mov	r0, r6
 80105cc:	f7fe fa84 	bl	800ead8 <strncmp>
 80105d0:	b980      	cbnz	r0, 80105f4 <__gethex+0xd0>
 80105d2:	b94d      	cbnz	r5, 80105e8 <__gethex+0xc4>
 80105d4:	eb06 050a 	add.w	r5, r6, sl
 80105d8:	462a      	mov	r2, r5
 80105da:	4616      	mov	r6, r2
 80105dc:	3201      	adds	r2, #1
 80105de:	7830      	ldrb	r0, [r6, #0]
 80105e0:	f7ff ff8a 	bl	80104f8 <__hexdig_fun>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d1f8      	bne.n	80105da <__gethex+0xb6>
 80105e8:	1bad      	subs	r5, r5, r6
 80105ea:	00ad      	lsls	r5, r5, #2
 80105ec:	e004      	b.n	80105f8 <__gethex+0xd4>
 80105ee:	2400      	movs	r4, #0
 80105f0:	4625      	mov	r5, r4
 80105f2:	e7e0      	b.n	80105b6 <__gethex+0x92>
 80105f4:	2d00      	cmp	r5, #0
 80105f6:	d1f7      	bne.n	80105e8 <__gethex+0xc4>
 80105f8:	7833      	ldrb	r3, [r6, #0]
 80105fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80105fe:	2b50      	cmp	r3, #80	; 0x50
 8010600:	d13b      	bne.n	801067a <__gethex+0x156>
 8010602:	7873      	ldrb	r3, [r6, #1]
 8010604:	2b2b      	cmp	r3, #43	; 0x2b
 8010606:	d02c      	beq.n	8010662 <__gethex+0x13e>
 8010608:	2b2d      	cmp	r3, #45	; 0x2d
 801060a:	d02e      	beq.n	801066a <__gethex+0x146>
 801060c:	1c71      	adds	r1, r6, #1
 801060e:	f04f 0900 	mov.w	r9, #0
 8010612:	7808      	ldrb	r0, [r1, #0]
 8010614:	f7ff ff70 	bl	80104f8 <__hexdig_fun>
 8010618:	1e43      	subs	r3, r0, #1
 801061a:	b2db      	uxtb	r3, r3
 801061c:	2b18      	cmp	r3, #24
 801061e:	d82c      	bhi.n	801067a <__gethex+0x156>
 8010620:	f1a0 0210 	sub.w	r2, r0, #16
 8010624:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010628:	f7ff ff66 	bl	80104f8 <__hexdig_fun>
 801062c:	1e43      	subs	r3, r0, #1
 801062e:	b2db      	uxtb	r3, r3
 8010630:	2b18      	cmp	r3, #24
 8010632:	d91d      	bls.n	8010670 <__gethex+0x14c>
 8010634:	f1b9 0f00 	cmp.w	r9, #0
 8010638:	d000      	beq.n	801063c <__gethex+0x118>
 801063a:	4252      	negs	r2, r2
 801063c:	4415      	add	r5, r2
 801063e:	f8cb 1000 	str.w	r1, [fp]
 8010642:	b1e4      	cbz	r4, 801067e <__gethex+0x15a>
 8010644:	9b00      	ldr	r3, [sp, #0]
 8010646:	2b00      	cmp	r3, #0
 8010648:	bf14      	ite	ne
 801064a:	2700      	movne	r7, #0
 801064c:	2706      	moveq	r7, #6
 801064e:	4638      	mov	r0, r7
 8010650:	b009      	add	sp, #36	; 0x24
 8010652:	ecbd 8b02 	vpop	{d8}
 8010656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801065a:	463e      	mov	r6, r7
 801065c:	4625      	mov	r5, r4
 801065e:	2401      	movs	r4, #1
 8010660:	e7ca      	b.n	80105f8 <__gethex+0xd4>
 8010662:	f04f 0900 	mov.w	r9, #0
 8010666:	1cb1      	adds	r1, r6, #2
 8010668:	e7d3      	b.n	8010612 <__gethex+0xee>
 801066a:	f04f 0901 	mov.w	r9, #1
 801066e:	e7fa      	b.n	8010666 <__gethex+0x142>
 8010670:	230a      	movs	r3, #10
 8010672:	fb03 0202 	mla	r2, r3, r2, r0
 8010676:	3a10      	subs	r2, #16
 8010678:	e7d4      	b.n	8010624 <__gethex+0x100>
 801067a:	4631      	mov	r1, r6
 801067c:	e7df      	b.n	801063e <__gethex+0x11a>
 801067e:	1bf3      	subs	r3, r6, r7
 8010680:	3b01      	subs	r3, #1
 8010682:	4621      	mov	r1, r4
 8010684:	2b07      	cmp	r3, #7
 8010686:	dc0b      	bgt.n	80106a0 <__gethex+0x17c>
 8010688:	ee18 0a10 	vmov	r0, s16
 801068c:	f000 fa74 	bl	8010b78 <_Balloc>
 8010690:	4604      	mov	r4, r0
 8010692:	b940      	cbnz	r0, 80106a6 <__gethex+0x182>
 8010694:	4b5d      	ldr	r3, [pc, #372]	; (801080c <__gethex+0x2e8>)
 8010696:	4602      	mov	r2, r0
 8010698:	21de      	movs	r1, #222	; 0xde
 801069a:	485d      	ldr	r0, [pc, #372]	; (8010810 <__gethex+0x2ec>)
 801069c:	f001 f8b6 	bl	801180c <__assert_func>
 80106a0:	3101      	adds	r1, #1
 80106a2:	105b      	asrs	r3, r3, #1
 80106a4:	e7ee      	b.n	8010684 <__gethex+0x160>
 80106a6:	f100 0914 	add.w	r9, r0, #20
 80106aa:	f04f 0b00 	mov.w	fp, #0
 80106ae:	f1ca 0301 	rsb	r3, sl, #1
 80106b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80106b6:	f8cd b000 	str.w	fp, [sp]
 80106ba:	9306      	str	r3, [sp, #24]
 80106bc:	42b7      	cmp	r7, r6
 80106be:	d340      	bcc.n	8010742 <__gethex+0x21e>
 80106c0:	9802      	ldr	r0, [sp, #8]
 80106c2:	9b00      	ldr	r3, [sp, #0]
 80106c4:	f840 3b04 	str.w	r3, [r0], #4
 80106c8:	eba0 0009 	sub.w	r0, r0, r9
 80106cc:	1080      	asrs	r0, r0, #2
 80106ce:	0146      	lsls	r6, r0, #5
 80106d0:	6120      	str	r0, [r4, #16]
 80106d2:	4618      	mov	r0, r3
 80106d4:	f000 fb42 	bl	8010d5c <__hi0bits>
 80106d8:	1a30      	subs	r0, r6, r0
 80106da:	f8d8 6000 	ldr.w	r6, [r8]
 80106de:	42b0      	cmp	r0, r6
 80106e0:	dd63      	ble.n	80107aa <__gethex+0x286>
 80106e2:	1b87      	subs	r7, r0, r6
 80106e4:	4639      	mov	r1, r7
 80106e6:	4620      	mov	r0, r4
 80106e8:	f000 fee6 	bl	80114b8 <__any_on>
 80106ec:	4682      	mov	sl, r0
 80106ee:	b1a8      	cbz	r0, 801071c <__gethex+0x1f8>
 80106f0:	1e7b      	subs	r3, r7, #1
 80106f2:	1159      	asrs	r1, r3, #5
 80106f4:	f003 021f 	and.w	r2, r3, #31
 80106f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80106fc:	f04f 0a01 	mov.w	sl, #1
 8010700:	fa0a f202 	lsl.w	r2, sl, r2
 8010704:	420a      	tst	r2, r1
 8010706:	d009      	beq.n	801071c <__gethex+0x1f8>
 8010708:	4553      	cmp	r3, sl
 801070a:	dd05      	ble.n	8010718 <__gethex+0x1f4>
 801070c:	1eb9      	subs	r1, r7, #2
 801070e:	4620      	mov	r0, r4
 8010710:	f000 fed2 	bl	80114b8 <__any_on>
 8010714:	2800      	cmp	r0, #0
 8010716:	d145      	bne.n	80107a4 <__gethex+0x280>
 8010718:	f04f 0a02 	mov.w	sl, #2
 801071c:	4639      	mov	r1, r7
 801071e:	4620      	mov	r0, r4
 8010720:	f7ff fe98 	bl	8010454 <rshift>
 8010724:	443d      	add	r5, r7
 8010726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801072a:	42ab      	cmp	r3, r5
 801072c:	da4c      	bge.n	80107c8 <__gethex+0x2a4>
 801072e:	ee18 0a10 	vmov	r0, s16
 8010732:	4621      	mov	r1, r4
 8010734:	f000 fa60 	bl	8010bf8 <_Bfree>
 8010738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801073a:	2300      	movs	r3, #0
 801073c:	6013      	str	r3, [r2, #0]
 801073e:	27a3      	movs	r7, #163	; 0xa3
 8010740:	e785      	b.n	801064e <__gethex+0x12a>
 8010742:	1e73      	subs	r3, r6, #1
 8010744:	9a05      	ldr	r2, [sp, #20]
 8010746:	9303      	str	r3, [sp, #12]
 8010748:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801074c:	4293      	cmp	r3, r2
 801074e:	d019      	beq.n	8010784 <__gethex+0x260>
 8010750:	f1bb 0f20 	cmp.w	fp, #32
 8010754:	d107      	bne.n	8010766 <__gethex+0x242>
 8010756:	9b02      	ldr	r3, [sp, #8]
 8010758:	9a00      	ldr	r2, [sp, #0]
 801075a:	f843 2b04 	str.w	r2, [r3], #4
 801075e:	9302      	str	r3, [sp, #8]
 8010760:	2300      	movs	r3, #0
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	469b      	mov	fp, r3
 8010766:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801076a:	f7ff fec5 	bl	80104f8 <__hexdig_fun>
 801076e:	9b00      	ldr	r3, [sp, #0]
 8010770:	f000 000f 	and.w	r0, r0, #15
 8010774:	fa00 f00b 	lsl.w	r0, r0, fp
 8010778:	4303      	orrs	r3, r0
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	f10b 0b04 	add.w	fp, fp, #4
 8010780:	9b03      	ldr	r3, [sp, #12]
 8010782:	e00d      	b.n	80107a0 <__gethex+0x27c>
 8010784:	9b03      	ldr	r3, [sp, #12]
 8010786:	9a06      	ldr	r2, [sp, #24]
 8010788:	4413      	add	r3, r2
 801078a:	42bb      	cmp	r3, r7
 801078c:	d3e0      	bcc.n	8010750 <__gethex+0x22c>
 801078e:	4618      	mov	r0, r3
 8010790:	9901      	ldr	r1, [sp, #4]
 8010792:	9307      	str	r3, [sp, #28]
 8010794:	4652      	mov	r2, sl
 8010796:	f7fe f99f 	bl	800ead8 <strncmp>
 801079a:	9b07      	ldr	r3, [sp, #28]
 801079c:	2800      	cmp	r0, #0
 801079e:	d1d7      	bne.n	8010750 <__gethex+0x22c>
 80107a0:	461e      	mov	r6, r3
 80107a2:	e78b      	b.n	80106bc <__gethex+0x198>
 80107a4:	f04f 0a03 	mov.w	sl, #3
 80107a8:	e7b8      	b.n	801071c <__gethex+0x1f8>
 80107aa:	da0a      	bge.n	80107c2 <__gethex+0x29e>
 80107ac:	1a37      	subs	r7, r6, r0
 80107ae:	4621      	mov	r1, r4
 80107b0:	ee18 0a10 	vmov	r0, s16
 80107b4:	463a      	mov	r2, r7
 80107b6:	f000 fc3b 	bl	8011030 <__lshift>
 80107ba:	1bed      	subs	r5, r5, r7
 80107bc:	4604      	mov	r4, r0
 80107be:	f100 0914 	add.w	r9, r0, #20
 80107c2:	f04f 0a00 	mov.w	sl, #0
 80107c6:	e7ae      	b.n	8010726 <__gethex+0x202>
 80107c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80107cc:	42a8      	cmp	r0, r5
 80107ce:	dd72      	ble.n	80108b6 <__gethex+0x392>
 80107d0:	1b45      	subs	r5, r0, r5
 80107d2:	42ae      	cmp	r6, r5
 80107d4:	dc36      	bgt.n	8010844 <__gethex+0x320>
 80107d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d02a      	beq.n	8010834 <__gethex+0x310>
 80107de:	2b03      	cmp	r3, #3
 80107e0:	d02c      	beq.n	801083c <__gethex+0x318>
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d11c      	bne.n	8010820 <__gethex+0x2fc>
 80107e6:	42ae      	cmp	r6, r5
 80107e8:	d11a      	bne.n	8010820 <__gethex+0x2fc>
 80107ea:	2e01      	cmp	r6, #1
 80107ec:	d112      	bne.n	8010814 <__gethex+0x2f0>
 80107ee:	9a04      	ldr	r2, [sp, #16]
 80107f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80107f4:	6013      	str	r3, [r2, #0]
 80107f6:	2301      	movs	r3, #1
 80107f8:	6123      	str	r3, [r4, #16]
 80107fa:	f8c9 3000 	str.w	r3, [r9]
 80107fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010800:	2762      	movs	r7, #98	; 0x62
 8010802:	601c      	str	r4, [r3, #0]
 8010804:	e723      	b.n	801064e <__gethex+0x12a>
 8010806:	bf00      	nop
 8010808:	08015a38 	.word	0x08015a38
 801080c:	080159bf 	.word	0x080159bf
 8010810:	080159d0 	.word	0x080159d0
 8010814:	1e71      	subs	r1, r6, #1
 8010816:	4620      	mov	r0, r4
 8010818:	f000 fe4e 	bl	80114b8 <__any_on>
 801081c:	2800      	cmp	r0, #0
 801081e:	d1e6      	bne.n	80107ee <__gethex+0x2ca>
 8010820:	ee18 0a10 	vmov	r0, s16
 8010824:	4621      	mov	r1, r4
 8010826:	f000 f9e7 	bl	8010bf8 <_Bfree>
 801082a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801082c:	2300      	movs	r3, #0
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	2750      	movs	r7, #80	; 0x50
 8010832:	e70c      	b.n	801064e <__gethex+0x12a>
 8010834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010836:	2b00      	cmp	r3, #0
 8010838:	d1f2      	bne.n	8010820 <__gethex+0x2fc>
 801083a:	e7d8      	b.n	80107ee <__gethex+0x2ca>
 801083c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1d5      	bne.n	80107ee <__gethex+0x2ca>
 8010842:	e7ed      	b.n	8010820 <__gethex+0x2fc>
 8010844:	1e6f      	subs	r7, r5, #1
 8010846:	f1ba 0f00 	cmp.w	sl, #0
 801084a:	d131      	bne.n	80108b0 <__gethex+0x38c>
 801084c:	b127      	cbz	r7, 8010858 <__gethex+0x334>
 801084e:	4639      	mov	r1, r7
 8010850:	4620      	mov	r0, r4
 8010852:	f000 fe31 	bl	80114b8 <__any_on>
 8010856:	4682      	mov	sl, r0
 8010858:	117b      	asrs	r3, r7, #5
 801085a:	2101      	movs	r1, #1
 801085c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010860:	f007 071f 	and.w	r7, r7, #31
 8010864:	fa01 f707 	lsl.w	r7, r1, r7
 8010868:	421f      	tst	r7, r3
 801086a:	4629      	mov	r1, r5
 801086c:	4620      	mov	r0, r4
 801086e:	bf18      	it	ne
 8010870:	f04a 0a02 	orrne.w	sl, sl, #2
 8010874:	1b76      	subs	r6, r6, r5
 8010876:	f7ff fded 	bl	8010454 <rshift>
 801087a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801087e:	2702      	movs	r7, #2
 8010880:	f1ba 0f00 	cmp.w	sl, #0
 8010884:	d048      	beq.n	8010918 <__gethex+0x3f4>
 8010886:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801088a:	2b02      	cmp	r3, #2
 801088c:	d015      	beq.n	80108ba <__gethex+0x396>
 801088e:	2b03      	cmp	r3, #3
 8010890:	d017      	beq.n	80108c2 <__gethex+0x39e>
 8010892:	2b01      	cmp	r3, #1
 8010894:	d109      	bne.n	80108aa <__gethex+0x386>
 8010896:	f01a 0f02 	tst.w	sl, #2
 801089a:	d006      	beq.n	80108aa <__gethex+0x386>
 801089c:	f8d9 0000 	ldr.w	r0, [r9]
 80108a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80108a4:	f01a 0f01 	tst.w	sl, #1
 80108a8:	d10e      	bne.n	80108c8 <__gethex+0x3a4>
 80108aa:	f047 0710 	orr.w	r7, r7, #16
 80108ae:	e033      	b.n	8010918 <__gethex+0x3f4>
 80108b0:	f04f 0a01 	mov.w	sl, #1
 80108b4:	e7d0      	b.n	8010858 <__gethex+0x334>
 80108b6:	2701      	movs	r7, #1
 80108b8:	e7e2      	b.n	8010880 <__gethex+0x35c>
 80108ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108bc:	f1c3 0301 	rsb	r3, r3, #1
 80108c0:	9315      	str	r3, [sp, #84]	; 0x54
 80108c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d0f0      	beq.n	80108aa <__gethex+0x386>
 80108c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80108cc:	f104 0314 	add.w	r3, r4, #20
 80108d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80108d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80108d8:	f04f 0c00 	mov.w	ip, #0
 80108dc:	4618      	mov	r0, r3
 80108de:	f853 2b04 	ldr.w	r2, [r3], #4
 80108e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80108e6:	d01c      	beq.n	8010922 <__gethex+0x3fe>
 80108e8:	3201      	adds	r2, #1
 80108ea:	6002      	str	r2, [r0, #0]
 80108ec:	2f02      	cmp	r7, #2
 80108ee:	f104 0314 	add.w	r3, r4, #20
 80108f2:	d13f      	bne.n	8010974 <__gethex+0x450>
 80108f4:	f8d8 2000 	ldr.w	r2, [r8]
 80108f8:	3a01      	subs	r2, #1
 80108fa:	42b2      	cmp	r2, r6
 80108fc:	d10a      	bne.n	8010914 <__gethex+0x3f0>
 80108fe:	1171      	asrs	r1, r6, #5
 8010900:	2201      	movs	r2, #1
 8010902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010906:	f006 061f 	and.w	r6, r6, #31
 801090a:	fa02 f606 	lsl.w	r6, r2, r6
 801090e:	421e      	tst	r6, r3
 8010910:	bf18      	it	ne
 8010912:	4617      	movne	r7, r2
 8010914:	f047 0720 	orr.w	r7, r7, #32
 8010918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801091a:	601c      	str	r4, [r3, #0]
 801091c:	9b04      	ldr	r3, [sp, #16]
 801091e:	601d      	str	r5, [r3, #0]
 8010920:	e695      	b.n	801064e <__gethex+0x12a>
 8010922:	4299      	cmp	r1, r3
 8010924:	f843 cc04 	str.w	ip, [r3, #-4]
 8010928:	d8d8      	bhi.n	80108dc <__gethex+0x3b8>
 801092a:	68a3      	ldr	r3, [r4, #8]
 801092c:	459b      	cmp	fp, r3
 801092e:	db19      	blt.n	8010964 <__gethex+0x440>
 8010930:	6861      	ldr	r1, [r4, #4]
 8010932:	ee18 0a10 	vmov	r0, s16
 8010936:	3101      	adds	r1, #1
 8010938:	f000 f91e 	bl	8010b78 <_Balloc>
 801093c:	4681      	mov	r9, r0
 801093e:	b918      	cbnz	r0, 8010948 <__gethex+0x424>
 8010940:	4b1a      	ldr	r3, [pc, #104]	; (80109ac <__gethex+0x488>)
 8010942:	4602      	mov	r2, r0
 8010944:	2184      	movs	r1, #132	; 0x84
 8010946:	e6a8      	b.n	801069a <__gethex+0x176>
 8010948:	6922      	ldr	r2, [r4, #16]
 801094a:	3202      	adds	r2, #2
 801094c:	f104 010c 	add.w	r1, r4, #12
 8010950:	0092      	lsls	r2, r2, #2
 8010952:	300c      	adds	r0, #12
 8010954:	f7fd fb30 	bl	800dfb8 <memcpy>
 8010958:	4621      	mov	r1, r4
 801095a:	ee18 0a10 	vmov	r0, s16
 801095e:	f000 f94b 	bl	8010bf8 <_Bfree>
 8010962:	464c      	mov	r4, r9
 8010964:	6923      	ldr	r3, [r4, #16]
 8010966:	1c5a      	adds	r2, r3, #1
 8010968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801096c:	6122      	str	r2, [r4, #16]
 801096e:	2201      	movs	r2, #1
 8010970:	615a      	str	r2, [r3, #20]
 8010972:	e7bb      	b.n	80108ec <__gethex+0x3c8>
 8010974:	6922      	ldr	r2, [r4, #16]
 8010976:	455a      	cmp	r2, fp
 8010978:	dd0b      	ble.n	8010992 <__gethex+0x46e>
 801097a:	2101      	movs	r1, #1
 801097c:	4620      	mov	r0, r4
 801097e:	f7ff fd69 	bl	8010454 <rshift>
 8010982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010986:	3501      	adds	r5, #1
 8010988:	42ab      	cmp	r3, r5
 801098a:	f6ff aed0 	blt.w	801072e <__gethex+0x20a>
 801098e:	2701      	movs	r7, #1
 8010990:	e7c0      	b.n	8010914 <__gethex+0x3f0>
 8010992:	f016 061f 	ands.w	r6, r6, #31
 8010996:	d0fa      	beq.n	801098e <__gethex+0x46a>
 8010998:	4453      	add	r3, sl
 801099a:	f1c6 0620 	rsb	r6, r6, #32
 801099e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80109a2:	f000 f9db 	bl	8010d5c <__hi0bits>
 80109a6:	42b0      	cmp	r0, r6
 80109a8:	dbe7      	blt.n	801097a <__gethex+0x456>
 80109aa:	e7f0      	b.n	801098e <__gethex+0x46a>
 80109ac:	080159bf 	.word	0x080159bf

080109b0 <L_shift>:
 80109b0:	f1c2 0208 	rsb	r2, r2, #8
 80109b4:	0092      	lsls	r2, r2, #2
 80109b6:	b570      	push	{r4, r5, r6, lr}
 80109b8:	f1c2 0620 	rsb	r6, r2, #32
 80109bc:	6843      	ldr	r3, [r0, #4]
 80109be:	6804      	ldr	r4, [r0, #0]
 80109c0:	fa03 f506 	lsl.w	r5, r3, r6
 80109c4:	432c      	orrs	r4, r5
 80109c6:	40d3      	lsrs	r3, r2
 80109c8:	6004      	str	r4, [r0, #0]
 80109ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80109ce:	4288      	cmp	r0, r1
 80109d0:	d3f4      	bcc.n	80109bc <L_shift+0xc>
 80109d2:	bd70      	pop	{r4, r5, r6, pc}

080109d4 <__match>:
 80109d4:	b530      	push	{r4, r5, lr}
 80109d6:	6803      	ldr	r3, [r0, #0]
 80109d8:	3301      	adds	r3, #1
 80109da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109de:	b914      	cbnz	r4, 80109e6 <__match+0x12>
 80109e0:	6003      	str	r3, [r0, #0]
 80109e2:	2001      	movs	r0, #1
 80109e4:	bd30      	pop	{r4, r5, pc}
 80109e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80109ee:	2d19      	cmp	r5, #25
 80109f0:	bf98      	it	ls
 80109f2:	3220      	addls	r2, #32
 80109f4:	42a2      	cmp	r2, r4
 80109f6:	d0f0      	beq.n	80109da <__match+0x6>
 80109f8:	2000      	movs	r0, #0
 80109fa:	e7f3      	b.n	80109e4 <__match+0x10>

080109fc <__hexnan>:
 80109fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a00:	680b      	ldr	r3, [r1, #0]
 8010a02:	115e      	asrs	r6, r3, #5
 8010a04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010a08:	f013 031f 	ands.w	r3, r3, #31
 8010a0c:	b087      	sub	sp, #28
 8010a0e:	bf18      	it	ne
 8010a10:	3604      	addne	r6, #4
 8010a12:	2500      	movs	r5, #0
 8010a14:	1f37      	subs	r7, r6, #4
 8010a16:	4690      	mov	r8, r2
 8010a18:	6802      	ldr	r2, [r0, #0]
 8010a1a:	9301      	str	r3, [sp, #4]
 8010a1c:	4682      	mov	sl, r0
 8010a1e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010a22:	46b9      	mov	r9, r7
 8010a24:	463c      	mov	r4, r7
 8010a26:	9502      	str	r5, [sp, #8]
 8010a28:	46ab      	mov	fp, r5
 8010a2a:	7851      	ldrb	r1, [r2, #1]
 8010a2c:	1c53      	adds	r3, r2, #1
 8010a2e:	9303      	str	r3, [sp, #12]
 8010a30:	b341      	cbz	r1, 8010a84 <__hexnan+0x88>
 8010a32:	4608      	mov	r0, r1
 8010a34:	9205      	str	r2, [sp, #20]
 8010a36:	9104      	str	r1, [sp, #16]
 8010a38:	f7ff fd5e 	bl	80104f8 <__hexdig_fun>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d14f      	bne.n	8010ae0 <__hexnan+0xe4>
 8010a40:	9904      	ldr	r1, [sp, #16]
 8010a42:	9a05      	ldr	r2, [sp, #20]
 8010a44:	2920      	cmp	r1, #32
 8010a46:	d818      	bhi.n	8010a7a <__hexnan+0x7e>
 8010a48:	9b02      	ldr	r3, [sp, #8]
 8010a4a:	459b      	cmp	fp, r3
 8010a4c:	dd13      	ble.n	8010a76 <__hexnan+0x7a>
 8010a4e:	454c      	cmp	r4, r9
 8010a50:	d206      	bcs.n	8010a60 <__hexnan+0x64>
 8010a52:	2d07      	cmp	r5, #7
 8010a54:	dc04      	bgt.n	8010a60 <__hexnan+0x64>
 8010a56:	462a      	mov	r2, r5
 8010a58:	4649      	mov	r1, r9
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f7ff ffa8 	bl	80109b0 <L_shift>
 8010a60:	4544      	cmp	r4, r8
 8010a62:	d950      	bls.n	8010b06 <__hexnan+0x10a>
 8010a64:	2300      	movs	r3, #0
 8010a66:	f1a4 0904 	sub.w	r9, r4, #4
 8010a6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a6e:	f8cd b008 	str.w	fp, [sp, #8]
 8010a72:	464c      	mov	r4, r9
 8010a74:	461d      	mov	r5, r3
 8010a76:	9a03      	ldr	r2, [sp, #12]
 8010a78:	e7d7      	b.n	8010a2a <__hexnan+0x2e>
 8010a7a:	2929      	cmp	r1, #41	; 0x29
 8010a7c:	d156      	bne.n	8010b2c <__hexnan+0x130>
 8010a7e:	3202      	adds	r2, #2
 8010a80:	f8ca 2000 	str.w	r2, [sl]
 8010a84:	f1bb 0f00 	cmp.w	fp, #0
 8010a88:	d050      	beq.n	8010b2c <__hexnan+0x130>
 8010a8a:	454c      	cmp	r4, r9
 8010a8c:	d206      	bcs.n	8010a9c <__hexnan+0xa0>
 8010a8e:	2d07      	cmp	r5, #7
 8010a90:	dc04      	bgt.n	8010a9c <__hexnan+0xa0>
 8010a92:	462a      	mov	r2, r5
 8010a94:	4649      	mov	r1, r9
 8010a96:	4620      	mov	r0, r4
 8010a98:	f7ff ff8a 	bl	80109b0 <L_shift>
 8010a9c:	4544      	cmp	r4, r8
 8010a9e:	d934      	bls.n	8010b0a <__hexnan+0x10e>
 8010aa0:	f1a8 0204 	sub.w	r2, r8, #4
 8010aa4:	4623      	mov	r3, r4
 8010aa6:	f853 1b04 	ldr.w	r1, [r3], #4
 8010aaa:	f842 1f04 	str.w	r1, [r2, #4]!
 8010aae:	429f      	cmp	r7, r3
 8010ab0:	d2f9      	bcs.n	8010aa6 <__hexnan+0xaa>
 8010ab2:	1b3b      	subs	r3, r7, r4
 8010ab4:	f023 0303 	bic.w	r3, r3, #3
 8010ab8:	3304      	adds	r3, #4
 8010aba:	3401      	adds	r4, #1
 8010abc:	3e03      	subs	r6, #3
 8010abe:	42b4      	cmp	r4, r6
 8010ac0:	bf88      	it	hi
 8010ac2:	2304      	movhi	r3, #4
 8010ac4:	4443      	add	r3, r8
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f843 2b04 	str.w	r2, [r3], #4
 8010acc:	429f      	cmp	r7, r3
 8010ace:	d2fb      	bcs.n	8010ac8 <__hexnan+0xcc>
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	b91b      	cbnz	r3, 8010adc <__hexnan+0xe0>
 8010ad4:	4547      	cmp	r7, r8
 8010ad6:	d127      	bne.n	8010b28 <__hexnan+0x12c>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	603b      	str	r3, [r7, #0]
 8010adc:	2005      	movs	r0, #5
 8010ade:	e026      	b.n	8010b2e <__hexnan+0x132>
 8010ae0:	3501      	adds	r5, #1
 8010ae2:	2d08      	cmp	r5, #8
 8010ae4:	f10b 0b01 	add.w	fp, fp, #1
 8010ae8:	dd06      	ble.n	8010af8 <__hexnan+0xfc>
 8010aea:	4544      	cmp	r4, r8
 8010aec:	d9c3      	bls.n	8010a76 <__hexnan+0x7a>
 8010aee:	2300      	movs	r3, #0
 8010af0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010af4:	2501      	movs	r5, #1
 8010af6:	3c04      	subs	r4, #4
 8010af8:	6822      	ldr	r2, [r4, #0]
 8010afa:	f000 000f 	and.w	r0, r0, #15
 8010afe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010b02:	6022      	str	r2, [r4, #0]
 8010b04:	e7b7      	b.n	8010a76 <__hexnan+0x7a>
 8010b06:	2508      	movs	r5, #8
 8010b08:	e7b5      	b.n	8010a76 <__hexnan+0x7a>
 8010b0a:	9b01      	ldr	r3, [sp, #4]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d0df      	beq.n	8010ad0 <__hexnan+0xd4>
 8010b10:	f04f 32ff 	mov.w	r2, #4294967295
 8010b14:	f1c3 0320 	rsb	r3, r3, #32
 8010b18:	fa22 f303 	lsr.w	r3, r2, r3
 8010b1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010b20:	401a      	ands	r2, r3
 8010b22:	f846 2c04 	str.w	r2, [r6, #-4]
 8010b26:	e7d3      	b.n	8010ad0 <__hexnan+0xd4>
 8010b28:	3f04      	subs	r7, #4
 8010b2a:	e7d1      	b.n	8010ad0 <__hexnan+0xd4>
 8010b2c:	2004      	movs	r0, #4
 8010b2e:	b007      	add	sp, #28
 8010b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b34 <_localeconv_r>:
 8010b34:	4800      	ldr	r0, [pc, #0]	; (8010b38 <_localeconv_r+0x4>)
 8010b36:	4770      	bx	lr
 8010b38:	2000018c 	.word	0x2000018c

08010b3c <__ascii_mbtowc>:
 8010b3c:	b082      	sub	sp, #8
 8010b3e:	b901      	cbnz	r1, 8010b42 <__ascii_mbtowc+0x6>
 8010b40:	a901      	add	r1, sp, #4
 8010b42:	b142      	cbz	r2, 8010b56 <__ascii_mbtowc+0x1a>
 8010b44:	b14b      	cbz	r3, 8010b5a <__ascii_mbtowc+0x1e>
 8010b46:	7813      	ldrb	r3, [r2, #0]
 8010b48:	600b      	str	r3, [r1, #0]
 8010b4a:	7812      	ldrb	r2, [r2, #0]
 8010b4c:	1e10      	subs	r0, r2, #0
 8010b4e:	bf18      	it	ne
 8010b50:	2001      	movne	r0, #1
 8010b52:	b002      	add	sp, #8
 8010b54:	4770      	bx	lr
 8010b56:	4610      	mov	r0, r2
 8010b58:	e7fb      	b.n	8010b52 <__ascii_mbtowc+0x16>
 8010b5a:	f06f 0001 	mvn.w	r0, #1
 8010b5e:	e7f8      	b.n	8010b52 <__ascii_mbtowc+0x16>

08010b60 <__malloc_lock>:
 8010b60:	4801      	ldr	r0, [pc, #4]	; (8010b68 <__malloc_lock+0x8>)
 8010b62:	f000 be84 	b.w	801186e <__retarget_lock_acquire_recursive>
 8010b66:	bf00      	nop
 8010b68:	200030fc 	.word	0x200030fc

08010b6c <__malloc_unlock>:
 8010b6c:	4801      	ldr	r0, [pc, #4]	; (8010b74 <__malloc_unlock+0x8>)
 8010b6e:	f000 be7f 	b.w	8011870 <__retarget_lock_release_recursive>
 8010b72:	bf00      	nop
 8010b74:	200030fc 	.word	0x200030fc

08010b78 <_Balloc>:
 8010b78:	b570      	push	{r4, r5, r6, lr}
 8010b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	460d      	mov	r5, r1
 8010b80:	b976      	cbnz	r6, 8010ba0 <_Balloc+0x28>
 8010b82:	2010      	movs	r0, #16
 8010b84:	f7fd fa08 	bl	800df98 <malloc>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	6260      	str	r0, [r4, #36]	; 0x24
 8010b8c:	b920      	cbnz	r0, 8010b98 <_Balloc+0x20>
 8010b8e:	4b18      	ldr	r3, [pc, #96]	; (8010bf0 <_Balloc+0x78>)
 8010b90:	4818      	ldr	r0, [pc, #96]	; (8010bf4 <_Balloc+0x7c>)
 8010b92:	2166      	movs	r1, #102	; 0x66
 8010b94:	f000 fe3a 	bl	801180c <__assert_func>
 8010b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b9c:	6006      	str	r6, [r0, #0]
 8010b9e:	60c6      	str	r6, [r0, #12]
 8010ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010ba2:	68f3      	ldr	r3, [r6, #12]
 8010ba4:	b183      	cbz	r3, 8010bc8 <_Balloc+0x50>
 8010ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010bae:	b9b8      	cbnz	r0, 8010be0 <_Balloc+0x68>
 8010bb0:	2101      	movs	r1, #1
 8010bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8010bb6:	1d72      	adds	r2, r6, #5
 8010bb8:	0092      	lsls	r2, r2, #2
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f000 fc9d 	bl	80114fa <_calloc_r>
 8010bc0:	b160      	cbz	r0, 8010bdc <_Balloc+0x64>
 8010bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010bc6:	e00e      	b.n	8010be6 <_Balloc+0x6e>
 8010bc8:	2221      	movs	r2, #33	; 0x21
 8010bca:	2104      	movs	r1, #4
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f000 fc94 	bl	80114fa <_calloc_r>
 8010bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bd4:	60f0      	str	r0, [r6, #12]
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d1e4      	bne.n	8010ba6 <_Balloc+0x2e>
 8010bdc:	2000      	movs	r0, #0
 8010bde:	bd70      	pop	{r4, r5, r6, pc}
 8010be0:	6802      	ldr	r2, [r0, #0]
 8010be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010be6:	2300      	movs	r3, #0
 8010be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bec:	e7f7      	b.n	8010bde <_Balloc+0x66>
 8010bee:	bf00      	nop
 8010bf0:	0801594d 	.word	0x0801594d
 8010bf4:	08015a4c 	.word	0x08015a4c

08010bf8 <_Bfree>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	460c      	mov	r4, r1
 8010c00:	b976      	cbnz	r6, 8010c20 <_Bfree+0x28>
 8010c02:	2010      	movs	r0, #16
 8010c04:	f7fd f9c8 	bl	800df98 <malloc>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	6268      	str	r0, [r5, #36]	; 0x24
 8010c0c:	b920      	cbnz	r0, 8010c18 <_Bfree+0x20>
 8010c0e:	4b09      	ldr	r3, [pc, #36]	; (8010c34 <_Bfree+0x3c>)
 8010c10:	4809      	ldr	r0, [pc, #36]	; (8010c38 <_Bfree+0x40>)
 8010c12:	218a      	movs	r1, #138	; 0x8a
 8010c14:	f000 fdfa 	bl	801180c <__assert_func>
 8010c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c1c:	6006      	str	r6, [r0, #0]
 8010c1e:	60c6      	str	r6, [r0, #12]
 8010c20:	b13c      	cbz	r4, 8010c32 <_Bfree+0x3a>
 8010c22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010c24:	6862      	ldr	r2, [r4, #4]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c2c:	6021      	str	r1, [r4, #0]
 8010c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c32:	bd70      	pop	{r4, r5, r6, pc}
 8010c34:	0801594d 	.word	0x0801594d
 8010c38:	08015a4c 	.word	0x08015a4c

08010c3c <__multadd>:
 8010c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c40:	690d      	ldr	r5, [r1, #16]
 8010c42:	4607      	mov	r7, r0
 8010c44:	460c      	mov	r4, r1
 8010c46:	461e      	mov	r6, r3
 8010c48:	f101 0c14 	add.w	ip, r1, #20
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	f8dc 3000 	ldr.w	r3, [ip]
 8010c52:	b299      	uxth	r1, r3
 8010c54:	fb02 6101 	mla	r1, r2, r1, r6
 8010c58:	0c1e      	lsrs	r6, r3, #16
 8010c5a:	0c0b      	lsrs	r3, r1, #16
 8010c5c:	fb02 3306 	mla	r3, r2, r6, r3
 8010c60:	b289      	uxth	r1, r1
 8010c62:	3001      	adds	r0, #1
 8010c64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c68:	4285      	cmp	r5, r0
 8010c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8010c6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c72:	dcec      	bgt.n	8010c4e <__multadd+0x12>
 8010c74:	b30e      	cbz	r6, 8010cba <__multadd+0x7e>
 8010c76:	68a3      	ldr	r3, [r4, #8]
 8010c78:	42ab      	cmp	r3, r5
 8010c7a:	dc19      	bgt.n	8010cb0 <__multadd+0x74>
 8010c7c:	6861      	ldr	r1, [r4, #4]
 8010c7e:	4638      	mov	r0, r7
 8010c80:	3101      	adds	r1, #1
 8010c82:	f7ff ff79 	bl	8010b78 <_Balloc>
 8010c86:	4680      	mov	r8, r0
 8010c88:	b928      	cbnz	r0, 8010c96 <__multadd+0x5a>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	4b0c      	ldr	r3, [pc, #48]	; (8010cc0 <__multadd+0x84>)
 8010c8e:	480d      	ldr	r0, [pc, #52]	; (8010cc4 <__multadd+0x88>)
 8010c90:	21b5      	movs	r1, #181	; 0xb5
 8010c92:	f000 fdbb 	bl	801180c <__assert_func>
 8010c96:	6922      	ldr	r2, [r4, #16]
 8010c98:	3202      	adds	r2, #2
 8010c9a:	f104 010c 	add.w	r1, r4, #12
 8010c9e:	0092      	lsls	r2, r2, #2
 8010ca0:	300c      	adds	r0, #12
 8010ca2:	f7fd f989 	bl	800dfb8 <memcpy>
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	4638      	mov	r0, r7
 8010caa:	f7ff ffa5 	bl	8010bf8 <_Bfree>
 8010cae:	4644      	mov	r4, r8
 8010cb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010cb4:	3501      	adds	r5, #1
 8010cb6:	615e      	str	r6, [r3, #20]
 8010cb8:	6125      	str	r5, [r4, #16]
 8010cba:	4620      	mov	r0, r4
 8010cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc0:	080159bf 	.word	0x080159bf
 8010cc4:	08015a4c 	.word	0x08015a4c

08010cc8 <__s2b>:
 8010cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ccc:	460c      	mov	r4, r1
 8010cce:	4615      	mov	r5, r2
 8010cd0:	461f      	mov	r7, r3
 8010cd2:	2209      	movs	r2, #9
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	4606      	mov	r6, r0
 8010cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cdc:	2100      	movs	r1, #0
 8010cde:	2201      	movs	r2, #1
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	db09      	blt.n	8010cf8 <__s2b+0x30>
 8010ce4:	4630      	mov	r0, r6
 8010ce6:	f7ff ff47 	bl	8010b78 <_Balloc>
 8010cea:	b940      	cbnz	r0, 8010cfe <__s2b+0x36>
 8010cec:	4602      	mov	r2, r0
 8010cee:	4b19      	ldr	r3, [pc, #100]	; (8010d54 <__s2b+0x8c>)
 8010cf0:	4819      	ldr	r0, [pc, #100]	; (8010d58 <__s2b+0x90>)
 8010cf2:	21ce      	movs	r1, #206	; 0xce
 8010cf4:	f000 fd8a 	bl	801180c <__assert_func>
 8010cf8:	0052      	lsls	r2, r2, #1
 8010cfa:	3101      	adds	r1, #1
 8010cfc:	e7f0      	b.n	8010ce0 <__s2b+0x18>
 8010cfe:	9b08      	ldr	r3, [sp, #32]
 8010d00:	6143      	str	r3, [r0, #20]
 8010d02:	2d09      	cmp	r5, #9
 8010d04:	f04f 0301 	mov.w	r3, #1
 8010d08:	6103      	str	r3, [r0, #16]
 8010d0a:	dd16      	ble.n	8010d3a <__s2b+0x72>
 8010d0c:	f104 0909 	add.w	r9, r4, #9
 8010d10:	46c8      	mov	r8, r9
 8010d12:	442c      	add	r4, r5
 8010d14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010d18:	4601      	mov	r1, r0
 8010d1a:	3b30      	subs	r3, #48	; 0x30
 8010d1c:	220a      	movs	r2, #10
 8010d1e:	4630      	mov	r0, r6
 8010d20:	f7ff ff8c 	bl	8010c3c <__multadd>
 8010d24:	45a0      	cmp	r8, r4
 8010d26:	d1f5      	bne.n	8010d14 <__s2b+0x4c>
 8010d28:	f1a5 0408 	sub.w	r4, r5, #8
 8010d2c:	444c      	add	r4, r9
 8010d2e:	1b2d      	subs	r5, r5, r4
 8010d30:	1963      	adds	r3, r4, r5
 8010d32:	42bb      	cmp	r3, r7
 8010d34:	db04      	blt.n	8010d40 <__s2b+0x78>
 8010d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d3a:	340a      	adds	r4, #10
 8010d3c:	2509      	movs	r5, #9
 8010d3e:	e7f6      	b.n	8010d2e <__s2b+0x66>
 8010d40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d44:	4601      	mov	r1, r0
 8010d46:	3b30      	subs	r3, #48	; 0x30
 8010d48:	220a      	movs	r2, #10
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f7ff ff76 	bl	8010c3c <__multadd>
 8010d50:	e7ee      	b.n	8010d30 <__s2b+0x68>
 8010d52:	bf00      	nop
 8010d54:	080159bf 	.word	0x080159bf
 8010d58:	08015a4c 	.word	0x08015a4c

08010d5c <__hi0bits>:
 8010d5c:	0c03      	lsrs	r3, r0, #16
 8010d5e:	041b      	lsls	r3, r3, #16
 8010d60:	b9d3      	cbnz	r3, 8010d98 <__hi0bits+0x3c>
 8010d62:	0400      	lsls	r0, r0, #16
 8010d64:	2310      	movs	r3, #16
 8010d66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010d6a:	bf04      	itt	eq
 8010d6c:	0200      	lsleq	r0, r0, #8
 8010d6e:	3308      	addeq	r3, #8
 8010d70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010d74:	bf04      	itt	eq
 8010d76:	0100      	lsleq	r0, r0, #4
 8010d78:	3304      	addeq	r3, #4
 8010d7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010d7e:	bf04      	itt	eq
 8010d80:	0080      	lsleq	r0, r0, #2
 8010d82:	3302      	addeq	r3, #2
 8010d84:	2800      	cmp	r0, #0
 8010d86:	db05      	blt.n	8010d94 <__hi0bits+0x38>
 8010d88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010d8c:	f103 0301 	add.w	r3, r3, #1
 8010d90:	bf08      	it	eq
 8010d92:	2320      	moveq	r3, #32
 8010d94:	4618      	mov	r0, r3
 8010d96:	4770      	bx	lr
 8010d98:	2300      	movs	r3, #0
 8010d9a:	e7e4      	b.n	8010d66 <__hi0bits+0xa>

08010d9c <__lo0bits>:
 8010d9c:	6803      	ldr	r3, [r0, #0]
 8010d9e:	f013 0207 	ands.w	r2, r3, #7
 8010da2:	4601      	mov	r1, r0
 8010da4:	d00b      	beq.n	8010dbe <__lo0bits+0x22>
 8010da6:	07da      	lsls	r2, r3, #31
 8010da8:	d423      	bmi.n	8010df2 <__lo0bits+0x56>
 8010daa:	0798      	lsls	r0, r3, #30
 8010dac:	bf49      	itett	mi
 8010dae:	085b      	lsrmi	r3, r3, #1
 8010db0:	089b      	lsrpl	r3, r3, #2
 8010db2:	2001      	movmi	r0, #1
 8010db4:	600b      	strmi	r3, [r1, #0]
 8010db6:	bf5c      	itt	pl
 8010db8:	600b      	strpl	r3, [r1, #0]
 8010dba:	2002      	movpl	r0, #2
 8010dbc:	4770      	bx	lr
 8010dbe:	b298      	uxth	r0, r3
 8010dc0:	b9a8      	cbnz	r0, 8010dee <__lo0bits+0x52>
 8010dc2:	0c1b      	lsrs	r3, r3, #16
 8010dc4:	2010      	movs	r0, #16
 8010dc6:	b2da      	uxtb	r2, r3
 8010dc8:	b90a      	cbnz	r2, 8010dce <__lo0bits+0x32>
 8010dca:	3008      	adds	r0, #8
 8010dcc:	0a1b      	lsrs	r3, r3, #8
 8010dce:	071a      	lsls	r2, r3, #28
 8010dd0:	bf04      	itt	eq
 8010dd2:	091b      	lsreq	r3, r3, #4
 8010dd4:	3004      	addeq	r0, #4
 8010dd6:	079a      	lsls	r2, r3, #30
 8010dd8:	bf04      	itt	eq
 8010dda:	089b      	lsreq	r3, r3, #2
 8010ddc:	3002      	addeq	r0, #2
 8010dde:	07da      	lsls	r2, r3, #31
 8010de0:	d403      	bmi.n	8010dea <__lo0bits+0x4e>
 8010de2:	085b      	lsrs	r3, r3, #1
 8010de4:	f100 0001 	add.w	r0, r0, #1
 8010de8:	d005      	beq.n	8010df6 <__lo0bits+0x5a>
 8010dea:	600b      	str	r3, [r1, #0]
 8010dec:	4770      	bx	lr
 8010dee:	4610      	mov	r0, r2
 8010df0:	e7e9      	b.n	8010dc6 <__lo0bits+0x2a>
 8010df2:	2000      	movs	r0, #0
 8010df4:	4770      	bx	lr
 8010df6:	2020      	movs	r0, #32
 8010df8:	4770      	bx	lr
	...

08010dfc <__i2b>:
 8010dfc:	b510      	push	{r4, lr}
 8010dfe:	460c      	mov	r4, r1
 8010e00:	2101      	movs	r1, #1
 8010e02:	f7ff feb9 	bl	8010b78 <_Balloc>
 8010e06:	4602      	mov	r2, r0
 8010e08:	b928      	cbnz	r0, 8010e16 <__i2b+0x1a>
 8010e0a:	4b05      	ldr	r3, [pc, #20]	; (8010e20 <__i2b+0x24>)
 8010e0c:	4805      	ldr	r0, [pc, #20]	; (8010e24 <__i2b+0x28>)
 8010e0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010e12:	f000 fcfb 	bl	801180c <__assert_func>
 8010e16:	2301      	movs	r3, #1
 8010e18:	6144      	str	r4, [r0, #20]
 8010e1a:	6103      	str	r3, [r0, #16]
 8010e1c:	bd10      	pop	{r4, pc}
 8010e1e:	bf00      	nop
 8010e20:	080159bf 	.word	0x080159bf
 8010e24:	08015a4c 	.word	0x08015a4c

08010e28 <__multiply>:
 8010e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2c:	4691      	mov	r9, r2
 8010e2e:	690a      	ldr	r2, [r1, #16]
 8010e30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	bfb8      	it	lt
 8010e38:	460b      	movlt	r3, r1
 8010e3a:	460c      	mov	r4, r1
 8010e3c:	bfbc      	itt	lt
 8010e3e:	464c      	movlt	r4, r9
 8010e40:	4699      	movlt	r9, r3
 8010e42:	6927      	ldr	r7, [r4, #16]
 8010e44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e48:	68a3      	ldr	r3, [r4, #8]
 8010e4a:	6861      	ldr	r1, [r4, #4]
 8010e4c:	eb07 060a 	add.w	r6, r7, sl
 8010e50:	42b3      	cmp	r3, r6
 8010e52:	b085      	sub	sp, #20
 8010e54:	bfb8      	it	lt
 8010e56:	3101      	addlt	r1, #1
 8010e58:	f7ff fe8e 	bl	8010b78 <_Balloc>
 8010e5c:	b930      	cbnz	r0, 8010e6c <__multiply+0x44>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	4b44      	ldr	r3, [pc, #272]	; (8010f74 <__multiply+0x14c>)
 8010e62:	4845      	ldr	r0, [pc, #276]	; (8010f78 <__multiply+0x150>)
 8010e64:	f240 115d 	movw	r1, #349	; 0x15d
 8010e68:	f000 fcd0 	bl	801180c <__assert_func>
 8010e6c:	f100 0514 	add.w	r5, r0, #20
 8010e70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010e74:	462b      	mov	r3, r5
 8010e76:	2200      	movs	r2, #0
 8010e78:	4543      	cmp	r3, r8
 8010e7a:	d321      	bcc.n	8010ec0 <__multiply+0x98>
 8010e7c:	f104 0314 	add.w	r3, r4, #20
 8010e80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010e84:	f109 0314 	add.w	r3, r9, #20
 8010e88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010e8c:	9202      	str	r2, [sp, #8]
 8010e8e:	1b3a      	subs	r2, r7, r4
 8010e90:	3a15      	subs	r2, #21
 8010e92:	f022 0203 	bic.w	r2, r2, #3
 8010e96:	3204      	adds	r2, #4
 8010e98:	f104 0115 	add.w	r1, r4, #21
 8010e9c:	428f      	cmp	r7, r1
 8010e9e:	bf38      	it	cc
 8010ea0:	2204      	movcc	r2, #4
 8010ea2:	9201      	str	r2, [sp, #4]
 8010ea4:	9a02      	ldr	r2, [sp, #8]
 8010ea6:	9303      	str	r3, [sp, #12]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d80c      	bhi.n	8010ec6 <__multiply+0x9e>
 8010eac:	2e00      	cmp	r6, #0
 8010eae:	dd03      	ble.n	8010eb8 <__multiply+0x90>
 8010eb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d05a      	beq.n	8010f6e <__multiply+0x146>
 8010eb8:	6106      	str	r6, [r0, #16]
 8010eba:	b005      	add	sp, #20
 8010ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec0:	f843 2b04 	str.w	r2, [r3], #4
 8010ec4:	e7d8      	b.n	8010e78 <__multiply+0x50>
 8010ec6:	f8b3 a000 	ldrh.w	sl, [r3]
 8010eca:	f1ba 0f00 	cmp.w	sl, #0
 8010ece:	d024      	beq.n	8010f1a <__multiply+0xf2>
 8010ed0:	f104 0e14 	add.w	lr, r4, #20
 8010ed4:	46a9      	mov	r9, r5
 8010ed6:	f04f 0c00 	mov.w	ip, #0
 8010eda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010ede:	f8d9 1000 	ldr.w	r1, [r9]
 8010ee2:	fa1f fb82 	uxth.w	fp, r2
 8010ee6:	b289      	uxth	r1, r1
 8010ee8:	fb0a 110b 	mla	r1, sl, fp, r1
 8010eec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010ef0:	f8d9 2000 	ldr.w	r2, [r9]
 8010ef4:	4461      	add	r1, ip
 8010ef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010efa:	fb0a c20b 	mla	r2, sl, fp, ip
 8010efe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010f02:	b289      	uxth	r1, r1
 8010f04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010f08:	4577      	cmp	r7, lr
 8010f0a:	f849 1b04 	str.w	r1, [r9], #4
 8010f0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010f12:	d8e2      	bhi.n	8010eda <__multiply+0xb2>
 8010f14:	9a01      	ldr	r2, [sp, #4]
 8010f16:	f845 c002 	str.w	ip, [r5, r2]
 8010f1a:	9a03      	ldr	r2, [sp, #12]
 8010f1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010f20:	3304      	adds	r3, #4
 8010f22:	f1b9 0f00 	cmp.w	r9, #0
 8010f26:	d020      	beq.n	8010f6a <__multiply+0x142>
 8010f28:	6829      	ldr	r1, [r5, #0]
 8010f2a:	f104 0c14 	add.w	ip, r4, #20
 8010f2e:	46ae      	mov	lr, r5
 8010f30:	f04f 0a00 	mov.w	sl, #0
 8010f34:	f8bc b000 	ldrh.w	fp, [ip]
 8010f38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010f3c:	fb09 220b 	mla	r2, r9, fp, r2
 8010f40:	4492      	add	sl, r2
 8010f42:	b289      	uxth	r1, r1
 8010f44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010f48:	f84e 1b04 	str.w	r1, [lr], #4
 8010f4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010f50:	f8be 1000 	ldrh.w	r1, [lr]
 8010f54:	0c12      	lsrs	r2, r2, #16
 8010f56:	fb09 1102 	mla	r1, r9, r2, r1
 8010f5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010f5e:	4567      	cmp	r7, ip
 8010f60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010f64:	d8e6      	bhi.n	8010f34 <__multiply+0x10c>
 8010f66:	9a01      	ldr	r2, [sp, #4]
 8010f68:	50a9      	str	r1, [r5, r2]
 8010f6a:	3504      	adds	r5, #4
 8010f6c:	e79a      	b.n	8010ea4 <__multiply+0x7c>
 8010f6e:	3e01      	subs	r6, #1
 8010f70:	e79c      	b.n	8010eac <__multiply+0x84>
 8010f72:	bf00      	nop
 8010f74:	080159bf 	.word	0x080159bf
 8010f78:	08015a4c 	.word	0x08015a4c

08010f7c <__pow5mult>:
 8010f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f80:	4615      	mov	r5, r2
 8010f82:	f012 0203 	ands.w	r2, r2, #3
 8010f86:	4606      	mov	r6, r0
 8010f88:	460f      	mov	r7, r1
 8010f8a:	d007      	beq.n	8010f9c <__pow5mult+0x20>
 8010f8c:	4c25      	ldr	r4, [pc, #148]	; (8011024 <__pow5mult+0xa8>)
 8010f8e:	3a01      	subs	r2, #1
 8010f90:	2300      	movs	r3, #0
 8010f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f96:	f7ff fe51 	bl	8010c3c <__multadd>
 8010f9a:	4607      	mov	r7, r0
 8010f9c:	10ad      	asrs	r5, r5, #2
 8010f9e:	d03d      	beq.n	801101c <__pow5mult+0xa0>
 8010fa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010fa2:	b97c      	cbnz	r4, 8010fc4 <__pow5mult+0x48>
 8010fa4:	2010      	movs	r0, #16
 8010fa6:	f7fc fff7 	bl	800df98 <malloc>
 8010faa:	4602      	mov	r2, r0
 8010fac:	6270      	str	r0, [r6, #36]	; 0x24
 8010fae:	b928      	cbnz	r0, 8010fbc <__pow5mult+0x40>
 8010fb0:	4b1d      	ldr	r3, [pc, #116]	; (8011028 <__pow5mult+0xac>)
 8010fb2:	481e      	ldr	r0, [pc, #120]	; (801102c <__pow5mult+0xb0>)
 8010fb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010fb8:	f000 fc28 	bl	801180c <__assert_func>
 8010fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fc0:	6004      	str	r4, [r0, #0]
 8010fc2:	60c4      	str	r4, [r0, #12]
 8010fc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fcc:	b94c      	cbnz	r4, 8010fe2 <__pow5mult+0x66>
 8010fce:	f240 2171 	movw	r1, #625	; 0x271
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	f7ff ff12 	bl	8010dfc <__i2b>
 8010fd8:	2300      	movs	r3, #0
 8010fda:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fde:	4604      	mov	r4, r0
 8010fe0:	6003      	str	r3, [r0, #0]
 8010fe2:	f04f 0900 	mov.w	r9, #0
 8010fe6:	07eb      	lsls	r3, r5, #31
 8010fe8:	d50a      	bpl.n	8011000 <__pow5mult+0x84>
 8010fea:	4639      	mov	r1, r7
 8010fec:	4622      	mov	r2, r4
 8010fee:	4630      	mov	r0, r6
 8010ff0:	f7ff ff1a 	bl	8010e28 <__multiply>
 8010ff4:	4639      	mov	r1, r7
 8010ff6:	4680      	mov	r8, r0
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f7ff fdfd 	bl	8010bf8 <_Bfree>
 8010ffe:	4647      	mov	r7, r8
 8011000:	106d      	asrs	r5, r5, #1
 8011002:	d00b      	beq.n	801101c <__pow5mult+0xa0>
 8011004:	6820      	ldr	r0, [r4, #0]
 8011006:	b938      	cbnz	r0, 8011018 <__pow5mult+0x9c>
 8011008:	4622      	mov	r2, r4
 801100a:	4621      	mov	r1, r4
 801100c:	4630      	mov	r0, r6
 801100e:	f7ff ff0b 	bl	8010e28 <__multiply>
 8011012:	6020      	str	r0, [r4, #0]
 8011014:	f8c0 9000 	str.w	r9, [r0]
 8011018:	4604      	mov	r4, r0
 801101a:	e7e4      	b.n	8010fe6 <__pow5mult+0x6a>
 801101c:	4638      	mov	r0, r7
 801101e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011022:	bf00      	nop
 8011024:	08015b98 	.word	0x08015b98
 8011028:	0801594d 	.word	0x0801594d
 801102c:	08015a4c 	.word	0x08015a4c

08011030 <__lshift>:
 8011030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011034:	460c      	mov	r4, r1
 8011036:	6849      	ldr	r1, [r1, #4]
 8011038:	6923      	ldr	r3, [r4, #16]
 801103a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801103e:	68a3      	ldr	r3, [r4, #8]
 8011040:	4607      	mov	r7, r0
 8011042:	4691      	mov	r9, r2
 8011044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011048:	f108 0601 	add.w	r6, r8, #1
 801104c:	42b3      	cmp	r3, r6
 801104e:	db0b      	blt.n	8011068 <__lshift+0x38>
 8011050:	4638      	mov	r0, r7
 8011052:	f7ff fd91 	bl	8010b78 <_Balloc>
 8011056:	4605      	mov	r5, r0
 8011058:	b948      	cbnz	r0, 801106e <__lshift+0x3e>
 801105a:	4602      	mov	r2, r0
 801105c:	4b2a      	ldr	r3, [pc, #168]	; (8011108 <__lshift+0xd8>)
 801105e:	482b      	ldr	r0, [pc, #172]	; (801110c <__lshift+0xdc>)
 8011060:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011064:	f000 fbd2 	bl	801180c <__assert_func>
 8011068:	3101      	adds	r1, #1
 801106a:	005b      	lsls	r3, r3, #1
 801106c:	e7ee      	b.n	801104c <__lshift+0x1c>
 801106e:	2300      	movs	r3, #0
 8011070:	f100 0114 	add.w	r1, r0, #20
 8011074:	f100 0210 	add.w	r2, r0, #16
 8011078:	4618      	mov	r0, r3
 801107a:	4553      	cmp	r3, sl
 801107c:	db37      	blt.n	80110ee <__lshift+0xbe>
 801107e:	6920      	ldr	r0, [r4, #16]
 8011080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011084:	f104 0314 	add.w	r3, r4, #20
 8011088:	f019 091f 	ands.w	r9, r9, #31
 801108c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011090:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011094:	d02f      	beq.n	80110f6 <__lshift+0xc6>
 8011096:	f1c9 0e20 	rsb	lr, r9, #32
 801109a:	468a      	mov	sl, r1
 801109c:	f04f 0c00 	mov.w	ip, #0
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	fa02 f209 	lsl.w	r2, r2, r9
 80110a6:	ea42 020c 	orr.w	r2, r2, ip
 80110aa:	f84a 2b04 	str.w	r2, [sl], #4
 80110ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80110b2:	4298      	cmp	r0, r3
 80110b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80110b8:	d8f2      	bhi.n	80110a0 <__lshift+0x70>
 80110ba:	1b03      	subs	r3, r0, r4
 80110bc:	3b15      	subs	r3, #21
 80110be:	f023 0303 	bic.w	r3, r3, #3
 80110c2:	3304      	adds	r3, #4
 80110c4:	f104 0215 	add.w	r2, r4, #21
 80110c8:	4290      	cmp	r0, r2
 80110ca:	bf38      	it	cc
 80110cc:	2304      	movcc	r3, #4
 80110ce:	f841 c003 	str.w	ip, [r1, r3]
 80110d2:	f1bc 0f00 	cmp.w	ip, #0
 80110d6:	d001      	beq.n	80110dc <__lshift+0xac>
 80110d8:	f108 0602 	add.w	r6, r8, #2
 80110dc:	3e01      	subs	r6, #1
 80110de:	4638      	mov	r0, r7
 80110e0:	612e      	str	r6, [r5, #16]
 80110e2:	4621      	mov	r1, r4
 80110e4:	f7ff fd88 	bl	8010bf8 <_Bfree>
 80110e8:	4628      	mov	r0, r5
 80110ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80110f2:	3301      	adds	r3, #1
 80110f4:	e7c1      	b.n	801107a <__lshift+0x4a>
 80110f6:	3904      	subs	r1, #4
 80110f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80110fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011100:	4298      	cmp	r0, r3
 8011102:	d8f9      	bhi.n	80110f8 <__lshift+0xc8>
 8011104:	e7ea      	b.n	80110dc <__lshift+0xac>
 8011106:	bf00      	nop
 8011108:	080159bf 	.word	0x080159bf
 801110c:	08015a4c 	.word	0x08015a4c

08011110 <__mcmp>:
 8011110:	b530      	push	{r4, r5, lr}
 8011112:	6902      	ldr	r2, [r0, #16]
 8011114:	690c      	ldr	r4, [r1, #16]
 8011116:	1b12      	subs	r2, r2, r4
 8011118:	d10e      	bne.n	8011138 <__mcmp+0x28>
 801111a:	f100 0314 	add.w	r3, r0, #20
 801111e:	3114      	adds	r1, #20
 8011120:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011124:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011128:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801112c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011130:	42a5      	cmp	r5, r4
 8011132:	d003      	beq.n	801113c <__mcmp+0x2c>
 8011134:	d305      	bcc.n	8011142 <__mcmp+0x32>
 8011136:	2201      	movs	r2, #1
 8011138:	4610      	mov	r0, r2
 801113a:	bd30      	pop	{r4, r5, pc}
 801113c:	4283      	cmp	r3, r0
 801113e:	d3f3      	bcc.n	8011128 <__mcmp+0x18>
 8011140:	e7fa      	b.n	8011138 <__mcmp+0x28>
 8011142:	f04f 32ff 	mov.w	r2, #4294967295
 8011146:	e7f7      	b.n	8011138 <__mcmp+0x28>

08011148 <__mdiff>:
 8011148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801114c:	460c      	mov	r4, r1
 801114e:	4606      	mov	r6, r0
 8011150:	4611      	mov	r1, r2
 8011152:	4620      	mov	r0, r4
 8011154:	4690      	mov	r8, r2
 8011156:	f7ff ffdb 	bl	8011110 <__mcmp>
 801115a:	1e05      	subs	r5, r0, #0
 801115c:	d110      	bne.n	8011180 <__mdiff+0x38>
 801115e:	4629      	mov	r1, r5
 8011160:	4630      	mov	r0, r6
 8011162:	f7ff fd09 	bl	8010b78 <_Balloc>
 8011166:	b930      	cbnz	r0, 8011176 <__mdiff+0x2e>
 8011168:	4b3a      	ldr	r3, [pc, #232]	; (8011254 <__mdiff+0x10c>)
 801116a:	4602      	mov	r2, r0
 801116c:	f240 2132 	movw	r1, #562	; 0x232
 8011170:	4839      	ldr	r0, [pc, #228]	; (8011258 <__mdiff+0x110>)
 8011172:	f000 fb4b 	bl	801180c <__assert_func>
 8011176:	2301      	movs	r3, #1
 8011178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801117c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011180:	bfa4      	itt	ge
 8011182:	4643      	movge	r3, r8
 8011184:	46a0      	movge	r8, r4
 8011186:	4630      	mov	r0, r6
 8011188:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801118c:	bfa6      	itte	ge
 801118e:	461c      	movge	r4, r3
 8011190:	2500      	movge	r5, #0
 8011192:	2501      	movlt	r5, #1
 8011194:	f7ff fcf0 	bl	8010b78 <_Balloc>
 8011198:	b920      	cbnz	r0, 80111a4 <__mdiff+0x5c>
 801119a:	4b2e      	ldr	r3, [pc, #184]	; (8011254 <__mdiff+0x10c>)
 801119c:	4602      	mov	r2, r0
 801119e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80111a2:	e7e5      	b.n	8011170 <__mdiff+0x28>
 80111a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80111a8:	6926      	ldr	r6, [r4, #16]
 80111aa:	60c5      	str	r5, [r0, #12]
 80111ac:	f104 0914 	add.w	r9, r4, #20
 80111b0:	f108 0514 	add.w	r5, r8, #20
 80111b4:	f100 0e14 	add.w	lr, r0, #20
 80111b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80111bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80111c0:	f108 0210 	add.w	r2, r8, #16
 80111c4:	46f2      	mov	sl, lr
 80111c6:	2100      	movs	r1, #0
 80111c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80111cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80111d0:	fa1f f883 	uxth.w	r8, r3
 80111d4:	fa11 f18b 	uxtah	r1, r1, fp
 80111d8:	0c1b      	lsrs	r3, r3, #16
 80111da:	eba1 0808 	sub.w	r8, r1, r8
 80111de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80111e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80111e6:	fa1f f888 	uxth.w	r8, r8
 80111ea:	1419      	asrs	r1, r3, #16
 80111ec:	454e      	cmp	r6, r9
 80111ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80111f2:	f84a 3b04 	str.w	r3, [sl], #4
 80111f6:	d8e7      	bhi.n	80111c8 <__mdiff+0x80>
 80111f8:	1b33      	subs	r3, r6, r4
 80111fa:	3b15      	subs	r3, #21
 80111fc:	f023 0303 	bic.w	r3, r3, #3
 8011200:	3304      	adds	r3, #4
 8011202:	3415      	adds	r4, #21
 8011204:	42a6      	cmp	r6, r4
 8011206:	bf38      	it	cc
 8011208:	2304      	movcc	r3, #4
 801120a:	441d      	add	r5, r3
 801120c:	4473      	add	r3, lr
 801120e:	469e      	mov	lr, r3
 8011210:	462e      	mov	r6, r5
 8011212:	4566      	cmp	r6, ip
 8011214:	d30e      	bcc.n	8011234 <__mdiff+0xec>
 8011216:	f10c 0203 	add.w	r2, ip, #3
 801121a:	1b52      	subs	r2, r2, r5
 801121c:	f022 0203 	bic.w	r2, r2, #3
 8011220:	3d03      	subs	r5, #3
 8011222:	45ac      	cmp	ip, r5
 8011224:	bf38      	it	cc
 8011226:	2200      	movcc	r2, #0
 8011228:	441a      	add	r2, r3
 801122a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801122e:	b17b      	cbz	r3, 8011250 <__mdiff+0x108>
 8011230:	6107      	str	r7, [r0, #16]
 8011232:	e7a3      	b.n	801117c <__mdiff+0x34>
 8011234:	f856 8b04 	ldr.w	r8, [r6], #4
 8011238:	fa11 f288 	uxtah	r2, r1, r8
 801123c:	1414      	asrs	r4, r2, #16
 801123e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011242:	b292      	uxth	r2, r2
 8011244:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011248:	f84e 2b04 	str.w	r2, [lr], #4
 801124c:	1421      	asrs	r1, r4, #16
 801124e:	e7e0      	b.n	8011212 <__mdiff+0xca>
 8011250:	3f01      	subs	r7, #1
 8011252:	e7ea      	b.n	801122a <__mdiff+0xe2>
 8011254:	080159bf 	.word	0x080159bf
 8011258:	08015a4c 	.word	0x08015a4c

0801125c <__ulp>:
 801125c:	b082      	sub	sp, #8
 801125e:	ed8d 0b00 	vstr	d0, [sp]
 8011262:	9b01      	ldr	r3, [sp, #4]
 8011264:	4912      	ldr	r1, [pc, #72]	; (80112b0 <__ulp+0x54>)
 8011266:	4019      	ands	r1, r3
 8011268:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801126c:	2900      	cmp	r1, #0
 801126e:	dd05      	ble.n	801127c <__ulp+0x20>
 8011270:	2200      	movs	r2, #0
 8011272:	460b      	mov	r3, r1
 8011274:	ec43 2b10 	vmov	d0, r2, r3
 8011278:	b002      	add	sp, #8
 801127a:	4770      	bx	lr
 801127c:	4249      	negs	r1, r1
 801127e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011282:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011286:	f04f 0200 	mov.w	r2, #0
 801128a:	f04f 0300 	mov.w	r3, #0
 801128e:	da04      	bge.n	801129a <__ulp+0x3e>
 8011290:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011294:	fa41 f300 	asr.w	r3, r1, r0
 8011298:	e7ec      	b.n	8011274 <__ulp+0x18>
 801129a:	f1a0 0114 	sub.w	r1, r0, #20
 801129e:	291e      	cmp	r1, #30
 80112a0:	bfda      	itte	le
 80112a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80112a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80112aa:	2101      	movgt	r1, #1
 80112ac:	460a      	mov	r2, r1
 80112ae:	e7e1      	b.n	8011274 <__ulp+0x18>
 80112b0:	7ff00000 	.word	0x7ff00000

080112b4 <__b2d>:
 80112b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b6:	6905      	ldr	r5, [r0, #16]
 80112b8:	f100 0714 	add.w	r7, r0, #20
 80112bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80112c0:	1f2e      	subs	r6, r5, #4
 80112c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80112c6:	4620      	mov	r0, r4
 80112c8:	f7ff fd48 	bl	8010d5c <__hi0bits>
 80112cc:	f1c0 0320 	rsb	r3, r0, #32
 80112d0:	280a      	cmp	r0, #10
 80112d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011350 <__b2d+0x9c>
 80112d6:	600b      	str	r3, [r1, #0]
 80112d8:	dc14      	bgt.n	8011304 <__b2d+0x50>
 80112da:	f1c0 0e0b 	rsb	lr, r0, #11
 80112de:	fa24 f10e 	lsr.w	r1, r4, lr
 80112e2:	42b7      	cmp	r7, r6
 80112e4:	ea41 030c 	orr.w	r3, r1, ip
 80112e8:	bf34      	ite	cc
 80112ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80112ee:	2100      	movcs	r1, #0
 80112f0:	3015      	adds	r0, #21
 80112f2:	fa04 f000 	lsl.w	r0, r4, r0
 80112f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80112fa:	ea40 0201 	orr.w	r2, r0, r1
 80112fe:	ec43 2b10 	vmov	d0, r2, r3
 8011302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011304:	42b7      	cmp	r7, r6
 8011306:	bf3a      	itte	cc
 8011308:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801130c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011310:	2100      	movcs	r1, #0
 8011312:	380b      	subs	r0, #11
 8011314:	d017      	beq.n	8011346 <__b2d+0x92>
 8011316:	f1c0 0c20 	rsb	ip, r0, #32
 801131a:	fa04 f500 	lsl.w	r5, r4, r0
 801131e:	42be      	cmp	r6, r7
 8011320:	fa21 f40c 	lsr.w	r4, r1, ip
 8011324:	ea45 0504 	orr.w	r5, r5, r4
 8011328:	bf8c      	ite	hi
 801132a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801132e:	2400      	movls	r4, #0
 8011330:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011334:	fa01 f000 	lsl.w	r0, r1, r0
 8011338:	fa24 f40c 	lsr.w	r4, r4, ip
 801133c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011340:	ea40 0204 	orr.w	r2, r0, r4
 8011344:	e7db      	b.n	80112fe <__b2d+0x4a>
 8011346:	ea44 030c 	orr.w	r3, r4, ip
 801134a:	460a      	mov	r2, r1
 801134c:	e7d7      	b.n	80112fe <__b2d+0x4a>
 801134e:	bf00      	nop
 8011350:	3ff00000 	.word	0x3ff00000

08011354 <__d2b>:
 8011354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011358:	4689      	mov	r9, r1
 801135a:	2101      	movs	r1, #1
 801135c:	ec57 6b10 	vmov	r6, r7, d0
 8011360:	4690      	mov	r8, r2
 8011362:	f7ff fc09 	bl	8010b78 <_Balloc>
 8011366:	4604      	mov	r4, r0
 8011368:	b930      	cbnz	r0, 8011378 <__d2b+0x24>
 801136a:	4602      	mov	r2, r0
 801136c:	4b25      	ldr	r3, [pc, #148]	; (8011404 <__d2b+0xb0>)
 801136e:	4826      	ldr	r0, [pc, #152]	; (8011408 <__d2b+0xb4>)
 8011370:	f240 310a 	movw	r1, #778	; 0x30a
 8011374:	f000 fa4a 	bl	801180c <__assert_func>
 8011378:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801137c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011380:	bb35      	cbnz	r5, 80113d0 <__d2b+0x7c>
 8011382:	2e00      	cmp	r6, #0
 8011384:	9301      	str	r3, [sp, #4]
 8011386:	d028      	beq.n	80113da <__d2b+0x86>
 8011388:	4668      	mov	r0, sp
 801138a:	9600      	str	r6, [sp, #0]
 801138c:	f7ff fd06 	bl	8010d9c <__lo0bits>
 8011390:	9900      	ldr	r1, [sp, #0]
 8011392:	b300      	cbz	r0, 80113d6 <__d2b+0x82>
 8011394:	9a01      	ldr	r2, [sp, #4]
 8011396:	f1c0 0320 	rsb	r3, r0, #32
 801139a:	fa02 f303 	lsl.w	r3, r2, r3
 801139e:	430b      	orrs	r3, r1
 80113a0:	40c2      	lsrs	r2, r0
 80113a2:	6163      	str	r3, [r4, #20]
 80113a4:	9201      	str	r2, [sp, #4]
 80113a6:	9b01      	ldr	r3, [sp, #4]
 80113a8:	61a3      	str	r3, [r4, #24]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	bf14      	ite	ne
 80113ae:	2202      	movne	r2, #2
 80113b0:	2201      	moveq	r2, #1
 80113b2:	6122      	str	r2, [r4, #16]
 80113b4:	b1d5      	cbz	r5, 80113ec <__d2b+0x98>
 80113b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80113ba:	4405      	add	r5, r0
 80113bc:	f8c9 5000 	str.w	r5, [r9]
 80113c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80113c4:	f8c8 0000 	str.w	r0, [r8]
 80113c8:	4620      	mov	r0, r4
 80113ca:	b003      	add	sp, #12
 80113cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80113d4:	e7d5      	b.n	8011382 <__d2b+0x2e>
 80113d6:	6161      	str	r1, [r4, #20]
 80113d8:	e7e5      	b.n	80113a6 <__d2b+0x52>
 80113da:	a801      	add	r0, sp, #4
 80113dc:	f7ff fcde 	bl	8010d9c <__lo0bits>
 80113e0:	9b01      	ldr	r3, [sp, #4]
 80113e2:	6163      	str	r3, [r4, #20]
 80113e4:	2201      	movs	r2, #1
 80113e6:	6122      	str	r2, [r4, #16]
 80113e8:	3020      	adds	r0, #32
 80113ea:	e7e3      	b.n	80113b4 <__d2b+0x60>
 80113ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113f4:	f8c9 0000 	str.w	r0, [r9]
 80113f8:	6918      	ldr	r0, [r3, #16]
 80113fa:	f7ff fcaf 	bl	8010d5c <__hi0bits>
 80113fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011402:	e7df      	b.n	80113c4 <__d2b+0x70>
 8011404:	080159bf 	.word	0x080159bf
 8011408:	08015a4c 	.word	0x08015a4c

0801140c <__ratio>:
 801140c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011410:	4688      	mov	r8, r1
 8011412:	4669      	mov	r1, sp
 8011414:	4681      	mov	r9, r0
 8011416:	f7ff ff4d 	bl	80112b4 <__b2d>
 801141a:	a901      	add	r1, sp, #4
 801141c:	4640      	mov	r0, r8
 801141e:	ec55 4b10 	vmov	r4, r5, d0
 8011422:	f7ff ff47 	bl	80112b4 <__b2d>
 8011426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801142a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801142e:	eba3 0c02 	sub.w	ip, r3, r2
 8011432:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011436:	1a9b      	subs	r3, r3, r2
 8011438:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801143c:	ec51 0b10 	vmov	r0, r1, d0
 8011440:	2b00      	cmp	r3, #0
 8011442:	bfd6      	itet	le
 8011444:	460a      	movle	r2, r1
 8011446:	462a      	movgt	r2, r5
 8011448:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801144c:	468b      	mov	fp, r1
 801144e:	462f      	mov	r7, r5
 8011450:	bfd4      	ite	le
 8011452:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011456:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801145a:	4620      	mov	r0, r4
 801145c:	ee10 2a10 	vmov	r2, s0
 8011460:	465b      	mov	r3, fp
 8011462:	4639      	mov	r1, r7
 8011464:	f7ef f9fa 	bl	800085c <__aeabi_ddiv>
 8011468:	ec41 0b10 	vmov	d0, r0, r1
 801146c:	b003      	add	sp, #12
 801146e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011472 <__copybits>:
 8011472:	3901      	subs	r1, #1
 8011474:	b570      	push	{r4, r5, r6, lr}
 8011476:	1149      	asrs	r1, r1, #5
 8011478:	6914      	ldr	r4, [r2, #16]
 801147a:	3101      	adds	r1, #1
 801147c:	f102 0314 	add.w	r3, r2, #20
 8011480:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011484:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011488:	1f05      	subs	r5, r0, #4
 801148a:	42a3      	cmp	r3, r4
 801148c:	d30c      	bcc.n	80114a8 <__copybits+0x36>
 801148e:	1aa3      	subs	r3, r4, r2
 8011490:	3b11      	subs	r3, #17
 8011492:	f023 0303 	bic.w	r3, r3, #3
 8011496:	3211      	adds	r2, #17
 8011498:	42a2      	cmp	r2, r4
 801149a:	bf88      	it	hi
 801149c:	2300      	movhi	r3, #0
 801149e:	4418      	add	r0, r3
 80114a0:	2300      	movs	r3, #0
 80114a2:	4288      	cmp	r0, r1
 80114a4:	d305      	bcc.n	80114b2 <__copybits+0x40>
 80114a6:	bd70      	pop	{r4, r5, r6, pc}
 80114a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80114ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80114b0:	e7eb      	b.n	801148a <__copybits+0x18>
 80114b2:	f840 3b04 	str.w	r3, [r0], #4
 80114b6:	e7f4      	b.n	80114a2 <__copybits+0x30>

080114b8 <__any_on>:
 80114b8:	f100 0214 	add.w	r2, r0, #20
 80114bc:	6900      	ldr	r0, [r0, #16]
 80114be:	114b      	asrs	r3, r1, #5
 80114c0:	4298      	cmp	r0, r3
 80114c2:	b510      	push	{r4, lr}
 80114c4:	db11      	blt.n	80114ea <__any_on+0x32>
 80114c6:	dd0a      	ble.n	80114de <__any_on+0x26>
 80114c8:	f011 011f 	ands.w	r1, r1, #31
 80114cc:	d007      	beq.n	80114de <__any_on+0x26>
 80114ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80114d2:	fa24 f001 	lsr.w	r0, r4, r1
 80114d6:	fa00 f101 	lsl.w	r1, r0, r1
 80114da:	428c      	cmp	r4, r1
 80114dc:	d10b      	bne.n	80114f6 <__any_on+0x3e>
 80114de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80114e2:	4293      	cmp	r3, r2
 80114e4:	d803      	bhi.n	80114ee <__any_on+0x36>
 80114e6:	2000      	movs	r0, #0
 80114e8:	bd10      	pop	{r4, pc}
 80114ea:	4603      	mov	r3, r0
 80114ec:	e7f7      	b.n	80114de <__any_on+0x26>
 80114ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114f2:	2900      	cmp	r1, #0
 80114f4:	d0f5      	beq.n	80114e2 <__any_on+0x2a>
 80114f6:	2001      	movs	r0, #1
 80114f8:	e7f6      	b.n	80114e8 <__any_on+0x30>

080114fa <_calloc_r>:
 80114fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114fc:	fba1 2402 	umull	r2, r4, r1, r2
 8011500:	b94c      	cbnz	r4, 8011516 <_calloc_r+0x1c>
 8011502:	4611      	mov	r1, r2
 8011504:	9201      	str	r2, [sp, #4]
 8011506:	f7fc fdd9 	bl	800e0bc <_malloc_r>
 801150a:	9a01      	ldr	r2, [sp, #4]
 801150c:	4605      	mov	r5, r0
 801150e:	b930      	cbnz	r0, 801151e <_calloc_r+0x24>
 8011510:	4628      	mov	r0, r5
 8011512:	b003      	add	sp, #12
 8011514:	bd30      	pop	{r4, r5, pc}
 8011516:	220c      	movs	r2, #12
 8011518:	6002      	str	r2, [r0, #0]
 801151a:	2500      	movs	r5, #0
 801151c:	e7f8      	b.n	8011510 <_calloc_r+0x16>
 801151e:	4621      	mov	r1, r4
 8011520:	f7fc fd58 	bl	800dfd4 <memset>
 8011524:	e7f4      	b.n	8011510 <_calloc_r+0x16>

08011526 <__ssputs_r>:
 8011526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801152a:	688e      	ldr	r6, [r1, #8]
 801152c:	429e      	cmp	r6, r3
 801152e:	4682      	mov	sl, r0
 8011530:	460c      	mov	r4, r1
 8011532:	4690      	mov	r8, r2
 8011534:	461f      	mov	r7, r3
 8011536:	d838      	bhi.n	80115aa <__ssputs_r+0x84>
 8011538:	898a      	ldrh	r2, [r1, #12]
 801153a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801153e:	d032      	beq.n	80115a6 <__ssputs_r+0x80>
 8011540:	6825      	ldr	r5, [r4, #0]
 8011542:	6909      	ldr	r1, [r1, #16]
 8011544:	eba5 0901 	sub.w	r9, r5, r1
 8011548:	6965      	ldr	r5, [r4, #20]
 801154a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801154e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011552:	3301      	adds	r3, #1
 8011554:	444b      	add	r3, r9
 8011556:	106d      	asrs	r5, r5, #1
 8011558:	429d      	cmp	r5, r3
 801155a:	bf38      	it	cc
 801155c:	461d      	movcc	r5, r3
 801155e:	0553      	lsls	r3, r2, #21
 8011560:	d531      	bpl.n	80115c6 <__ssputs_r+0xa0>
 8011562:	4629      	mov	r1, r5
 8011564:	f7fc fdaa 	bl	800e0bc <_malloc_r>
 8011568:	4606      	mov	r6, r0
 801156a:	b950      	cbnz	r0, 8011582 <__ssputs_r+0x5c>
 801156c:	230c      	movs	r3, #12
 801156e:	f8ca 3000 	str.w	r3, [sl]
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011578:	81a3      	strh	r3, [r4, #12]
 801157a:	f04f 30ff 	mov.w	r0, #4294967295
 801157e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011582:	6921      	ldr	r1, [r4, #16]
 8011584:	464a      	mov	r2, r9
 8011586:	f7fc fd17 	bl	800dfb8 <memcpy>
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011594:	81a3      	strh	r3, [r4, #12]
 8011596:	6126      	str	r6, [r4, #16]
 8011598:	6165      	str	r5, [r4, #20]
 801159a:	444e      	add	r6, r9
 801159c:	eba5 0509 	sub.w	r5, r5, r9
 80115a0:	6026      	str	r6, [r4, #0]
 80115a2:	60a5      	str	r5, [r4, #8]
 80115a4:	463e      	mov	r6, r7
 80115a6:	42be      	cmp	r6, r7
 80115a8:	d900      	bls.n	80115ac <__ssputs_r+0x86>
 80115aa:	463e      	mov	r6, r7
 80115ac:	6820      	ldr	r0, [r4, #0]
 80115ae:	4632      	mov	r2, r6
 80115b0:	4641      	mov	r1, r8
 80115b2:	f000 f95e 	bl	8011872 <memmove>
 80115b6:	68a3      	ldr	r3, [r4, #8]
 80115b8:	1b9b      	subs	r3, r3, r6
 80115ba:	60a3      	str	r3, [r4, #8]
 80115bc:	6823      	ldr	r3, [r4, #0]
 80115be:	4433      	add	r3, r6
 80115c0:	6023      	str	r3, [r4, #0]
 80115c2:	2000      	movs	r0, #0
 80115c4:	e7db      	b.n	801157e <__ssputs_r+0x58>
 80115c6:	462a      	mov	r2, r5
 80115c8:	f000 f96d 	bl	80118a6 <_realloc_r>
 80115cc:	4606      	mov	r6, r0
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d1e1      	bne.n	8011596 <__ssputs_r+0x70>
 80115d2:	6921      	ldr	r1, [r4, #16]
 80115d4:	4650      	mov	r0, sl
 80115d6:	f7fc fd05 	bl	800dfe4 <_free_r>
 80115da:	e7c7      	b.n	801156c <__ssputs_r+0x46>

080115dc <_svfiprintf_r>:
 80115dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e0:	4698      	mov	r8, r3
 80115e2:	898b      	ldrh	r3, [r1, #12]
 80115e4:	061b      	lsls	r3, r3, #24
 80115e6:	b09d      	sub	sp, #116	; 0x74
 80115e8:	4607      	mov	r7, r0
 80115ea:	460d      	mov	r5, r1
 80115ec:	4614      	mov	r4, r2
 80115ee:	d50e      	bpl.n	801160e <_svfiprintf_r+0x32>
 80115f0:	690b      	ldr	r3, [r1, #16]
 80115f2:	b963      	cbnz	r3, 801160e <_svfiprintf_r+0x32>
 80115f4:	2140      	movs	r1, #64	; 0x40
 80115f6:	f7fc fd61 	bl	800e0bc <_malloc_r>
 80115fa:	6028      	str	r0, [r5, #0]
 80115fc:	6128      	str	r0, [r5, #16]
 80115fe:	b920      	cbnz	r0, 801160a <_svfiprintf_r+0x2e>
 8011600:	230c      	movs	r3, #12
 8011602:	603b      	str	r3, [r7, #0]
 8011604:	f04f 30ff 	mov.w	r0, #4294967295
 8011608:	e0d1      	b.n	80117ae <_svfiprintf_r+0x1d2>
 801160a:	2340      	movs	r3, #64	; 0x40
 801160c:	616b      	str	r3, [r5, #20]
 801160e:	2300      	movs	r3, #0
 8011610:	9309      	str	r3, [sp, #36]	; 0x24
 8011612:	2320      	movs	r3, #32
 8011614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011618:	f8cd 800c 	str.w	r8, [sp, #12]
 801161c:	2330      	movs	r3, #48	; 0x30
 801161e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80117c8 <_svfiprintf_r+0x1ec>
 8011622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011626:	f04f 0901 	mov.w	r9, #1
 801162a:	4623      	mov	r3, r4
 801162c:	469a      	mov	sl, r3
 801162e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011632:	b10a      	cbz	r2, 8011638 <_svfiprintf_r+0x5c>
 8011634:	2a25      	cmp	r2, #37	; 0x25
 8011636:	d1f9      	bne.n	801162c <_svfiprintf_r+0x50>
 8011638:	ebba 0b04 	subs.w	fp, sl, r4
 801163c:	d00b      	beq.n	8011656 <_svfiprintf_r+0x7a>
 801163e:	465b      	mov	r3, fp
 8011640:	4622      	mov	r2, r4
 8011642:	4629      	mov	r1, r5
 8011644:	4638      	mov	r0, r7
 8011646:	f7ff ff6e 	bl	8011526 <__ssputs_r>
 801164a:	3001      	adds	r0, #1
 801164c:	f000 80aa 	beq.w	80117a4 <_svfiprintf_r+0x1c8>
 8011650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011652:	445a      	add	r2, fp
 8011654:	9209      	str	r2, [sp, #36]	; 0x24
 8011656:	f89a 3000 	ldrb.w	r3, [sl]
 801165a:	2b00      	cmp	r3, #0
 801165c:	f000 80a2 	beq.w	80117a4 <_svfiprintf_r+0x1c8>
 8011660:	2300      	movs	r3, #0
 8011662:	f04f 32ff 	mov.w	r2, #4294967295
 8011666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801166a:	f10a 0a01 	add.w	sl, sl, #1
 801166e:	9304      	str	r3, [sp, #16]
 8011670:	9307      	str	r3, [sp, #28]
 8011672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011676:	931a      	str	r3, [sp, #104]	; 0x68
 8011678:	4654      	mov	r4, sl
 801167a:	2205      	movs	r2, #5
 801167c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011680:	4851      	ldr	r0, [pc, #324]	; (80117c8 <_svfiprintf_r+0x1ec>)
 8011682:	f7ee fdb5 	bl	80001f0 <memchr>
 8011686:	9a04      	ldr	r2, [sp, #16]
 8011688:	b9d8      	cbnz	r0, 80116c2 <_svfiprintf_r+0xe6>
 801168a:	06d0      	lsls	r0, r2, #27
 801168c:	bf44      	itt	mi
 801168e:	2320      	movmi	r3, #32
 8011690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011694:	0711      	lsls	r1, r2, #28
 8011696:	bf44      	itt	mi
 8011698:	232b      	movmi	r3, #43	; 0x2b
 801169a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801169e:	f89a 3000 	ldrb.w	r3, [sl]
 80116a2:	2b2a      	cmp	r3, #42	; 0x2a
 80116a4:	d015      	beq.n	80116d2 <_svfiprintf_r+0xf6>
 80116a6:	9a07      	ldr	r2, [sp, #28]
 80116a8:	4654      	mov	r4, sl
 80116aa:	2000      	movs	r0, #0
 80116ac:	f04f 0c0a 	mov.w	ip, #10
 80116b0:	4621      	mov	r1, r4
 80116b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116b6:	3b30      	subs	r3, #48	; 0x30
 80116b8:	2b09      	cmp	r3, #9
 80116ba:	d94e      	bls.n	801175a <_svfiprintf_r+0x17e>
 80116bc:	b1b0      	cbz	r0, 80116ec <_svfiprintf_r+0x110>
 80116be:	9207      	str	r2, [sp, #28]
 80116c0:	e014      	b.n	80116ec <_svfiprintf_r+0x110>
 80116c2:	eba0 0308 	sub.w	r3, r0, r8
 80116c6:	fa09 f303 	lsl.w	r3, r9, r3
 80116ca:	4313      	orrs	r3, r2
 80116cc:	9304      	str	r3, [sp, #16]
 80116ce:	46a2      	mov	sl, r4
 80116d0:	e7d2      	b.n	8011678 <_svfiprintf_r+0x9c>
 80116d2:	9b03      	ldr	r3, [sp, #12]
 80116d4:	1d19      	adds	r1, r3, #4
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	9103      	str	r1, [sp, #12]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	bfbb      	ittet	lt
 80116de:	425b      	neglt	r3, r3
 80116e0:	f042 0202 	orrlt.w	r2, r2, #2
 80116e4:	9307      	strge	r3, [sp, #28]
 80116e6:	9307      	strlt	r3, [sp, #28]
 80116e8:	bfb8      	it	lt
 80116ea:	9204      	strlt	r2, [sp, #16]
 80116ec:	7823      	ldrb	r3, [r4, #0]
 80116ee:	2b2e      	cmp	r3, #46	; 0x2e
 80116f0:	d10c      	bne.n	801170c <_svfiprintf_r+0x130>
 80116f2:	7863      	ldrb	r3, [r4, #1]
 80116f4:	2b2a      	cmp	r3, #42	; 0x2a
 80116f6:	d135      	bne.n	8011764 <_svfiprintf_r+0x188>
 80116f8:	9b03      	ldr	r3, [sp, #12]
 80116fa:	1d1a      	adds	r2, r3, #4
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	9203      	str	r2, [sp, #12]
 8011700:	2b00      	cmp	r3, #0
 8011702:	bfb8      	it	lt
 8011704:	f04f 33ff 	movlt.w	r3, #4294967295
 8011708:	3402      	adds	r4, #2
 801170a:	9305      	str	r3, [sp, #20]
 801170c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80117d8 <_svfiprintf_r+0x1fc>
 8011710:	7821      	ldrb	r1, [r4, #0]
 8011712:	2203      	movs	r2, #3
 8011714:	4650      	mov	r0, sl
 8011716:	f7ee fd6b 	bl	80001f0 <memchr>
 801171a:	b140      	cbz	r0, 801172e <_svfiprintf_r+0x152>
 801171c:	2340      	movs	r3, #64	; 0x40
 801171e:	eba0 000a 	sub.w	r0, r0, sl
 8011722:	fa03 f000 	lsl.w	r0, r3, r0
 8011726:	9b04      	ldr	r3, [sp, #16]
 8011728:	4303      	orrs	r3, r0
 801172a:	3401      	adds	r4, #1
 801172c:	9304      	str	r3, [sp, #16]
 801172e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011732:	4826      	ldr	r0, [pc, #152]	; (80117cc <_svfiprintf_r+0x1f0>)
 8011734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011738:	2206      	movs	r2, #6
 801173a:	f7ee fd59 	bl	80001f0 <memchr>
 801173e:	2800      	cmp	r0, #0
 8011740:	d038      	beq.n	80117b4 <_svfiprintf_r+0x1d8>
 8011742:	4b23      	ldr	r3, [pc, #140]	; (80117d0 <_svfiprintf_r+0x1f4>)
 8011744:	bb1b      	cbnz	r3, 801178e <_svfiprintf_r+0x1b2>
 8011746:	9b03      	ldr	r3, [sp, #12]
 8011748:	3307      	adds	r3, #7
 801174a:	f023 0307 	bic.w	r3, r3, #7
 801174e:	3308      	adds	r3, #8
 8011750:	9303      	str	r3, [sp, #12]
 8011752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011754:	4433      	add	r3, r6
 8011756:	9309      	str	r3, [sp, #36]	; 0x24
 8011758:	e767      	b.n	801162a <_svfiprintf_r+0x4e>
 801175a:	fb0c 3202 	mla	r2, ip, r2, r3
 801175e:	460c      	mov	r4, r1
 8011760:	2001      	movs	r0, #1
 8011762:	e7a5      	b.n	80116b0 <_svfiprintf_r+0xd4>
 8011764:	2300      	movs	r3, #0
 8011766:	3401      	adds	r4, #1
 8011768:	9305      	str	r3, [sp, #20]
 801176a:	4619      	mov	r1, r3
 801176c:	f04f 0c0a 	mov.w	ip, #10
 8011770:	4620      	mov	r0, r4
 8011772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011776:	3a30      	subs	r2, #48	; 0x30
 8011778:	2a09      	cmp	r2, #9
 801177a:	d903      	bls.n	8011784 <_svfiprintf_r+0x1a8>
 801177c:	2b00      	cmp	r3, #0
 801177e:	d0c5      	beq.n	801170c <_svfiprintf_r+0x130>
 8011780:	9105      	str	r1, [sp, #20]
 8011782:	e7c3      	b.n	801170c <_svfiprintf_r+0x130>
 8011784:	fb0c 2101 	mla	r1, ip, r1, r2
 8011788:	4604      	mov	r4, r0
 801178a:	2301      	movs	r3, #1
 801178c:	e7f0      	b.n	8011770 <_svfiprintf_r+0x194>
 801178e:	ab03      	add	r3, sp, #12
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	462a      	mov	r2, r5
 8011794:	4b0f      	ldr	r3, [pc, #60]	; (80117d4 <_svfiprintf_r+0x1f8>)
 8011796:	a904      	add	r1, sp, #16
 8011798:	4638      	mov	r0, r7
 801179a:	f7fc fda3 	bl	800e2e4 <_printf_float>
 801179e:	1c42      	adds	r2, r0, #1
 80117a0:	4606      	mov	r6, r0
 80117a2:	d1d6      	bne.n	8011752 <_svfiprintf_r+0x176>
 80117a4:	89ab      	ldrh	r3, [r5, #12]
 80117a6:	065b      	lsls	r3, r3, #25
 80117a8:	f53f af2c 	bmi.w	8011604 <_svfiprintf_r+0x28>
 80117ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117ae:	b01d      	add	sp, #116	; 0x74
 80117b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b4:	ab03      	add	r3, sp, #12
 80117b6:	9300      	str	r3, [sp, #0]
 80117b8:	462a      	mov	r2, r5
 80117ba:	4b06      	ldr	r3, [pc, #24]	; (80117d4 <_svfiprintf_r+0x1f8>)
 80117bc:	a904      	add	r1, sp, #16
 80117be:	4638      	mov	r0, r7
 80117c0:	f7fd f834 	bl	800e82c <_printf_i>
 80117c4:	e7eb      	b.n	801179e <_svfiprintf_r+0x1c2>
 80117c6:	bf00      	nop
 80117c8:	08015ba4 	.word	0x08015ba4
 80117cc:	08015bae 	.word	0x08015bae
 80117d0:	0800e2e5 	.word	0x0800e2e5
 80117d4:	08011527 	.word	0x08011527
 80117d8:	08015baa 	.word	0x08015baa
 80117dc:	00000000 	.word	0x00000000

080117e0 <nan>:
 80117e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80117e8 <nan+0x8>
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop
 80117e8:	00000000 	.word	0x00000000
 80117ec:	7ff80000 	.word	0x7ff80000

080117f0 <__ascii_wctomb>:
 80117f0:	b149      	cbz	r1, 8011806 <__ascii_wctomb+0x16>
 80117f2:	2aff      	cmp	r2, #255	; 0xff
 80117f4:	bf85      	ittet	hi
 80117f6:	238a      	movhi	r3, #138	; 0x8a
 80117f8:	6003      	strhi	r3, [r0, #0]
 80117fa:	700a      	strbls	r2, [r1, #0]
 80117fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8011800:	bf98      	it	ls
 8011802:	2001      	movls	r0, #1
 8011804:	4770      	bx	lr
 8011806:	4608      	mov	r0, r1
 8011808:	4770      	bx	lr
	...

0801180c <__assert_func>:
 801180c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801180e:	4614      	mov	r4, r2
 8011810:	461a      	mov	r2, r3
 8011812:	4b09      	ldr	r3, [pc, #36]	; (8011838 <__assert_func+0x2c>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	4605      	mov	r5, r0
 8011818:	68d8      	ldr	r0, [r3, #12]
 801181a:	b14c      	cbz	r4, 8011830 <__assert_func+0x24>
 801181c:	4b07      	ldr	r3, [pc, #28]	; (801183c <__assert_func+0x30>)
 801181e:	9100      	str	r1, [sp, #0]
 8011820:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011824:	4906      	ldr	r1, [pc, #24]	; (8011840 <__assert_func+0x34>)
 8011826:	462b      	mov	r3, r5
 8011828:	f000 f80e 	bl	8011848 <fiprintf>
 801182c:	f000 fa84 	bl	8011d38 <abort>
 8011830:	4b04      	ldr	r3, [pc, #16]	; (8011844 <__assert_func+0x38>)
 8011832:	461c      	mov	r4, r3
 8011834:	e7f3      	b.n	801181e <__assert_func+0x12>
 8011836:	bf00      	nop
 8011838:	20000034 	.word	0x20000034
 801183c:	08015bb5 	.word	0x08015bb5
 8011840:	08015bc2 	.word	0x08015bc2
 8011844:	08015bf0 	.word	0x08015bf0

08011848 <fiprintf>:
 8011848:	b40e      	push	{r1, r2, r3}
 801184a:	b503      	push	{r0, r1, lr}
 801184c:	4601      	mov	r1, r0
 801184e:	ab03      	add	r3, sp, #12
 8011850:	4805      	ldr	r0, [pc, #20]	; (8011868 <fiprintf+0x20>)
 8011852:	f853 2b04 	ldr.w	r2, [r3], #4
 8011856:	6800      	ldr	r0, [r0, #0]
 8011858:	9301      	str	r3, [sp, #4]
 801185a:	f000 f87d 	bl	8011958 <_vfiprintf_r>
 801185e:	b002      	add	sp, #8
 8011860:	f85d eb04 	ldr.w	lr, [sp], #4
 8011864:	b003      	add	sp, #12
 8011866:	4770      	bx	lr
 8011868:	20000034 	.word	0x20000034

0801186c <__retarget_lock_init_recursive>:
 801186c:	4770      	bx	lr

0801186e <__retarget_lock_acquire_recursive>:
 801186e:	4770      	bx	lr

08011870 <__retarget_lock_release_recursive>:
 8011870:	4770      	bx	lr

08011872 <memmove>:
 8011872:	4288      	cmp	r0, r1
 8011874:	b510      	push	{r4, lr}
 8011876:	eb01 0402 	add.w	r4, r1, r2
 801187a:	d902      	bls.n	8011882 <memmove+0x10>
 801187c:	4284      	cmp	r4, r0
 801187e:	4623      	mov	r3, r4
 8011880:	d807      	bhi.n	8011892 <memmove+0x20>
 8011882:	1e43      	subs	r3, r0, #1
 8011884:	42a1      	cmp	r1, r4
 8011886:	d008      	beq.n	801189a <memmove+0x28>
 8011888:	f811 2b01 	ldrb.w	r2, [r1], #1
 801188c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011890:	e7f8      	b.n	8011884 <memmove+0x12>
 8011892:	4402      	add	r2, r0
 8011894:	4601      	mov	r1, r0
 8011896:	428a      	cmp	r2, r1
 8011898:	d100      	bne.n	801189c <memmove+0x2a>
 801189a:	bd10      	pop	{r4, pc}
 801189c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80118a4:	e7f7      	b.n	8011896 <memmove+0x24>

080118a6 <_realloc_r>:
 80118a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118aa:	4680      	mov	r8, r0
 80118ac:	4614      	mov	r4, r2
 80118ae:	460e      	mov	r6, r1
 80118b0:	b921      	cbnz	r1, 80118bc <_realloc_r+0x16>
 80118b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118b6:	4611      	mov	r1, r2
 80118b8:	f7fc bc00 	b.w	800e0bc <_malloc_r>
 80118bc:	b92a      	cbnz	r2, 80118ca <_realloc_r+0x24>
 80118be:	f7fc fb91 	bl	800dfe4 <_free_r>
 80118c2:	4625      	mov	r5, r4
 80118c4:	4628      	mov	r0, r5
 80118c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ca:	f000 fc59 	bl	8012180 <_malloc_usable_size_r>
 80118ce:	4284      	cmp	r4, r0
 80118d0:	4607      	mov	r7, r0
 80118d2:	d802      	bhi.n	80118da <_realloc_r+0x34>
 80118d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80118d8:	d812      	bhi.n	8011900 <_realloc_r+0x5a>
 80118da:	4621      	mov	r1, r4
 80118dc:	4640      	mov	r0, r8
 80118de:	f7fc fbed 	bl	800e0bc <_malloc_r>
 80118e2:	4605      	mov	r5, r0
 80118e4:	2800      	cmp	r0, #0
 80118e6:	d0ed      	beq.n	80118c4 <_realloc_r+0x1e>
 80118e8:	42bc      	cmp	r4, r7
 80118ea:	4622      	mov	r2, r4
 80118ec:	4631      	mov	r1, r6
 80118ee:	bf28      	it	cs
 80118f0:	463a      	movcs	r2, r7
 80118f2:	f7fc fb61 	bl	800dfb8 <memcpy>
 80118f6:	4631      	mov	r1, r6
 80118f8:	4640      	mov	r0, r8
 80118fa:	f7fc fb73 	bl	800dfe4 <_free_r>
 80118fe:	e7e1      	b.n	80118c4 <_realloc_r+0x1e>
 8011900:	4635      	mov	r5, r6
 8011902:	e7df      	b.n	80118c4 <_realloc_r+0x1e>

08011904 <__sfputc_r>:
 8011904:	6893      	ldr	r3, [r2, #8]
 8011906:	3b01      	subs	r3, #1
 8011908:	2b00      	cmp	r3, #0
 801190a:	b410      	push	{r4}
 801190c:	6093      	str	r3, [r2, #8]
 801190e:	da08      	bge.n	8011922 <__sfputc_r+0x1e>
 8011910:	6994      	ldr	r4, [r2, #24]
 8011912:	42a3      	cmp	r3, r4
 8011914:	db01      	blt.n	801191a <__sfputc_r+0x16>
 8011916:	290a      	cmp	r1, #10
 8011918:	d103      	bne.n	8011922 <__sfputc_r+0x1e>
 801191a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801191e:	f000 b94b 	b.w	8011bb8 <__swbuf_r>
 8011922:	6813      	ldr	r3, [r2, #0]
 8011924:	1c58      	adds	r0, r3, #1
 8011926:	6010      	str	r0, [r2, #0]
 8011928:	7019      	strb	r1, [r3, #0]
 801192a:	4608      	mov	r0, r1
 801192c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011930:	4770      	bx	lr

08011932 <__sfputs_r>:
 8011932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011934:	4606      	mov	r6, r0
 8011936:	460f      	mov	r7, r1
 8011938:	4614      	mov	r4, r2
 801193a:	18d5      	adds	r5, r2, r3
 801193c:	42ac      	cmp	r4, r5
 801193e:	d101      	bne.n	8011944 <__sfputs_r+0x12>
 8011940:	2000      	movs	r0, #0
 8011942:	e007      	b.n	8011954 <__sfputs_r+0x22>
 8011944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011948:	463a      	mov	r2, r7
 801194a:	4630      	mov	r0, r6
 801194c:	f7ff ffda 	bl	8011904 <__sfputc_r>
 8011950:	1c43      	adds	r3, r0, #1
 8011952:	d1f3      	bne.n	801193c <__sfputs_r+0xa>
 8011954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011958 <_vfiprintf_r>:
 8011958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801195c:	460d      	mov	r5, r1
 801195e:	b09d      	sub	sp, #116	; 0x74
 8011960:	4614      	mov	r4, r2
 8011962:	4698      	mov	r8, r3
 8011964:	4606      	mov	r6, r0
 8011966:	b118      	cbz	r0, 8011970 <_vfiprintf_r+0x18>
 8011968:	6983      	ldr	r3, [r0, #24]
 801196a:	b90b      	cbnz	r3, 8011970 <_vfiprintf_r+0x18>
 801196c:	f000 fb06 	bl	8011f7c <__sinit>
 8011970:	4b89      	ldr	r3, [pc, #548]	; (8011b98 <_vfiprintf_r+0x240>)
 8011972:	429d      	cmp	r5, r3
 8011974:	d11b      	bne.n	80119ae <_vfiprintf_r+0x56>
 8011976:	6875      	ldr	r5, [r6, #4]
 8011978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801197a:	07d9      	lsls	r1, r3, #31
 801197c:	d405      	bmi.n	801198a <_vfiprintf_r+0x32>
 801197e:	89ab      	ldrh	r3, [r5, #12]
 8011980:	059a      	lsls	r2, r3, #22
 8011982:	d402      	bmi.n	801198a <_vfiprintf_r+0x32>
 8011984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011986:	f7ff ff72 	bl	801186e <__retarget_lock_acquire_recursive>
 801198a:	89ab      	ldrh	r3, [r5, #12]
 801198c:	071b      	lsls	r3, r3, #28
 801198e:	d501      	bpl.n	8011994 <_vfiprintf_r+0x3c>
 8011990:	692b      	ldr	r3, [r5, #16]
 8011992:	b9eb      	cbnz	r3, 80119d0 <_vfiprintf_r+0x78>
 8011994:	4629      	mov	r1, r5
 8011996:	4630      	mov	r0, r6
 8011998:	f000 f960 	bl	8011c5c <__swsetup_r>
 801199c:	b1c0      	cbz	r0, 80119d0 <_vfiprintf_r+0x78>
 801199e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119a0:	07dc      	lsls	r4, r3, #31
 80119a2:	d50e      	bpl.n	80119c2 <_vfiprintf_r+0x6a>
 80119a4:	f04f 30ff 	mov.w	r0, #4294967295
 80119a8:	b01d      	add	sp, #116	; 0x74
 80119aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ae:	4b7b      	ldr	r3, [pc, #492]	; (8011b9c <_vfiprintf_r+0x244>)
 80119b0:	429d      	cmp	r5, r3
 80119b2:	d101      	bne.n	80119b8 <_vfiprintf_r+0x60>
 80119b4:	68b5      	ldr	r5, [r6, #8]
 80119b6:	e7df      	b.n	8011978 <_vfiprintf_r+0x20>
 80119b8:	4b79      	ldr	r3, [pc, #484]	; (8011ba0 <_vfiprintf_r+0x248>)
 80119ba:	429d      	cmp	r5, r3
 80119bc:	bf08      	it	eq
 80119be:	68f5      	ldreq	r5, [r6, #12]
 80119c0:	e7da      	b.n	8011978 <_vfiprintf_r+0x20>
 80119c2:	89ab      	ldrh	r3, [r5, #12]
 80119c4:	0598      	lsls	r0, r3, #22
 80119c6:	d4ed      	bmi.n	80119a4 <_vfiprintf_r+0x4c>
 80119c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119ca:	f7ff ff51 	bl	8011870 <__retarget_lock_release_recursive>
 80119ce:	e7e9      	b.n	80119a4 <_vfiprintf_r+0x4c>
 80119d0:	2300      	movs	r3, #0
 80119d2:	9309      	str	r3, [sp, #36]	; 0x24
 80119d4:	2320      	movs	r3, #32
 80119d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119da:	f8cd 800c 	str.w	r8, [sp, #12]
 80119de:	2330      	movs	r3, #48	; 0x30
 80119e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011ba4 <_vfiprintf_r+0x24c>
 80119e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119e8:	f04f 0901 	mov.w	r9, #1
 80119ec:	4623      	mov	r3, r4
 80119ee:	469a      	mov	sl, r3
 80119f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119f4:	b10a      	cbz	r2, 80119fa <_vfiprintf_r+0xa2>
 80119f6:	2a25      	cmp	r2, #37	; 0x25
 80119f8:	d1f9      	bne.n	80119ee <_vfiprintf_r+0x96>
 80119fa:	ebba 0b04 	subs.w	fp, sl, r4
 80119fe:	d00b      	beq.n	8011a18 <_vfiprintf_r+0xc0>
 8011a00:	465b      	mov	r3, fp
 8011a02:	4622      	mov	r2, r4
 8011a04:	4629      	mov	r1, r5
 8011a06:	4630      	mov	r0, r6
 8011a08:	f7ff ff93 	bl	8011932 <__sfputs_r>
 8011a0c:	3001      	adds	r0, #1
 8011a0e:	f000 80aa 	beq.w	8011b66 <_vfiprintf_r+0x20e>
 8011a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a14:	445a      	add	r2, fp
 8011a16:	9209      	str	r2, [sp, #36]	; 0x24
 8011a18:	f89a 3000 	ldrb.w	r3, [sl]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f000 80a2 	beq.w	8011b66 <_vfiprintf_r+0x20e>
 8011a22:	2300      	movs	r3, #0
 8011a24:	f04f 32ff 	mov.w	r2, #4294967295
 8011a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a2c:	f10a 0a01 	add.w	sl, sl, #1
 8011a30:	9304      	str	r3, [sp, #16]
 8011a32:	9307      	str	r3, [sp, #28]
 8011a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a38:	931a      	str	r3, [sp, #104]	; 0x68
 8011a3a:	4654      	mov	r4, sl
 8011a3c:	2205      	movs	r2, #5
 8011a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a42:	4858      	ldr	r0, [pc, #352]	; (8011ba4 <_vfiprintf_r+0x24c>)
 8011a44:	f7ee fbd4 	bl	80001f0 <memchr>
 8011a48:	9a04      	ldr	r2, [sp, #16]
 8011a4a:	b9d8      	cbnz	r0, 8011a84 <_vfiprintf_r+0x12c>
 8011a4c:	06d1      	lsls	r1, r2, #27
 8011a4e:	bf44      	itt	mi
 8011a50:	2320      	movmi	r3, #32
 8011a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a56:	0713      	lsls	r3, r2, #28
 8011a58:	bf44      	itt	mi
 8011a5a:	232b      	movmi	r3, #43	; 0x2b
 8011a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a60:	f89a 3000 	ldrb.w	r3, [sl]
 8011a64:	2b2a      	cmp	r3, #42	; 0x2a
 8011a66:	d015      	beq.n	8011a94 <_vfiprintf_r+0x13c>
 8011a68:	9a07      	ldr	r2, [sp, #28]
 8011a6a:	4654      	mov	r4, sl
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	f04f 0c0a 	mov.w	ip, #10
 8011a72:	4621      	mov	r1, r4
 8011a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a78:	3b30      	subs	r3, #48	; 0x30
 8011a7a:	2b09      	cmp	r3, #9
 8011a7c:	d94e      	bls.n	8011b1c <_vfiprintf_r+0x1c4>
 8011a7e:	b1b0      	cbz	r0, 8011aae <_vfiprintf_r+0x156>
 8011a80:	9207      	str	r2, [sp, #28]
 8011a82:	e014      	b.n	8011aae <_vfiprintf_r+0x156>
 8011a84:	eba0 0308 	sub.w	r3, r0, r8
 8011a88:	fa09 f303 	lsl.w	r3, r9, r3
 8011a8c:	4313      	orrs	r3, r2
 8011a8e:	9304      	str	r3, [sp, #16]
 8011a90:	46a2      	mov	sl, r4
 8011a92:	e7d2      	b.n	8011a3a <_vfiprintf_r+0xe2>
 8011a94:	9b03      	ldr	r3, [sp, #12]
 8011a96:	1d19      	adds	r1, r3, #4
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	9103      	str	r1, [sp, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	bfbb      	ittet	lt
 8011aa0:	425b      	neglt	r3, r3
 8011aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8011aa6:	9307      	strge	r3, [sp, #28]
 8011aa8:	9307      	strlt	r3, [sp, #28]
 8011aaa:	bfb8      	it	lt
 8011aac:	9204      	strlt	r2, [sp, #16]
 8011aae:	7823      	ldrb	r3, [r4, #0]
 8011ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8011ab2:	d10c      	bne.n	8011ace <_vfiprintf_r+0x176>
 8011ab4:	7863      	ldrb	r3, [r4, #1]
 8011ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ab8:	d135      	bne.n	8011b26 <_vfiprintf_r+0x1ce>
 8011aba:	9b03      	ldr	r3, [sp, #12]
 8011abc:	1d1a      	adds	r2, r3, #4
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	9203      	str	r2, [sp, #12]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	bfb8      	it	lt
 8011ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011aca:	3402      	adds	r4, #2
 8011acc:	9305      	str	r3, [sp, #20]
 8011ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011bb4 <_vfiprintf_r+0x25c>
 8011ad2:	7821      	ldrb	r1, [r4, #0]
 8011ad4:	2203      	movs	r2, #3
 8011ad6:	4650      	mov	r0, sl
 8011ad8:	f7ee fb8a 	bl	80001f0 <memchr>
 8011adc:	b140      	cbz	r0, 8011af0 <_vfiprintf_r+0x198>
 8011ade:	2340      	movs	r3, #64	; 0x40
 8011ae0:	eba0 000a 	sub.w	r0, r0, sl
 8011ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8011ae8:	9b04      	ldr	r3, [sp, #16]
 8011aea:	4303      	orrs	r3, r0
 8011aec:	3401      	adds	r4, #1
 8011aee:	9304      	str	r3, [sp, #16]
 8011af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011af4:	482c      	ldr	r0, [pc, #176]	; (8011ba8 <_vfiprintf_r+0x250>)
 8011af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011afa:	2206      	movs	r2, #6
 8011afc:	f7ee fb78 	bl	80001f0 <memchr>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d03f      	beq.n	8011b84 <_vfiprintf_r+0x22c>
 8011b04:	4b29      	ldr	r3, [pc, #164]	; (8011bac <_vfiprintf_r+0x254>)
 8011b06:	bb1b      	cbnz	r3, 8011b50 <_vfiprintf_r+0x1f8>
 8011b08:	9b03      	ldr	r3, [sp, #12]
 8011b0a:	3307      	adds	r3, #7
 8011b0c:	f023 0307 	bic.w	r3, r3, #7
 8011b10:	3308      	adds	r3, #8
 8011b12:	9303      	str	r3, [sp, #12]
 8011b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b16:	443b      	add	r3, r7
 8011b18:	9309      	str	r3, [sp, #36]	; 0x24
 8011b1a:	e767      	b.n	80119ec <_vfiprintf_r+0x94>
 8011b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b20:	460c      	mov	r4, r1
 8011b22:	2001      	movs	r0, #1
 8011b24:	e7a5      	b.n	8011a72 <_vfiprintf_r+0x11a>
 8011b26:	2300      	movs	r3, #0
 8011b28:	3401      	adds	r4, #1
 8011b2a:	9305      	str	r3, [sp, #20]
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	f04f 0c0a 	mov.w	ip, #10
 8011b32:	4620      	mov	r0, r4
 8011b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b38:	3a30      	subs	r2, #48	; 0x30
 8011b3a:	2a09      	cmp	r2, #9
 8011b3c:	d903      	bls.n	8011b46 <_vfiprintf_r+0x1ee>
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d0c5      	beq.n	8011ace <_vfiprintf_r+0x176>
 8011b42:	9105      	str	r1, [sp, #20]
 8011b44:	e7c3      	b.n	8011ace <_vfiprintf_r+0x176>
 8011b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	e7f0      	b.n	8011b32 <_vfiprintf_r+0x1da>
 8011b50:	ab03      	add	r3, sp, #12
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	462a      	mov	r2, r5
 8011b56:	4b16      	ldr	r3, [pc, #88]	; (8011bb0 <_vfiprintf_r+0x258>)
 8011b58:	a904      	add	r1, sp, #16
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f7fc fbc2 	bl	800e2e4 <_printf_float>
 8011b60:	4607      	mov	r7, r0
 8011b62:	1c78      	adds	r0, r7, #1
 8011b64:	d1d6      	bne.n	8011b14 <_vfiprintf_r+0x1bc>
 8011b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b68:	07d9      	lsls	r1, r3, #31
 8011b6a:	d405      	bmi.n	8011b78 <_vfiprintf_r+0x220>
 8011b6c:	89ab      	ldrh	r3, [r5, #12]
 8011b6e:	059a      	lsls	r2, r3, #22
 8011b70:	d402      	bmi.n	8011b78 <_vfiprintf_r+0x220>
 8011b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b74:	f7ff fe7c 	bl	8011870 <__retarget_lock_release_recursive>
 8011b78:	89ab      	ldrh	r3, [r5, #12]
 8011b7a:	065b      	lsls	r3, r3, #25
 8011b7c:	f53f af12 	bmi.w	80119a4 <_vfiprintf_r+0x4c>
 8011b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b82:	e711      	b.n	80119a8 <_vfiprintf_r+0x50>
 8011b84:	ab03      	add	r3, sp, #12
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	462a      	mov	r2, r5
 8011b8a:	4b09      	ldr	r3, [pc, #36]	; (8011bb0 <_vfiprintf_r+0x258>)
 8011b8c:	a904      	add	r1, sp, #16
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f7fc fe4c 	bl	800e82c <_printf_i>
 8011b94:	e7e4      	b.n	8011b60 <_vfiprintf_r+0x208>
 8011b96:	bf00      	nop
 8011b98:	08015d14 	.word	0x08015d14
 8011b9c:	08015d34 	.word	0x08015d34
 8011ba0:	08015cf4 	.word	0x08015cf4
 8011ba4:	08015ba4 	.word	0x08015ba4
 8011ba8:	08015bae 	.word	0x08015bae
 8011bac:	0800e2e5 	.word	0x0800e2e5
 8011bb0:	08011933 	.word	0x08011933
 8011bb4:	08015baa 	.word	0x08015baa

08011bb8 <__swbuf_r>:
 8011bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bba:	460e      	mov	r6, r1
 8011bbc:	4614      	mov	r4, r2
 8011bbe:	4605      	mov	r5, r0
 8011bc0:	b118      	cbz	r0, 8011bca <__swbuf_r+0x12>
 8011bc2:	6983      	ldr	r3, [r0, #24]
 8011bc4:	b90b      	cbnz	r3, 8011bca <__swbuf_r+0x12>
 8011bc6:	f000 f9d9 	bl	8011f7c <__sinit>
 8011bca:	4b21      	ldr	r3, [pc, #132]	; (8011c50 <__swbuf_r+0x98>)
 8011bcc:	429c      	cmp	r4, r3
 8011bce:	d12b      	bne.n	8011c28 <__swbuf_r+0x70>
 8011bd0:	686c      	ldr	r4, [r5, #4]
 8011bd2:	69a3      	ldr	r3, [r4, #24]
 8011bd4:	60a3      	str	r3, [r4, #8]
 8011bd6:	89a3      	ldrh	r3, [r4, #12]
 8011bd8:	071a      	lsls	r2, r3, #28
 8011bda:	d52f      	bpl.n	8011c3c <__swbuf_r+0x84>
 8011bdc:	6923      	ldr	r3, [r4, #16]
 8011bde:	b36b      	cbz	r3, 8011c3c <__swbuf_r+0x84>
 8011be0:	6923      	ldr	r3, [r4, #16]
 8011be2:	6820      	ldr	r0, [r4, #0]
 8011be4:	1ac0      	subs	r0, r0, r3
 8011be6:	6963      	ldr	r3, [r4, #20]
 8011be8:	b2f6      	uxtb	r6, r6
 8011bea:	4283      	cmp	r3, r0
 8011bec:	4637      	mov	r7, r6
 8011bee:	dc04      	bgt.n	8011bfa <__swbuf_r+0x42>
 8011bf0:	4621      	mov	r1, r4
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	f000 f92e 	bl	8011e54 <_fflush_r>
 8011bf8:	bb30      	cbnz	r0, 8011c48 <__swbuf_r+0x90>
 8011bfa:	68a3      	ldr	r3, [r4, #8]
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	60a3      	str	r3, [r4, #8]
 8011c00:	6823      	ldr	r3, [r4, #0]
 8011c02:	1c5a      	adds	r2, r3, #1
 8011c04:	6022      	str	r2, [r4, #0]
 8011c06:	701e      	strb	r6, [r3, #0]
 8011c08:	6963      	ldr	r3, [r4, #20]
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	4283      	cmp	r3, r0
 8011c0e:	d004      	beq.n	8011c1a <__swbuf_r+0x62>
 8011c10:	89a3      	ldrh	r3, [r4, #12]
 8011c12:	07db      	lsls	r3, r3, #31
 8011c14:	d506      	bpl.n	8011c24 <__swbuf_r+0x6c>
 8011c16:	2e0a      	cmp	r6, #10
 8011c18:	d104      	bne.n	8011c24 <__swbuf_r+0x6c>
 8011c1a:	4621      	mov	r1, r4
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	f000 f919 	bl	8011e54 <_fflush_r>
 8011c22:	b988      	cbnz	r0, 8011c48 <__swbuf_r+0x90>
 8011c24:	4638      	mov	r0, r7
 8011c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c28:	4b0a      	ldr	r3, [pc, #40]	; (8011c54 <__swbuf_r+0x9c>)
 8011c2a:	429c      	cmp	r4, r3
 8011c2c:	d101      	bne.n	8011c32 <__swbuf_r+0x7a>
 8011c2e:	68ac      	ldr	r4, [r5, #8]
 8011c30:	e7cf      	b.n	8011bd2 <__swbuf_r+0x1a>
 8011c32:	4b09      	ldr	r3, [pc, #36]	; (8011c58 <__swbuf_r+0xa0>)
 8011c34:	429c      	cmp	r4, r3
 8011c36:	bf08      	it	eq
 8011c38:	68ec      	ldreq	r4, [r5, #12]
 8011c3a:	e7ca      	b.n	8011bd2 <__swbuf_r+0x1a>
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f000 f80c 	bl	8011c5c <__swsetup_r>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	d0cb      	beq.n	8011be0 <__swbuf_r+0x28>
 8011c48:	f04f 37ff 	mov.w	r7, #4294967295
 8011c4c:	e7ea      	b.n	8011c24 <__swbuf_r+0x6c>
 8011c4e:	bf00      	nop
 8011c50:	08015d14 	.word	0x08015d14
 8011c54:	08015d34 	.word	0x08015d34
 8011c58:	08015cf4 	.word	0x08015cf4

08011c5c <__swsetup_r>:
 8011c5c:	4b32      	ldr	r3, [pc, #200]	; (8011d28 <__swsetup_r+0xcc>)
 8011c5e:	b570      	push	{r4, r5, r6, lr}
 8011c60:	681d      	ldr	r5, [r3, #0]
 8011c62:	4606      	mov	r6, r0
 8011c64:	460c      	mov	r4, r1
 8011c66:	b125      	cbz	r5, 8011c72 <__swsetup_r+0x16>
 8011c68:	69ab      	ldr	r3, [r5, #24]
 8011c6a:	b913      	cbnz	r3, 8011c72 <__swsetup_r+0x16>
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	f000 f985 	bl	8011f7c <__sinit>
 8011c72:	4b2e      	ldr	r3, [pc, #184]	; (8011d2c <__swsetup_r+0xd0>)
 8011c74:	429c      	cmp	r4, r3
 8011c76:	d10f      	bne.n	8011c98 <__swsetup_r+0x3c>
 8011c78:	686c      	ldr	r4, [r5, #4]
 8011c7a:	89a3      	ldrh	r3, [r4, #12]
 8011c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c80:	0719      	lsls	r1, r3, #28
 8011c82:	d42c      	bmi.n	8011cde <__swsetup_r+0x82>
 8011c84:	06dd      	lsls	r5, r3, #27
 8011c86:	d411      	bmi.n	8011cac <__swsetup_r+0x50>
 8011c88:	2309      	movs	r3, #9
 8011c8a:	6033      	str	r3, [r6, #0]
 8011c8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c90:	81a3      	strh	r3, [r4, #12]
 8011c92:	f04f 30ff 	mov.w	r0, #4294967295
 8011c96:	e03e      	b.n	8011d16 <__swsetup_r+0xba>
 8011c98:	4b25      	ldr	r3, [pc, #148]	; (8011d30 <__swsetup_r+0xd4>)
 8011c9a:	429c      	cmp	r4, r3
 8011c9c:	d101      	bne.n	8011ca2 <__swsetup_r+0x46>
 8011c9e:	68ac      	ldr	r4, [r5, #8]
 8011ca0:	e7eb      	b.n	8011c7a <__swsetup_r+0x1e>
 8011ca2:	4b24      	ldr	r3, [pc, #144]	; (8011d34 <__swsetup_r+0xd8>)
 8011ca4:	429c      	cmp	r4, r3
 8011ca6:	bf08      	it	eq
 8011ca8:	68ec      	ldreq	r4, [r5, #12]
 8011caa:	e7e6      	b.n	8011c7a <__swsetup_r+0x1e>
 8011cac:	0758      	lsls	r0, r3, #29
 8011cae:	d512      	bpl.n	8011cd6 <__swsetup_r+0x7a>
 8011cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cb2:	b141      	cbz	r1, 8011cc6 <__swsetup_r+0x6a>
 8011cb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cb8:	4299      	cmp	r1, r3
 8011cba:	d002      	beq.n	8011cc2 <__swsetup_r+0x66>
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f7fc f991 	bl	800dfe4 <_free_r>
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	6363      	str	r3, [r4, #52]	; 0x34
 8011cc6:	89a3      	ldrh	r3, [r4, #12]
 8011cc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011ccc:	81a3      	strh	r3, [r4, #12]
 8011cce:	2300      	movs	r3, #0
 8011cd0:	6063      	str	r3, [r4, #4]
 8011cd2:	6923      	ldr	r3, [r4, #16]
 8011cd4:	6023      	str	r3, [r4, #0]
 8011cd6:	89a3      	ldrh	r3, [r4, #12]
 8011cd8:	f043 0308 	orr.w	r3, r3, #8
 8011cdc:	81a3      	strh	r3, [r4, #12]
 8011cde:	6923      	ldr	r3, [r4, #16]
 8011ce0:	b94b      	cbnz	r3, 8011cf6 <__swsetup_r+0x9a>
 8011ce2:	89a3      	ldrh	r3, [r4, #12]
 8011ce4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cec:	d003      	beq.n	8011cf6 <__swsetup_r+0x9a>
 8011cee:	4621      	mov	r1, r4
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	f000 fa05 	bl	8012100 <__smakebuf_r>
 8011cf6:	89a0      	ldrh	r0, [r4, #12]
 8011cf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cfc:	f010 0301 	ands.w	r3, r0, #1
 8011d00:	d00a      	beq.n	8011d18 <__swsetup_r+0xbc>
 8011d02:	2300      	movs	r3, #0
 8011d04:	60a3      	str	r3, [r4, #8]
 8011d06:	6963      	ldr	r3, [r4, #20]
 8011d08:	425b      	negs	r3, r3
 8011d0a:	61a3      	str	r3, [r4, #24]
 8011d0c:	6923      	ldr	r3, [r4, #16]
 8011d0e:	b943      	cbnz	r3, 8011d22 <__swsetup_r+0xc6>
 8011d10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d14:	d1ba      	bne.n	8011c8c <__swsetup_r+0x30>
 8011d16:	bd70      	pop	{r4, r5, r6, pc}
 8011d18:	0781      	lsls	r1, r0, #30
 8011d1a:	bf58      	it	pl
 8011d1c:	6963      	ldrpl	r3, [r4, #20]
 8011d1e:	60a3      	str	r3, [r4, #8]
 8011d20:	e7f4      	b.n	8011d0c <__swsetup_r+0xb0>
 8011d22:	2000      	movs	r0, #0
 8011d24:	e7f7      	b.n	8011d16 <__swsetup_r+0xba>
 8011d26:	bf00      	nop
 8011d28:	20000034 	.word	0x20000034
 8011d2c:	08015d14 	.word	0x08015d14
 8011d30:	08015d34 	.word	0x08015d34
 8011d34:	08015cf4 	.word	0x08015cf4

08011d38 <abort>:
 8011d38:	b508      	push	{r3, lr}
 8011d3a:	2006      	movs	r0, #6
 8011d3c:	f000 fa50 	bl	80121e0 <raise>
 8011d40:	2001      	movs	r0, #1
 8011d42:	f7f3 ffb9 	bl	8005cb8 <_exit>
	...

08011d48 <__sflush_r>:
 8011d48:	898a      	ldrh	r2, [r1, #12]
 8011d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4e:	4605      	mov	r5, r0
 8011d50:	0710      	lsls	r0, r2, #28
 8011d52:	460c      	mov	r4, r1
 8011d54:	d458      	bmi.n	8011e08 <__sflush_r+0xc0>
 8011d56:	684b      	ldr	r3, [r1, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	dc05      	bgt.n	8011d68 <__sflush_r+0x20>
 8011d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	dc02      	bgt.n	8011d68 <__sflush_r+0x20>
 8011d62:	2000      	movs	r0, #0
 8011d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d6a:	2e00      	cmp	r6, #0
 8011d6c:	d0f9      	beq.n	8011d62 <__sflush_r+0x1a>
 8011d6e:	2300      	movs	r3, #0
 8011d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d74:	682f      	ldr	r7, [r5, #0]
 8011d76:	602b      	str	r3, [r5, #0]
 8011d78:	d032      	beq.n	8011de0 <__sflush_r+0x98>
 8011d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d7c:	89a3      	ldrh	r3, [r4, #12]
 8011d7e:	075a      	lsls	r2, r3, #29
 8011d80:	d505      	bpl.n	8011d8e <__sflush_r+0x46>
 8011d82:	6863      	ldr	r3, [r4, #4]
 8011d84:	1ac0      	subs	r0, r0, r3
 8011d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d88:	b10b      	cbz	r3, 8011d8e <__sflush_r+0x46>
 8011d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d8c:	1ac0      	subs	r0, r0, r3
 8011d8e:	2300      	movs	r3, #0
 8011d90:	4602      	mov	r2, r0
 8011d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d94:	6a21      	ldr	r1, [r4, #32]
 8011d96:	4628      	mov	r0, r5
 8011d98:	47b0      	blx	r6
 8011d9a:	1c43      	adds	r3, r0, #1
 8011d9c:	89a3      	ldrh	r3, [r4, #12]
 8011d9e:	d106      	bne.n	8011dae <__sflush_r+0x66>
 8011da0:	6829      	ldr	r1, [r5, #0]
 8011da2:	291d      	cmp	r1, #29
 8011da4:	d82c      	bhi.n	8011e00 <__sflush_r+0xb8>
 8011da6:	4a2a      	ldr	r2, [pc, #168]	; (8011e50 <__sflush_r+0x108>)
 8011da8:	40ca      	lsrs	r2, r1
 8011daa:	07d6      	lsls	r6, r2, #31
 8011dac:	d528      	bpl.n	8011e00 <__sflush_r+0xb8>
 8011dae:	2200      	movs	r2, #0
 8011db0:	6062      	str	r2, [r4, #4]
 8011db2:	04d9      	lsls	r1, r3, #19
 8011db4:	6922      	ldr	r2, [r4, #16]
 8011db6:	6022      	str	r2, [r4, #0]
 8011db8:	d504      	bpl.n	8011dc4 <__sflush_r+0x7c>
 8011dba:	1c42      	adds	r2, r0, #1
 8011dbc:	d101      	bne.n	8011dc2 <__sflush_r+0x7a>
 8011dbe:	682b      	ldr	r3, [r5, #0]
 8011dc0:	b903      	cbnz	r3, 8011dc4 <__sflush_r+0x7c>
 8011dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8011dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dc6:	602f      	str	r7, [r5, #0]
 8011dc8:	2900      	cmp	r1, #0
 8011dca:	d0ca      	beq.n	8011d62 <__sflush_r+0x1a>
 8011dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011dd0:	4299      	cmp	r1, r3
 8011dd2:	d002      	beq.n	8011dda <__sflush_r+0x92>
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	f7fc f905 	bl	800dfe4 <_free_r>
 8011dda:	2000      	movs	r0, #0
 8011ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8011dde:	e7c1      	b.n	8011d64 <__sflush_r+0x1c>
 8011de0:	6a21      	ldr	r1, [r4, #32]
 8011de2:	2301      	movs	r3, #1
 8011de4:	4628      	mov	r0, r5
 8011de6:	47b0      	blx	r6
 8011de8:	1c41      	adds	r1, r0, #1
 8011dea:	d1c7      	bne.n	8011d7c <__sflush_r+0x34>
 8011dec:	682b      	ldr	r3, [r5, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d0c4      	beq.n	8011d7c <__sflush_r+0x34>
 8011df2:	2b1d      	cmp	r3, #29
 8011df4:	d001      	beq.n	8011dfa <__sflush_r+0xb2>
 8011df6:	2b16      	cmp	r3, #22
 8011df8:	d101      	bne.n	8011dfe <__sflush_r+0xb6>
 8011dfa:	602f      	str	r7, [r5, #0]
 8011dfc:	e7b1      	b.n	8011d62 <__sflush_r+0x1a>
 8011dfe:	89a3      	ldrh	r3, [r4, #12]
 8011e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e04:	81a3      	strh	r3, [r4, #12]
 8011e06:	e7ad      	b.n	8011d64 <__sflush_r+0x1c>
 8011e08:	690f      	ldr	r7, [r1, #16]
 8011e0a:	2f00      	cmp	r7, #0
 8011e0c:	d0a9      	beq.n	8011d62 <__sflush_r+0x1a>
 8011e0e:	0793      	lsls	r3, r2, #30
 8011e10:	680e      	ldr	r6, [r1, #0]
 8011e12:	bf08      	it	eq
 8011e14:	694b      	ldreq	r3, [r1, #20]
 8011e16:	600f      	str	r7, [r1, #0]
 8011e18:	bf18      	it	ne
 8011e1a:	2300      	movne	r3, #0
 8011e1c:	eba6 0807 	sub.w	r8, r6, r7
 8011e20:	608b      	str	r3, [r1, #8]
 8011e22:	f1b8 0f00 	cmp.w	r8, #0
 8011e26:	dd9c      	ble.n	8011d62 <__sflush_r+0x1a>
 8011e28:	6a21      	ldr	r1, [r4, #32]
 8011e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e2c:	4643      	mov	r3, r8
 8011e2e:	463a      	mov	r2, r7
 8011e30:	4628      	mov	r0, r5
 8011e32:	47b0      	blx	r6
 8011e34:	2800      	cmp	r0, #0
 8011e36:	dc06      	bgt.n	8011e46 <__sflush_r+0xfe>
 8011e38:	89a3      	ldrh	r3, [r4, #12]
 8011e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e3e:	81a3      	strh	r3, [r4, #12]
 8011e40:	f04f 30ff 	mov.w	r0, #4294967295
 8011e44:	e78e      	b.n	8011d64 <__sflush_r+0x1c>
 8011e46:	4407      	add	r7, r0
 8011e48:	eba8 0800 	sub.w	r8, r8, r0
 8011e4c:	e7e9      	b.n	8011e22 <__sflush_r+0xda>
 8011e4e:	bf00      	nop
 8011e50:	20400001 	.word	0x20400001

08011e54 <_fflush_r>:
 8011e54:	b538      	push	{r3, r4, r5, lr}
 8011e56:	690b      	ldr	r3, [r1, #16]
 8011e58:	4605      	mov	r5, r0
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	b913      	cbnz	r3, 8011e64 <_fflush_r+0x10>
 8011e5e:	2500      	movs	r5, #0
 8011e60:	4628      	mov	r0, r5
 8011e62:	bd38      	pop	{r3, r4, r5, pc}
 8011e64:	b118      	cbz	r0, 8011e6e <_fflush_r+0x1a>
 8011e66:	6983      	ldr	r3, [r0, #24]
 8011e68:	b90b      	cbnz	r3, 8011e6e <_fflush_r+0x1a>
 8011e6a:	f000 f887 	bl	8011f7c <__sinit>
 8011e6e:	4b14      	ldr	r3, [pc, #80]	; (8011ec0 <_fflush_r+0x6c>)
 8011e70:	429c      	cmp	r4, r3
 8011e72:	d11b      	bne.n	8011eac <_fflush_r+0x58>
 8011e74:	686c      	ldr	r4, [r5, #4]
 8011e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d0ef      	beq.n	8011e5e <_fflush_r+0xa>
 8011e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e80:	07d0      	lsls	r0, r2, #31
 8011e82:	d404      	bmi.n	8011e8e <_fflush_r+0x3a>
 8011e84:	0599      	lsls	r1, r3, #22
 8011e86:	d402      	bmi.n	8011e8e <_fflush_r+0x3a>
 8011e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e8a:	f7ff fcf0 	bl	801186e <__retarget_lock_acquire_recursive>
 8011e8e:	4628      	mov	r0, r5
 8011e90:	4621      	mov	r1, r4
 8011e92:	f7ff ff59 	bl	8011d48 <__sflush_r>
 8011e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e98:	07da      	lsls	r2, r3, #31
 8011e9a:	4605      	mov	r5, r0
 8011e9c:	d4e0      	bmi.n	8011e60 <_fflush_r+0xc>
 8011e9e:	89a3      	ldrh	r3, [r4, #12]
 8011ea0:	059b      	lsls	r3, r3, #22
 8011ea2:	d4dd      	bmi.n	8011e60 <_fflush_r+0xc>
 8011ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ea6:	f7ff fce3 	bl	8011870 <__retarget_lock_release_recursive>
 8011eaa:	e7d9      	b.n	8011e60 <_fflush_r+0xc>
 8011eac:	4b05      	ldr	r3, [pc, #20]	; (8011ec4 <_fflush_r+0x70>)
 8011eae:	429c      	cmp	r4, r3
 8011eb0:	d101      	bne.n	8011eb6 <_fflush_r+0x62>
 8011eb2:	68ac      	ldr	r4, [r5, #8]
 8011eb4:	e7df      	b.n	8011e76 <_fflush_r+0x22>
 8011eb6:	4b04      	ldr	r3, [pc, #16]	; (8011ec8 <_fflush_r+0x74>)
 8011eb8:	429c      	cmp	r4, r3
 8011eba:	bf08      	it	eq
 8011ebc:	68ec      	ldreq	r4, [r5, #12]
 8011ebe:	e7da      	b.n	8011e76 <_fflush_r+0x22>
 8011ec0:	08015d14 	.word	0x08015d14
 8011ec4:	08015d34 	.word	0x08015d34
 8011ec8:	08015cf4 	.word	0x08015cf4

08011ecc <std>:
 8011ecc:	2300      	movs	r3, #0
 8011ece:	b510      	push	{r4, lr}
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8011ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011eda:	6083      	str	r3, [r0, #8]
 8011edc:	8181      	strh	r1, [r0, #12]
 8011ede:	6643      	str	r3, [r0, #100]	; 0x64
 8011ee0:	81c2      	strh	r2, [r0, #14]
 8011ee2:	6183      	str	r3, [r0, #24]
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	2208      	movs	r2, #8
 8011ee8:	305c      	adds	r0, #92	; 0x5c
 8011eea:	f7fc f873 	bl	800dfd4 <memset>
 8011eee:	4b05      	ldr	r3, [pc, #20]	; (8011f04 <std+0x38>)
 8011ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8011ef2:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <std+0x3c>)
 8011ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ef6:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <std+0x40>)
 8011ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011efa:	4b05      	ldr	r3, [pc, #20]	; (8011f10 <std+0x44>)
 8011efc:	6224      	str	r4, [r4, #32]
 8011efe:	6323      	str	r3, [r4, #48]	; 0x30
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	bf00      	nop
 8011f04:	08012219 	.word	0x08012219
 8011f08:	0801223b 	.word	0x0801223b
 8011f0c:	08012273 	.word	0x08012273
 8011f10:	08012297 	.word	0x08012297

08011f14 <_cleanup_r>:
 8011f14:	4901      	ldr	r1, [pc, #4]	; (8011f1c <_cleanup_r+0x8>)
 8011f16:	f000 b8af 	b.w	8012078 <_fwalk_reent>
 8011f1a:	bf00      	nop
 8011f1c:	08011e55 	.word	0x08011e55

08011f20 <__sfmoreglue>:
 8011f20:	b570      	push	{r4, r5, r6, lr}
 8011f22:	2268      	movs	r2, #104	; 0x68
 8011f24:	1e4d      	subs	r5, r1, #1
 8011f26:	4355      	muls	r5, r2
 8011f28:	460e      	mov	r6, r1
 8011f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f2e:	f7fc f8c5 	bl	800e0bc <_malloc_r>
 8011f32:	4604      	mov	r4, r0
 8011f34:	b140      	cbz	r0, 8011f48 <__sfmoreglue+0x28>
 8011f36:	2100      	movs	r1, #0
 8011f38:	e9c0 1600 	strd	r1, r6, [r0]
 8011f3c:	300c      	adds	r0, #12
 8011f3e:	60a0      	str	r0, [r4, #8]
 8011f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f44:	f7fc f846 	bl	800dfd4 <memset>
 8011f48:	4620      	mov	r0, r4
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}

08011f4c <__sfp_lock_acquire>:
 8011f4c:	4801      	ldr	r0, [pc, #4]	; (8011f54 <__sfp_lock_acquire+0x8>)
 8011f4e:	f7ff bc8e 	b.w	801186e <__retarget_lock_acquire_recursive>
 8011f52:	bf00      	nop
 8011f54:	200030fd 	.word	0x200030fd

08011f58 <__sfp_lock_release>:
 8011f58:	4801      	ldr	r0, [pc, #4]	; (8011f60 <__sfp_lock_release+0x8>)
 8011f5a:	f7ff bc89 	b.w	8011870 <__retarget_lock_release_recursive>
 8011f5e:	bf00      	nop
 8011f60:	200030fd 	.word	0x200030fd

08011f64 <__sinit_lock_acquire>:
 8011f64:	4801      	ldr	r0, [pc, #4]	; (8011f6c <__sinit_lock_acquire+0x8>)
 8011f66:	f7ff bc82 	b.w	801186e <__retarget_lock_acquire_recursive>
 8011f6a:	bf00      	nop
 8011f6c:	200030fe 	.word	0x200030fe

08011f70 <__sinit_lock_release>:
 8011f70:	4801      	ldr	r0, [pc, #4]	; (8011f78 <__sinit_lock_release+0x8>)
 8011f72:	f7ff bc7d 	b.w	8011870 <__retarget_lock_release_recursive>
 8011f76:	bf00      	nop
 8011f78:	200030fe 	.word	0x200030fe

08011f7c <__sinit>:
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	4604      	mov	r4, r0
 8011f80:	f7ff fff0 	bl	8011f64 <__sinit_lock_acquire>
 8011f84:	69a3      	ldr	r3, [r4, #24]
 8011f86:	b11b      	cbz	r3, 8011f90 <__sinit+0x14>
 8011f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f8c:	f7ff bff0 	b.w	8011f70 <__sinit_lock_release>
 8011f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011f94:	6523      	str	r3, [r4, #80]	; 0x50
 8011f96:	4b13      	ldr	r3, [pc, #76]	; (8011fe4 <__sinit+0x68>)
 8011f98:	4a13      	ldr	r2, [pc, #76]	; (8011fe8 <__sinit+0x6c>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f9e:	42a3      	cmp	r3, r4
 8011fa0:	bf04      	itt	eq
 8011fa2:	2301      	moveq	r3, #1
 8011fa4:	61a3      	streq	r3, [r4, #24]
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f000 f820 	bl	8011fec <__sfp>
 8011fac:	6060      	str	r0, [r4, #4]
 8011fae:	4620      	mov	r0, r4
 8011fb0:	f000 f81c 	bl	8011fec <__sfp>
 8011fb4:	60a0      	str	r0, [r4, #8]
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f000 f818 	bl	8011fec <__sfp>
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	60e0      	str	r0, [r4, #12]
 8011fc0:	2104      	movs	r1, #4
 8011fc2:	6860      	ldr	r0, [r4, #4]
 8011fc4:	f7ff ff82 	bl	8011ecc <std>
 8011fc8:	68a0      	ldr	r0, [r4, #8]
 8011fca:	2201      	movs	r2, #1
 8011fcc:	2109      	movs	r1, #9
 8011fce:	f7ff ff7d 	bl	8011ecc <std>
 8011fd2:	68e0      	ldr	r0, [r4, #12]
 8011fd4:	2202      	movs	r2, #2
 8011fd6:	2112      	movs	r1, #18
 8011fd8:	f7ff ff78 	bl	8011ecc <std>
 8011fdc:	2301      	movs	r3, #1
 8011fde:	61a3      	str	r3, [r4, #24]
 8011fe0:	e7d2      	b.n	8011f88 <__sinit+0xc>
 8011fe2:	bf00      	nop
 8011fe4:	080158b8 	.word	0x080158b8
 8011fe8:	08011f15 	.word	0x08011f15

08011fec <__sfp>:
 8011fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fee:	4607      	mov	r7, r0
 8011ff0:	f7ff ffac 	bl	8011f4c <__sfp_lock_acquire>
 8011ff4:	4b1e      	ldr	r3, [pc, #120]	; (8012070 <__sfp+0x84>)
 8011ff6:	681e      	ldr	r6, [r3, #0]
 8011ff8:	69b3      	ldr	r3, [r6, #24]
 8011ffa:	b913      	cbnz	r3, 8012002 <__sfp+0x16>
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f7ff ffbd 	bl	8011f7c <__sinit>
 8012002:	3648      	adds	r6, #72	; 0x48
 8012004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012008:	3b01      	subs	r3, #1
 801200a:	d503      	bpl.n	8012014 <__sfp+0x28>
 801200c:	6833      	ldr	r3, [r6, #0]
 801200e:	b30b      	cbz	r3, 8012054 <__sfp+0x68>
 8012010:	6836      	ldr	r6, [r6, #0]
 8012012:	e7f7      	b.n	8012004 <__sfp+0x18>
 8012014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012018:	b9d5      	cbnz	r5, 8012050 <__sfp+0x64>
 801201a:	4b16      	ldr	r3, [pc, #88]	; (8012074 <__sfp+0x88>)
 801201c:	60e3      	str	r3, [r4, #12]
 801201e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012022:	6665      	str	r5, [r4, #100]	; 0x64
 8012024:	f7ff fc22 	bl	801186c <__retarget_lock_init_recursive>
 8012028:	f7ff ff96 	bl	8011f58 <__sfp_lock_release>
 801202c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012034:	6025      	str	r5, [r4, #0]
 8012036:	61a5      	str	r5, [r4, #24]
 8012038:	2208      	movs	r2, #8
 801203a:	4629      	mov	r1, r5
 801203c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012040:	f7fb ffc8 	bl	800dfd4 <memset>
 8012044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801204c:	4620      	mov	r0, r4
 801204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012050:	3468      	adds	r4, #104	; 0x68
 8012052:	e7d9      	b.n	8012008 <__sfp+0x1c>
 8012054:	2104      	movs	r1, #4
 8012056:	4638      	mov	r0, r7
 8012058:	f7ff ff62 	bl	8011f20 <__sfmoreglue>
 801205c:	4604      	mov	r4, r0
 801205e:	6030      	str	r0, [r6, #0]
 8012060:	2800      	cmp	r0, #0
 8012062:	d1d5      	bne.n	8012010 <__sfp+0x24>
 8012064:	f7ff ff78 	bl	8011f58 <__sfp_lock_release>
 8012068:	230c      	movs	r3, #12
 801206a:	603b      	str	r3, [r7, #0]
 801206c:	e7ee      	b.n	801204c <__sfp+0x60>
 801206e:	bf00      	nop
 8012070:	080158b8 	.word	0x080158b8
 8012074:	ffff0001 	.word	0xffff0001

08012078 <_fwalk_reent>:
 8012078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801207c:	4606      	mov	r6, r0
 801207e:	4688      	mov	r8, r1
 8012080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012084:	2700      	movs	r7, #0
 8012086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801208a:	f1b9 0901 	subs.w	r9, r9, #1
 801208e:	d505      	bpl.n	801209c <_fwalk_reent+0x24>
 8012090:	6824      	ldr	r4, [r4, #0]
 8012092:	2c00      	cmp	r4, #0
 8012094:	d1f7      	bne.n	8012086 <_fwalk_reent+0xe>
 8012096:	4638      	mov	r0, r7
 8012098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801209c:	89ab      	ldrh	r3, [r5, #12]
 801209e:	2b01      	cmp	r3, #1
 80120a0:	d907      	bls.n	80120b2 <_fwalk_reent+0x3a>
 80120a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120a6:	3301      	adds	r3, #1
 80120a8:	d003      	beq.n	80120b2 <_fwalk_reent+0x3a>
 80120aa:	4629      	mov	r1, r5
 80120ac:	4630      	mov	r0, r6
 80120ae:	47c0      	blx	r8
 80120b0:	4307      	orrs	r7, r0
 80120b2:	3568      	adds	r5, #104	; 0x68
 80120b4:	e7e9      	b.n	801208a <_fwalk_reent+0x12>

080120b6 <__swhatbuf_r>:
 80120b6:	b570      	push	{r4, r5, r6, lr}
 80120b8:	460e      	mov	r6, r1
 80120ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120be:	2900      	cmp	r1, #0
 80120c0:	b096      	sub	sp, #88	; 0x58
 80120c2:	4614      	mov	r4, r2
 80120c4:	461d      	mov	r5, r3
 80120c6:	da08      	bge.n	80120da <__swhatbuf_r+0x24>
 80120c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80120cc:	2200      	movs	r2, #0
 80120ce:	602a      	str	r2, [r5, #0]
 80120d0:	061a      	lsls	r2, r3, #24
 80120d2:	d410      	bmi.n	80120f6 <__swhatbuf_r+0x40>
 80120d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120d8:	e00e      	b.n	80120f8 <__swhatbuf_r+0x42>
 80120da:	466a      	mov	r2, sp
 80120dc:	f000 f902 	bl	80122e4 <_fstat_r>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	dbf1      	blt.n	80120c8 <__swhatbuf_r+0x12>
 80120e4:	9a01      	ldr	r2, [sp, #4]
 80120e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80120ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80120ee:	425a      	negs	r2, r3
 80120f0:	415a      	adcs	r2, r3
 80120f2:	602a      	str	r2, [r5, #0]
 80120f4:	e7ee      	b.n	80120d4 <__swhatbuf_r+0x1e>
 80120f6:	2340      	movs	r3, #64	; 0x40
 80120f8:	2000      	movs	r0, #0
 80120fa:	6023      	str	r3, [r4, #0]
 80120fc:	b016      	add	sp, #88	; 0x58
 80120fe:	bd70      	pop	{r4, r5, r6, pc}

08012100 <__smakebuf_r>:
 8012100:	898b      	ldrh	r3, [r1, #12]
 8012102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012104:	079d      	lsls	r5, r3, #30
 8012106:	4606      	mov	r6, r0
 8012108:	460c      	mov	r4, r1
 801210a:	d507      	bpl.n	801211c <__smakebuf_r+0x1c>
 801210c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012110:	6023      	str	r3, [r4, #0]
 8012112:	6123      	str	r3, [r4, #16]
 8012114:	2301      	movs	r3, #1
 8012116:	6163      	str	r3, [r4, #20]
 8012118:	b002      	add	sp, #8
 801211a:	bd70      	pop	{r4, r5, r6, pc}
 801211c:	ab01      	add	r3, sp, #4
 801211e:	466a      	mov	r2, sp
 8012120:	f7ff ffc9 	bl	80120b6 <__swhatbuf_r>
 8012124:	9900      	ldr	r1, [sp, #0]
 8012126:	4605      	mov	r5, r0
 8012128:	4630      	mov	r0, r6
 801212a:	f7fb ffc7 	bl	800e0bc <_malloc_r>
 801212e:	b948      	cbnz	r0, 8012144 <__smakebuf_r+0x44>
 8012130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012134:	059a      	lsls	r2, r3, #22
 8012136:	d4ef      	bmi.n	8012118 <__smakebuf_r+0x18>
 8012138:	f023 0303 	bic.w	r3, r3, #3
 801213c:	f043 0302 	orr.w	r3, r3, #2
 8012140:	81a3      	strh	r3, [r4, #12]
 8012142:	e7e3      	b.n	801210c <__smakebuf_r+0xc>
 8012144:	4b0d      	ldr	r3, [pc, #52]	; (801217c <__smakebuf_r+0x7c>)
 8012146:	62b3      	str	r3, [r6, #40]	; 0x28
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	6020      	str	r0, [r4, #0]
 801214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012150:	81a3      	strh	r3, [r4, #12]
 8012152:	9b00      	ldr	r3, [sp, #0]
 8012154:	6163      	str	r3, [r4, #20]
 8012156:	9b01      	ldr	r3, [sp, #4]
 8012158:	6120      	str	r0, [r4, #16]
 801215a:	b15b      	cbz	r3, 8012174 <__smakebuf_r+0x74>
 801215c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012160:	4630      	mov	r0, r6
 8012162:	f000 f8d1 	bl	8012308 <_isatty_r>
 8012166:	b128      	cbz	r0, 8012174 <__smakebuf_r+0x74>
 8012168:	89a3      	ldrh	r3, [r4, #12]
 801216a:	f023 0303 	bic.w	r3, r3, #3
 801216e:	f043 0301 	orr.w	r3, r3, #1
 8012172:	81a3      	strh	r3, [r4, #12]
 8012174:	89a0      	ldrh	r0, [r4, #12]
 8012176:	4305      	orrs	r5, r0
 8012178:	81a5      	strh	r5, [r4, #12]
 801217a:	e7cd      	b.n	8012118 <__smakebuf_r+0x18>
 801217c:	08011f15 	.word	0x08011f15

08012180 <_malloc_usable_size_r>:
 8012180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012184:	1f18      	subs	r0, r3, #4
 8012186:	2b00      	cmp	r3, #0
 8012188:	bfbc      	itt	lt
 801218a:	580b      	ldrlt	r3, [r1, r0]
 801218c:	18c0      	addlt	r0, r0, r3
 801218e:	4770      	bx	lr

08012190 <_raise_r>:
 8012190:	291f      	cmp	r1, #31
 8012192:	b538      	push	{r3, r4, r5, lr}
 8012194:	4604      	mov	r4, r0
 8012196:	460d      	mov	r5, r1
 8012198:	d904      	bls.n	80121a4 <_raise_r+0x14>
 801219a:	2316      	movs	r3, #22
 801219c:	6003      	str	r3, [r0, #0]
 801219e:	f04f 30ff 	mov.w	r0, #4294967295
 80121a2:	bd38      	pop	{r3, r4, r5, pc}
 80121a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80121a6:	b112      	cbz	r2, 80121ae <_raise_r+0x1e>
 80121a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121ac:	b94b      	cbnz	r3, 80121c2 <_raise_r+0x32>
 80121ae:	4620      	mov	r0, r4
 80121b0:	f000 f830 	bl	8012214 <_getpid_r>
 80121b4:	462a      	mov	r2, r5
 80121b6:	4601      	mov	r1, r0
 80121b8:	4620      	mov	r0, r4
 80121ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121be:	f000 b817 	b.w	80121f0 <_kill_r>
 80121c2:	2b01      	cmp	r3, #1
 80121c4:	d00a      	beq.n	80121dc <_raise_r+0x4c>
 80121c6:	1c59      	adds	r1, r3, #1
 80121c8:	d103      	bne.n	80121d2 <_raise_r+0x42>
 80121ca:	2316      	movs	r3, #22
 80121cc:	6003      	str	r3, [r0, #0]
 80121ce:	2001      	movs	r0, #1
 80121d0:	e7e7      	b.n	80121a2 <_raise_r+0x12>
 80121d2:	2400      	movs	r4, #0
 80121d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80121d8:	4628      	mov	r0, r5
 80121da:	4798      	blx	r3
 80121dc:	2000      	movs	r0, #0
 80121de:	e7e0      	b.n	80121a2 <_raise_r+0x12>

080121e0 <raise>:
 80121e0:	4b02      	ldr	r3, [pc, #8]	; (80121ec <raise+0xc>)
 80121e2:	4601      	mov	r1, r0
 80121e4:	6818      	ldr	r0, [r3, #0]
 80121e6:	f7ff bfd3 	b.w	8012190 <_raise_r>
 80121ea:	bf00      	nop
 80121ec:	20000034 	.word	0x20000034

080121f0 <_kill_r>:
 80121f0:	b538      	push	{r3, r4, r5, lr}
 80121f2:	4d07      	ldr	r5, [pc, #28]	; (8012210 <_kill_r+0x20>)
 80121f4:	2300      	movs	r3, #0
 80121f6:	4604      	mov	r4, r0
 80121f8:	4608      	mov	r0, r1
 80121fa:	4611      	mov	r1, r2
 80121fc:	602b      	str	r3, [r5, #0]
 80121fe:	f7f3 fd4b 	bl	8005c98 <_kill>
 8012202:	1c43      	adds	r3, r0, #1
 8012204:	d102      	bne.n	801220c <_kill_r+0x1c>
 8012206:	682b      	ldr	r3, [r5, #0]
 8012208:	b103      	cbz	r3, 801220c <_kill_r+0x1c>
 801220a:	6023      	str	r3, [r4, #0]
 801220c:	bd38      	pop	{r3, r4, r5, pc}
 801220e:	bf00      	nop
 8012210:	200030f8 	.word	0x200030f8

08012214 <_getpid_r>:
 8012214:	f7f3 bd38 	b.w	8005c88 <_getpid>

08012218 <__sread>:
 8012218:	b510      	push	{r4, lr}
 801221a:	460c      	mov	r4, r1
 801221c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012220:	f000 f894 	bl	801234c <_read_r>
 8012224:	2800      	cmp	r0, #0
 8012226:	bfab      	itete	ge
 8012228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801222a:	89a3      	ldrhlt	r3, [r4, #12]
 801222c:	181b      	addge	r3, r3, r0
 801222e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012232:	bfac      	ite	ge
 8012234:	6563      	strge	r3, [r4, #84]	; 0x54
 8012236:	81a3      	strhlt	r3, [r4, #12]
 8012238:	bd10      	pop	{r4, pc}

0801223a <__swrite>:
 801223a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801223e:	461f      	mov	r7, r3
 8012240:	898b      	ldrh	r3, [r1, #12]
 8012242:	05db      	lsls	r3, r3, #23
 8012244:	4605      	mov	r5, r0
 8012246:	460c      	mov	r4, r1
 8012248:	4616      	mov	r6, r2
 801224a:	d505      	bpl.n	8012258 <__swrite+0x1e>
 801224c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012250:	2302      	movs	r3, #2
 8012252:	2200      	movs	r2, #0
 8012254:	f000 f868 	bl	8012328 <_lseek_r>
 8012258:	89a3      	ldrh	r3, [r4, #12]
 801225a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801225e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012262:	81a3      	strh	r3, [r4, #12]
 8012264:	4632      	mov	r2, r6
 8012266:	463b      	mov	r3, r7
 8012268:	4628      	mov	r0, r5
 801226a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801226e:	f000 b817 	b.w	80122a0 <_write_r>

08012272 <__sseek>:
 8012272:	b510      	push	{r4, lr}
 8012274:	460c      	mov	r4, r1
 8012276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801227a:	f000 f855 	bl	8012328 <_lseek_r>
 801227e:	1c43      	adds	r3, r0, #1
 8012280:	89a3      	ldrh	r3, [r4, #12]
 8012282:	bf15      	itete	ne
 8012284:	6560      	strne	r0, [r4, #84]	; 0x54
 8012286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801228a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801228e:	81a3      	strheq	r3, [r4, #12]
 8012290:	bf18      	it	ne
 8012292:	81a3      	strhne	r3, [r4, #12]
 8012294:	bd10      	pop	{r4, pc}

08012296 <__sclose>:
 8012296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801229a:	f000 b813 	b.w	80122c4 <_close_r>
	...

080122a0 <_write_r>:
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	4d07      	ldr	r5, [pc, #28]	; (80122c0 <_write_r+0x20>)
 80122a4:	4604      	mov	r4, r0
 80122a6:	4608      	mov	r0, r1
 80122a8:	4611      	mov	r1, r2
 80122aa:	2200      	movs	r2, #0
 80122ac:	602a      	str	r2, [r5, #0]
 80122ae:	461a      	mov	r2, r3
 80122b0:	f7f3 fd29 	bl	8005d06 <_write>
 80122b4:	1c43      	adds	r3, r0, #1
 80122b6:	d102      	bne.n	80122be <_write_r+0x1e>
 80122b8:	682b      	ldr	r3, [r5, #0]
 80122ba:	b103      	cbz	r3, 80122be <_write_r+0x1e>
 80122bc:	6023      	str	r3, [r4, #0]
 80122be:	bd38      	pop	{r3, r4, r5, pc}
 80122c0:	200030f8 	.word	0x200030f8

080122c4 <_close_r>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4d06      	ldr	r5, [pc, #24]	; (80122e0 <_close_r+0x1c>)
 80122c8:	2300      	movs	r3, #0
 80122ca:	4604      	mov	r4, r0
 80122cc:	4608      	mov	r0, r1
 80122ce:	602b      	str	r3, [r5, #0]
 80122d0:	f7f3 fd35 	bl	8005d3e <_close>
 80122d4:	1c43      	adds	r3, r0, #1
 80122d6:	d102      	bne.n	80122de <_close_r+0x1a>
 80122d8:	682b      	ldr	r3, [r5, #0]
 80122da:	b103      	cbz	r3, 80122de <_close_r+0x1a>
 80122dc:	6023      	str	r3, [r4, #0]
 80122de:	bd38      	pop	{r3, r4, r5, pc}
 80122e0:	200030f8 	.word	0x200030f8

080122e4 <_fstat_r>:
 80122e4:	b538      	push	{r3, r4, r5, lr}
 80122e6:	4d07      	ldr	r5, [pc, #28]	; (8012304 <_fstat_r+0x20>)
 80122e8:	2300      	movs	r3, #0
 80122ea:	4604      	mov	r4, r0
 80122ec:	4608      	mov	r0, r1
 80122ee:	4611      	mov	r1, r2
 80122f0:	602b      	str	r3, [r5, #0]
 80122f2:	f7f3 fd30 	bl	8005d56 <_fstat>
 80122f6:	1c43      	adds	r3, r0, #1
 80122f8:	d102      	bne.n	8012300 <_fstat_r+0x1c>
 80122fa:	682b      	ldr	r3, [r5, #0]
 80122fc:	b103      	cbz	r3, 8012300 <_fstat_r+0x1c>
 80122fe:	6023      	str	r3, [r4, #0]
 8012300:	bd38      	pop	{r3, r4, r5, pc}
 8012302:	bf00      	nop
 8012304:	200030f8 	.word	0x200030f8

08012308 <_isatty_r>:
 8012308:	b538      	push	{r3, r4, r5, lr}
 801230a:	4d06      	ldr	r5, [pc, #24]	; (8012324 <_isatty_r+0x1c>)
 801230c:	2300      	movs	r3, #0
 801230e:	4604      	mov	r4, r0
 8012310:	4608      	mov	r0, r1
 8012312:	602b      	str	r3, [r5, #0]
 8012314:	f7f3 fd2f 	bl	8005d76 <_isatty>
 8012318:	1c43      	adds	r3, r0, #1
 801231a:	d102      	bne.n	8012322 <_isatty_r+0x1a>
 801231c:	682b      	ldr	r3, [r5, #0]
 801231e:	b103      	cbz	r3, 8012322 <_isatty_r+0x1a>
 8012320:	6023      	str	r3, [r4, #0]
 8012322:	bd38      	pop	{r3, r4, r5, pc}
 8012324:	200030f8 	.word	0x200030f8

08012328 <_lseek_r>:
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	4d07      	ldr	r5, [pc, #28]	; (8012348 <_lseek_r+0x20>)
 801232c:	4604      	mov	r4, r0
 801232e:	4608      	mov	r0, r1
 8012330:	4611      	mov	r1, r2
 8012332:	2200      	movs	r2, #0
 8012334:	602a      	str	r2, [r5, #0]
 8012336:	461a      	mov	r2, r3
 8012338:	f7f3 fd28 	bl	8005d8c <_lseek>
 801233c:	1c43      	adds	r3, r0, #1
 801233e:	d102      	bne.n	8012346 <_lseek_r+0x1e>
 8012340:	682b      	ldr	r3, [r5, #0]
 8012342:	b103      	cbz	r3, 8012346 <_lseek_r+0x1e>
 8012344:	6023      	str	r3, [r4, #0]
 8012346:	bd38      	pop	{r3, r4, r5, pc}
 8012348:	200030f8 	.word	0x200030f8

0801234c <_read_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4d07      	ldr	r5, [pc, #28]	; (801236c <_read_r+0x20>)
 8012350:	4604      	mov	r4, r0
 8012352:	4608      	mov	r0, r1
 8012354:	4611      	mov	r1, r2
 8012356:	2200      	movs	r2, #0
 8012358:	602a      	str	r2, [r5, #0]
 801235a:	461a      	mov	r2, r3
 801235c:	f7f3 fcb6 	bl	8005ccc <_read>
 8012360:	1c43      	adds	r3, r0, #1
 8012362:	d102      	bne.n	801236a <_read_r+0x1e>
 8012364:	682b      	ldr	r3, [r5, #0]
 8012366:	b103      	cbz	r3, 801236a <_read_r+0x1e>
 8012368:	6023      	str	r3, [r4, #0]
 801236a:	bd38      	pop	{r3, r4, r5, pc}
 801236c:	200030f8 	.word	0x200030f8

08012370 <cos>:
 8012370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012372:	ec53 2b10 	vmov	r2, r3, d0
 8012376:	4826      	ldr	r0, [pc, #152]	; (8012410 <cos+0xa0>)
 8012378:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801237c:	4281      	cmp	r1, r0
 801237e:	dc06      	bgt.n	801238e <cos+0x1e>
 8012380:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012408 <cos+0x98>
 8012384:	b005      	add	sp, #20
 8012386:	f85d eb04 	ldr.w	lr, [sp], #4
 801238a:	f001 bd3d 	b.w	8013e08 <__kernel_cos>
 801238e:	4821      	ldr	r0, [pc, #132]	; (8012414 <cos+0xa4>)
 8012390:	4281      	cmp	r1, r0
 8012392:	dd09      	ble.n	80123a8 <cos+0x38>
 8012394:	ee10 0a10 	vmov	r0, s0
 8012398:	4619      	mov	r1, r3
 801239a:	f7ed ff7d 	bl	8000298 <__aeabi_dsub>
 801239e:	ec41 0b10 	vmov	d0, r0, r1
 80123a2:	b005      	add	sp, #20
 80123a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80123a8:	4668      	mov	r0, sp
 80123aa:	f001 fa6d 	bl	8013888 <__ieee754_rem_pio2>
 80123ae:	f000 0003 	and.w	r0, r0, #3
 80123b2:	2801      	cmp	r0, #1
 80123b4:	d00b      	beq.n	80123ce <cos+0x5e>
 80123b6:	2802      	cmp	r0, #2
 80123b8:	d016      	beq.n	80123e8 <cos+0x78>
 80123ba:	b9e0      	cbnz	r0, 80123f6 <cos+0x86>
 80123bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123c0:	ed9d 0b00 	vldr	d0, [sp]
 80123c4:	f001 fd20 	bl	8013e08 <__kernel_cos>
 80123c8:	ec51 0b10 	vmov	r0, r1, d0
 80123cc:	e7e7      	b.n	801239e <cos+0x2e>
 80123ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123d2:	ed9d 0b00 	vldr	d0, [sp]
 80123d6:	f002 f92f 	bl	8014638 <__kernel_sin>
 80123da:	ec53 2b10 	vmov	r2, r3, d0
 80123de:	ee10 0a10 	vmov	r0, s0
 80123e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80123e6:	e7da      	b.n	801239e <cos+0x2e>
 80123e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123ec:	ed9d 0b00 	vldr	d0, [sp]
 80123f0:	f001 fd0a 	bl	8013e08 <__kernel_cos>
 80123f4:	e7f1      	b.n	80123da <cos+0x6a>
 80123f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123fa:	ed9d 0b00 	vldr	d0, [sp]
 80123fe:	2001      	movs	r0, #1
 8012400:	f002 f91a 	bl	8014638 <__kernel_sin>
 8012404:	e7e0      	b.n	80123c8 <cos+0x58>
 8012406:	bf00      	nop
	...
 8012410:	3fe921fb 	.word	0x3fe921fb
 8012414:	7fefffff 	.word	0x7fefffff

08012418 <sin>:
 8012418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801241a:	ec53 2b10 	vmov	r2, r3, d0
 801241e:	4828      	ldr	r0, [pc, #160]	; (80124c0 <sin+0xa8>)
 8012420:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012424:	4281      	cmp	r1, r0
 8012426:	dc07      	bgt.n	8012438 <sin+0x20>
 8012428:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80124b8 <sin+0xa0>
 801242c:	2000      	movs	r0, #0
 801242e:	b005      	add	sp, #20
 8012430:	f85d eb04 	ldr.w	lr, [sp], #4
 8012434:	f002 b900 	b.w	8014638 <__kernel_sin>
 8012438:	4822      	ldr	r0, [pc, #136]	; (80124c4 <sin+0xac>)
 801243a:	4281      	cmp	r1, r0
 801243c:	dd09      	ble.n	8012452 <sin+0x3a>
 801243e:	ee10 0a10 	vmov	r0, s0
 8012442:	4619      	mov	r1, r3
 8012444:	f7ed ff28 	bl	8000298 <__aeabi_dsub>
 8012448:	ec41 0b10 	vmov	d0, r0, r1
 801244c:	b005      	add	sp, #20
 801244e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012452:	4668      	mov	r0, sp
 8012454:	f001 fa18 	bl	8013888 <__ieee754_rem_pio2>
 8012458:	f000 0003 	and.w	r0, r0, #3
 801245c:	2801      	cmp	r0, #1
 801245e:	d00c      	beq.n	801247a <sin+0x62>
 8012460:	2802      	cmp	r0, #2
 8012462:	d011      	beq.n	8012488 <sin+0x70>
 8012464:	b9f0      	cbnz	r0, 80124a4 <sin+0x8c>
 8012466:	ed9d 1b02 	vldr	d1, [sp, #8]
 801246a:	ed9d 0b00 	vldr	d0, [sp]
 801246e:	2001      	movs	r0, #1
 8012470:	f002 f8e2 	bl	8014638 <__kernel_sin>
 8012474:	ec51 0b10 	vmov	r0, r1, d0
 8012478:	e7e6      	b.n	8012448 <sin+0x30>
 801247a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801247e:	ed9d 0b00 	vldr	d0, [sp]
 8012482:	f001 fcc1 	bl	8013e08 <__kernel_cos>
 8012486:	e7f5      	b.n	8012474 <sin+0x5c>
 8012488:	ed9d 1b02 	vldr	d1, [sp, #8]
 801248c:	ed9d 0b00 	vldr	d0, [sp]
 8012490:	2001      	movs	r0, #1
 8012492:	f002 f8d1 	bl	8014638 <__kernel_sin>
 8012496:	ec53 2b10 	vmov	r2, r3, d0
 801249a:	ee10 0a10 	vmov	r0, s0
 801249e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124a2:	e7d1      	b.n	8012448 <sin+0x30>
 80124a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124a8:	ed9d 0b00 	vldr	d0, [sp]
 80124ac:	f001 fcac 	bl	8013e08 <__kernel_cos>
 80124b0:	e7f1      	b.n	8012496 <sin+0x7e>
 80124b2:	bf00      	nop
 80124b4:	f3af 8000 	nop.w
	...
 80124c0:	3fe921fb 	.word	0x3fe921fb
 80124c4:	7fefffff 	.word	0x7fefffff

080124c8 <asin>:
 80124c8:	b538      	push	{r3, r4, r5, lr}
 80124ca:	ed2d 8b02 	vpush	{d8}
 80124ce:	ec55 4b10 	vmov	r4, r5, d0
 80124d2:	f000 f911 	bl	80126f8 <__ieee754_asin>
 80124d6:	4622      	mov	r2, r4
 80124d8:	462b      	mov	r3, r5
 80124da:	4620      	mov	r0, r4
 80124dc:	4629      	mov	r1, r5
 80124de:	eeb0 8a40 	vmov.f32	s16, s0
 80124e2:	eef0 8a60 	vmov.f32	s17, s1
 80124e6:	f7ee fb29 	bl	8000b3c <__aeabi_dcmpun>
 80124ea:	b9a8      	cbnz	r0, 8012518 <asin+0x50>
 80124ec:	ec45 4b10 	vmov	d0, r4, r5
 80124f0:	f002 f990 	bl	8014814 <fabs>
 80124f4:	4b0c      	ldr	r3, [pc, #48]	; (8012528 <asin+0x60>)
 80124f6:	ec51 0b10 	vmov	r0, r1, d0
 80124fa:	2200      	movs	r2, #0
 80124fc:	f7ee fb14 	bl	8000b28 <__aeabi_dcmpgt>
 8012500:	b150      	cbz	r0, 8012518 <asin+0x50>
 8012502:	f7fb fd1f 	bl	800df44 <__errno>
 8012506:	ecbd 8b02 	vpop	{d8}
 801250a:	2321      	movs	r3, #33	; 0x21
 801250c:	6003      	str	r3, [r0, #0]
 801250e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012512:	4806      	ldr	r0, [pc, #24]	; (801252c <asin+0x64>)
 8012514:	f7ff b964 	b.w	80117e0 <nan>
 8012518:	eeb0 0a48 	vmov.f32	s0, s16
 801251c:	eef0 0a68 	vmov.f32	s1, s17
 8012520:	ecbd 8b02 	vpop	{d8}
 8012524:	bd38      	pop	{r3, r4, r5, pc}
 8012526:	bf00      	nop
 8012528:	3ff00000 	.word	0x3ff00000
 801252c:	08015bf0 	.word	0x08015bf0

08012530 <exp>:
 8012530:	b538      	push	{r3, r4, r5, lr}
 8012532:	ed2d 8b02 	vpush	{d8}
 8012536:	ec55 4b10 	vmov	r4, r5, d0
 801253a:	f000 faf1 	bl	8012b20 <__ieee754_exp>
 801253e:	eeb0 8a40 	vmov.f32	s16, s0
 8012542:	eef0 8a60 	vmov.f32	s17, s1
 8012546:	ec45 4b10 	vmov	d0, r4, r5
 801254a:	f002 f96c 	bl	8014826 <finite>
 801254e:	b168      	cbz	r0, 801256c <exp+0x3c>
 8012550:	a317      	add	r3, pc, #92	; (adr r3, 80125b0 <exp+0x80>)
 8012552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012556:	4620      	mov	r0, r4
 8012558:	4629      	mov	r1, r5
 801255a:	f7ee fae5 	bl	8000b28 <__aeabi_dcmpgt>
 801255e:	b160      	cbz	r0, 801257a <exp+0x4a>
 8012560:	f7fb fcf0 	bl	800df44 <__errno>
 8012564:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80125a0 <exp+0x70>
 8012568:	2322      	movs	r3, #34	; 0x22
 801256a:	6003      	str	r3, [r0, #0]
 801256c:	eeb0 0a48 	vmov.f32	s0, s16
 8012570:	eef0 0a68 	vmov.f32	s1, s17
 8012574:	ecbd 8b02 	vpop	{d8}
 8012578:	bd38      	pop	{r3, r4, r5, pc}
 801257a:	a30f      	add	r3, pc, #60	; (adr r3, 80125b8 <exp+0x88>)
 801257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012580:	4620      	mov	r0, r4
 8012582:	4629      	mov	r1, r5
 8012584:	f7ee fab2 	bl	8000aec <__aeabi_dcmplt>
 8012588:	2800      	cmp	r0, #0
 801258a:	d0ef      	beq.n	801256c <exp+0x3c>
 801258c:	f7fb fcda 	bl	800df44 <__errno>
 8012590:	2322      	movs	r3, #34	; 0x22
 8012592:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80125a8 <exp+0x78>
 8012596:	6003      	str	r3, [r0, #0]
 8012598:	e7e8      	b.n	801256c <exp+0x3c>
 801259a:	bf00      	nop
 801259c:	f3af 8000 	nop.w
 80125a0:	00000000 	.word	0x00000000
 80125a4:	7ff00000 	.word	0x7ff00000
	...
 80125b0:	fefa39ef 	.word	0xfefa39ef
 80125b4:	40862e42 	.word	0x40862e42
 80125b8:	d52d3051 	.word	0xd52d3051
 80125bc:	c0874910 	.word	0xc0874910

080125c0 <pow>:
 80125c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125c2:	ed2d 8b02 	vpush	{d8}
 80125c6:	eeb0 8a40 	vmov.f32	s16, s0
 80125ca:	eef0 8a60 	vmov.f32	s17, s1
 80125ce:	ec55 4b11 	vmov	r4, r5, d1
 80125d2:	f000 fc29 	bl	8012e28 <__ieee754_pow>
 80125d6:	4622      	mov	r2, r4
 80125d8:	462b      	mov	r3, r5
 80125da:	4620      	mov	r0, r4
 80125dc:	4629      	mov	r1, r5
 80125de:	ec57 6b10 	vmov	r6, r7, d0
 80125e2:	f7ee faab 	bl	8000b3c <__aeabi_dcmpun>
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d13b      	bne.n	8012662 <pow+0xa2>
 80125ea:	ec51 0b18 	vmov	r0, r1, d8
 80125ee:	2200      	movs	r2, #0
 80125f0:	2300      	movs	r3, #0
 80125f2:	f7ee fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 80125f6:	b1b8      	cbz	r0, 8012628 <pow+0x68>
 80125f8:	2200      	movs	r2, #0
 80125fa:	2300      	movs	r3, #0
 80125fc:	4620      	mov	r0, r4
 80125fe:	4629      	mov	r1, r5
 8012600:	f7ee fa6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8012604:	2800      	cmp	r0, #0
 8012606:	d146      	bne.n	8012696 <pow+0xd6>
 8012608:	ec45 4b10 	vmov	d0, r4, r5
 801260c:	f002 f90b 	bl	8014826 <finite>
 8012610:	b338      	cbz	r0, 8012662 <pow+0xa2>
 8012612:	2200      	movs	r2, #0
 8012614:	2300      	movs	r3, #0
 8012616:	4620      	mov	r0, r4
 8012618:	4629      	mov	r1, r5
 801261a:	f7ee fa67 	bl	8000aec <__aeabi_dcmplt>
 801261e:	b300      	cbz	r0, 8012662 <pow+0xa2>
 8012620:	f7fb fc90 	bl	800df44 <__errno>
 8012624:	2322      	movs	r3, #34	; 0x22
 8012626:	e01b      	b.n	8012660 <pow+0xa0>
 8012628:	ec47 6b10 	vmov	d0, r6, r7
 801262c:	f002 f8fb 	bl	8014826 <finite>
 8012630:	b9e0      	cbnz	r0, 801266c <pow+0xac>
 8012632:	eeb0 0a48 	vmov.f32	s0, s16
 8012636:	eef0 0a68 	vmov.f32	s1, s17
 801263a:	f002 f8f4 	bl	8014826 <finite>
 801263e:	b1a8      	cbz	r0, 801266c <pow+0xac>
 8012640:	ec45 4b10 	vmov	d0, r4, r5
 8012644:	f002 f8ef 	bl	8014826 <finite>
 8012648:	b180      	cbz	r0, 801266c <pow+0xac>
 801264a:	4632      	mov	r2, r6
 801264c:	463b      	mov	r3, r7
 801264e:	4630      	mov	r0, r6
 8012650:	4639      	mov	r1, r7
 8012652:	f7ee fa73 	bl	8000b3c <__aeabi_dcmpun>
 8012656:	2800      	cmp	r0, #0
 8012658:	d0e2      	beq.n	8012620 <pow+0x60>
 801265a:	f7fb fc73 	bl	800df44 <__errno>
 801265e:	2321      	movs	r3, #33	; 0x21
 8012660:	6003      	str	r3, [r0, #0]
 8012662:	ecbd 8b02 	vpop	{d8}
 8012666:	ec47 6b10 	vmov	d0, r6, r7
 801266a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801266c:	2200      	movs	r2, #0
 801266e:	2300      	movs	r3, #0
 8012670:	4630      	mov	r0, r6
 8012672:	4639      	mov	r1, r7
 8012674:	f7ee fa30 	bl	8000ad8 <__aeabi_dcmpeq>
 8012678:	2800      	cmp	r0, #0
 801267a:	d0f2      	beq.n	8012662 <pow+0xa2>
 801267c:	eeb0 0a48 	vmov.f32	s0, s16
 8012680:	eef0 0a68 	vmov.f32	s1, s17
 8012684:	f002 f8cf 	bl	8014826 <finite>
 8012688:	2800      	cmp	r0, #0
 801268a:	d0ea      	beq.n	8012662 <pow+0xa2>
 801268c:	ec45 4b10 	vmov	d0, r4, r5
 8012690:	f002 f8c9 	bl	8014826 <finite>
 8012694:	e7c3      	b.n	801261e <pow+0x5e>
 8012696:	4f01      	ldr	r7, [pc, #4]	; (801269c <pow+0xdc>)
 8012698:	2600      	movs	r6, #0
 801269a:	e7e2      	b.n	8012662 <pow+0xa2>
 801269c:	3ff00000 	.word	0x3ff00000

080126a0 <sqrt>:
 80126a0:	b538      	push	{r3, r4, r5, lr}
 80126a2:	ed2d 8b02 	vpush	{d8}
 80126a6:	ec55 4b10 	vmov	r4, r5, d0
 80126aa:	f001 faf9 	bl	8013ca0 <__ieee754_sqrt>
 80126ae:	4622      	mov	r2, r4
 80126b0:	462b      	mov	r3, r5
 80126b2:	4620      	mov	r0, r4
 80126b4:	4629      	mov	r1, r5
 80126b6:	eeb0 8a40 	vmov.f32	s16, s0
 80126ba:	eef0 8a60 	vmov.f32	s17, s1
 80126be:	f7ee fa3d 	bl	8000b3c <__aeabi_dcmpun>
 80126c2:	b990      	cbnz	r0, 80126ea <sqrt+0x4a>
 80126c4:	2200      	movs	r2, #0
 80126c6:	2300      	movs	r3, #0
 80126c8:	4620      	mov	r0, r4
 80126ca:	4629      	mov	r1, r5
 80126cc:	f7ee fa0e 	bl	8000aec <__aeabi_dcmplt>
 80126d0:	b158      	cbz	r0, 80126ea <sqrt+0x4a>
 80126d2:	f7fb fc37 	bl	800df44 <__errno>
 80126d6:	2321      	movs	r3, #33	; 0x21
 80126d8:	6003      	str	r3, [r0, #0]
 80126da:	2200      	movs	r2, #0
 80126dc:	2300      	movs	r3, #0
 80126de:	4610      	mov	r0, r2
 80126e0:	4619      	mov	r1, r3
 80126e2:	f7ee f8bb 	bl	800085c <__aeabi_ddiv>
 80126e6:	ec41 0b18 	vmov	d8, r0, r1
 80126ea:	eeb0 0a48 	vmov.f32	s0, s16
 80126ee:	eef0 0a68 	vmov.f32	s1, s17
 80126f2:	ecbd 8b02 	vpop	{d8}
 80126f6:	bd38      	pop	{r3, r4, r5, pc}

080126f8 <__ieee754_asin>:
 80126f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126fc:	ed2d 8b04 	vpush	{d8-d9}
 8012700:	ec55 4b10 	vmov	r4, r5, d0
 8012704:	4bcc      	ldr	r3, [pc, #816]	; (8012a38 <__ieee754_asin+0x340>)
 8012706:	b083      	sub	sp, #12
 8012708:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801270c:	4598      	cmp	r8, r3
 801270e:	9501      	str	r5, [sp, #4]
 8012710:	dd35      	ble.n	801277e <__ieee754_asin+0x86>
 8012712:	ee10 3a10 	vmov	r3, s0
 8012716:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801271a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801271e:	ea58 0303 	orrs.w	r3, r8, r3
 8012722:	d117      	bne.n	8012754 <__ieee754_asin+0x5c>
 8012724:	a3aa      	add	r3, pc, #680	; (adr r3, 80129d0 <__ieee754_asin+0x2d8>)
 8012726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272a:	ee10 0a10 	vmov	r0, s0
 801272e:	4629      	mov	r1, r5
 8012730:	f7ed ff6a 	bl	8000608 <__aeabi_dmul>
 8012734:	a3a8      	add	r3, pc, #672	; (adr r3, 80129d8 <__ieee754_asin+0x2e0>)
 8012736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273a:	4606      	mov	r6, r0
 801273c:	460f      	mov	r7, r1
 801273e:	4620      	mov	r0, r4
 8012740:	4629      	mov	r1, r5
 8012742:	f7ed ff61 	bl	8000608 <__aeabi_dmul>
 8012746:	4602      	mov	r2, r0
 8012748:	460b      	mov	r3, r1
 801274a:	4630      	mov	r0, r6
 801274c:	4639      	mov	r1, r7
 801274e:	f7ed fda5 	bl	800029c <__adddf3>
 8012752:	e00b      	b.n	801276c <__ieee754_asin+0x74>
 8012754:	ee10 2a10 	vmov	r2, s0
 8012758:	462b      	mov	r3, r5
 801275a:	ee10 0a10 	vmov	r0, s0
 801275e:	4629      	mov	r1, r5
 8012760:	f7ed fd9a 	bl	8000298 <__aeabi_dsub>
 8012764:	4602      	mov	r2, r0
 8012766:	460b      	mov	r3, r1
 8012768:	f7ee f878 	bl	800085c <__aeabi_ddiv>
 801276c:	4604      	mov	r4, r0
 801276e:	460d      	mov	r5, r1
 8012770:	ec45 4b10 	vmov	d0, r4, r5
 8012774:	b003      	add	sp, #12
 8012776:	ecbd 8b04 	vpop	{d8-d9}
 801277a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801277e:	4baf      	ldr	r3, [pc, #700]	; (8012a3c <__ieee754_asin+0x344>)
 8012780:	4598      	cmp	r8, r3
 8012782:	dc11      	bgt.n	80127a8 <__ieee754_asin+0xb0>
 8012784:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012788:	f280 80ae 	bge.w	80128e8 <__ieee754_asin+0x1f0>
 801278c:	a394      	add	r3, pc, #592	; (adr r3, 80129e0 <__ieee754_asin+0x2e8>)
 801278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012792:	ee10 0a10 	vmov	r0, s0
 8012796:	4629      	mov	r1, r5
 8012798:	f7ed fd80 	bl	800029c <__adddf3>
 801279c:	4ba8      	ldr	r3, [pc, #672]	; (8012a40 <__ieee754_asin+0x348>)
 801279e:	2200      	movs	r2, #0
 80127a0:	f7ee f9c2 	bl	8000b28 <__aeabi_dcmpgt>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d1e3      	bne.n	8012770 <__ieee754_asin+0x78>
 80127a8:	ec45 4b10 	vmov	d0, r4, r5
 80127ac:	f002 f832 	bl	8014814 <fabs>
 80127b0:	49a3      	ldr	r1, [pc, #652]	; (8012a40 <__ieee754_asin+0x348>)
 80127b2:	ec53 2b10 	vmov	r2, r3, d0
 80127b6:	2000      	movs	r0, #0
 80127b8:	f7ed fd6e 	bl	8000298 <__aeabi_dsub>
 80127bc:	4ba1      	ldr	r3, [pc, #644]	; (8012a44 <__ieee754_asin+0x34c>)
 80127be:	2200      	movs	r2, #0
 80127c0:	f7ed ff22 	bl	8000608 <__aeabi_dmul>
 80127c4:	a388      	add	r3, pc, #544	; (adr r3, 80129e8 <__ieee754_asin+0x2f0>)
 80127c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ca:	4604      	mov	r4, r0
 80127cc:	460d      	mov	r5, r1
 80127ce:	f7ed ff1b 	bl	8000608 <__aeabi_dmul>
 80127d2:	a387      	add	r3, pc, #540	; (adr r3, 80129f0 <__ieee754_asin+0x2f8>)
 80127d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d8:	f7ed fd60 	bl	800029c <__adddf3>
 80127dc:	4622      	mov	r2, r4
 80127de:	462b      	mov	r3, r5
 80127e0:	f7ed ff12 	bl	8000608 <__aeabi_dmul>
 80127e4:	a384      	add	r3, pc, #528	; (adr r3, 80129f8 <__ieee754_asin+0x300>)
 80127e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ea:	f7ed fd55 	bl	8000298 <__aeabi_dsub>
 80127ee:	4622      	mov	r2, r4
 80127f0:	462b      	mov	r3, r5
 80127f2:	f7ed ff09 	bl	8000608 <__aeabi_dmul>
 80127f6:	a382      	add	r3, pc, #520	; (adr r3, 8012a00 <__ieee754_asin+0x308>)
 80127f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fc:	f7ed fd4e 	bl	800029c <__adddf3>
 8012800:	4622      	mov	r2, r4
 8012802:	462b      	mov	r3, r5
 8012804:	f7ed ff00 	bl	8000608 <__aeabi_dmul>
 8012808:	a37f      	add	r3, pc, #508	; (adr r3, 8012a08 <__ieee754_asin+0x310>)
 801280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280e:	f7ed fd43 	bl	8000298 <__aeabi_dsub>
 8012812:	4622      	mov	r2, r4
 8012814:	462b      	mov	r3, r5
 8012816:	f7ed fef7 	bl	8000608 <__aeabi_dmul>
 801281a:	a37d      	add	r3, pc, #500	; (adr r3, 8012a10 <__ieee754_asin+0x318>)
 801281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012820:	f7ed fd3c 	bl	800029c <__adddf3>
 8012824:	4622      	mov	r2, r4
 8012826:	462b      	mov	r3, r5
 8012828:	f7ed feee 	bl	8000608 <__aeabi_dmul>
 801282c:	a37a      	add	r3, pc, #488	; (adr r3, 8012a18 <__ieee754_asin+0x320>)
 801282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012832:	ec41 0b18 	vmov	d8, r0, r1
 8012836:	4620      	mov	r0, r4
 8012838:	4629      	mov	r1, r5
 801283a:	f7ed fee5 	bl	8000608 <__aeabi_dmul>
 801283e:	a378      	add	r3, pc, #480	; (adr r3, 8012a20 <__ieee754_asin+0x328>)
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	f7ed fd28 	bl	8000298 <__aeabi_dsub>
 8012848:	4622      	mov	r2, r4
 801284a:	462b      	mov	r3, r5
 801284c:	f7ed fedc 	bl	8000608 <__aeabi_dmul>
 8012850:	a375      	add	r3, pc, #468	; (adr r3, 8012a28 <__ieee754_asin+0x330>)
 8012852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012856:	f7ed fd21 	bl	800029c <__adddf3>
 801285a:	4622      	mov	r2, r4
 801285c:	462b      	mov	r3, r5
 801285e:	f7ed fed3 	bl	8000608 <__aeabi_dmul>
 8012862:	a373      	add	r3, pc, #460	; (adr r3, 8012a30 <__ieee754_asin+0x338>)
 8012864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012868:	f7ed fd16 	bl	8000298 <__aeabi_dsub>
 801286c:	4622      	mov	r2, r4
 801286e:	462b      	mov	r3, r5
 8012870:	f7ed feca 	bl	8000608 <__aeabi_dmul>
 8012874:	4b72      	ldr	r3, [pc, #456]	; (8012a40 <__ieee754_asin+0x348>)
 8012876:	2200      	movs	r2, #0
 8012878:	f7ed fd10 	bl	800029c <__adddf3>
 801287c:	ec45 4b10 	vmov	d0, r4, r5
 8012880:	4606      	mov	r6, r0
 8012882:	460f      	mov	r7, r1
 8012884:	f001 fa0c 	bl	8013ca0 <__ieee754_sqrt>
 8012888:	4b6f      	ldr	r3, [pc, #444]	; (8012a48 <__ieee754_asin+0x350>)
 801288a:	4598      	cmp	r8, r3
 801288c:	ec5b ab10 	vmov	sl, fp, d0
 8012890:	f340 80dc 	ble.w	8012a4c <__ieee754_asin+0x354>
 8012894:	4632      	mov	r2, r6
 8012896:	463b      	mov	r3, r7
 8012898:	ec51 0b18 	vmov	r0, r1, d8
 801289c:	f7ed ffde 	bl	800085c <__aeabi_ddiv>
 80128a0:	4652      	mov	r2, sl
 80128a2:	465b      	mov	r3, fp
 80128a4:	f7ed feb0 	bl	8000608 <__aeabi_dmul>
 80128a8:	4652      	mov	r2, sl
 80128aa:	465b      	mov	r3, fp
 80128ac:	f7ed fcf6 	bl	800029c <__adddf3>
 80128b0:	4602      	mov	r2, r0
 80128b2:	460b      	mov	r3, r1
 80128b4:	f7ed fcf2 	bl	800029c <__adddf3>
 80128b8:	a347      	add	r3, pc, #284	; (adr r3, 80129d8 <__ieee754_asin+0x2e0>)
 80128ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128be:	f7ed fceb 	bl	8000298 <__aeabi_dsub>
 80128c2:	4602      	mov	r2, r0
 80128c4:	460b      	mov	r3, r1
 80128c6:	a142      	add	r1, pc, #264	; (adr r1, 80129d0 <__ieee754_asin+0x2d8>)
 80128c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128cc:	f7ed fce4 	bl	8000298 <__aeabi_dsub>
 80128d0:	9b01      	ldr	r3, [sp, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	bfdc      	itt	le
 80128d6:	4602      	movle	r2, r0
 80128d8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80128dc:	4604      	mov	r4, r0
 80128de:	460d      	mov	r5, r1
 80128e0:	bfdc      	itt	le
 80128e2:	4614      	movle	r4, r2
 80128e4:	461d      	movle	r5, r3
 80128e6:	e743      	b.n	8012770 <__ieee754_asin+0x78>
 80128e8:	ee10 2a10 	vmov	r2, s0
 80128ec:	ee10 0a10 	vmov	r0, s0
 80128f0:	462b      	mov	r3, r5
 80128f2:	4629      	mov	r1, r5
 80128f4:	f7ed fe88 	bl	8000608 <__aeabi_dmul>
 80128f8:	a33b      	add	r3, pc, #236	; (adr r3, 80129e8 <__ieee754_asin+0x2f0>)
 80128fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128fe:	4606      	mov	r6, r0
 8012900:	460f      	mov	r7, r1
 8012902:	f7ed fe81 	bl	8000608 <__aeabi_dmul>
 8012906:	a33a      	add	r3, pc, #232	; (adr r3, 80129f0 <__ieee754_asin+0x2f8>)
 8012908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290c:	f7ed fcc6 	bl	800029c <__adddf3>
 8012910:	4632      	mov	r2, r6
 8012912:	463b      	mov	r3, r7
 8012914:	f7ed fe78 	bl	8000608 <__aeabi_dmul>
 8012918:	a337      	add	r3, pc, #220	; (adr r3, 80129f8 <__ieee754_asin+0x300>)
 801291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291e:	f7ed fcbb 	bl	8000298 <__aeabi_dsub>
 8012922:	4632      	mov	r2, r6
 8012924:	463b      	mov	r3, r7
 8012926:	f7ed fe6f 	bl	8000608 <__aeabi_dmul>
 801292a:	a335      	add	r3, pc, #212	; (adr r3, 8012a00 <__ieee754_asin+0x308>)
 801292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012930:	f7ed fcb4 	bl	800029c <__adddf3>
 8012934:	4632      	mov	r2, r6
 8012936:	463b      	mov	r3, r7
 8012938:	f7ed fe66 	bl	8000608 <__aeabi_dmul>
 801293c:	a332      	add	r3, pc, #200	; (adr r3, 8012a08 <__ieee754_asin+0x310>)
 801293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012942:	f7ed fca9 	bl	8000298 <__aeabi_dsub>
 8012946:	4632      	mov	r2, r6
 8012948:	463b      	mov	r3, r7
 801294a:	f7ed fe5d 	bl	8000608 <__aeabi_dmul>
 801294e:	a330      	add	r3, pc, #192	; (adr r3, 8012a10 <__ieee754_asin+0x318>)
 8012950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012954:	f7ed fca2 	bl	800029c <__adddf3>
 8012958:	4632      	mov	r2, r6
 801295a:	463b      	mov	r3, r7
 801295c:	f7ed fe54 	bl	8000608 <__aeabi_dmul>
 8012960:	a32d      	add	r3, pc, #180	; (adr r3, 8012a18 <__ieee754_asin+0x320>)
 8012962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012966:	4680      	mov	r8, r0
 8012968:	4689      	mov	r9, r1
 801296a:	4630      	mov	r0, r6
 801296c:	4639      	mov	r1, r7
 801296e:	f7ed fe4b 	bl	8000608 <__aeabi_dmul>
 8012972:	a32b      	add	r3, pc, #172	; (adr r3, 8012a20 <__ieee754_asin+0x328>)
 8012974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012978:	f7ed fc8e 	bl	8000298 <__aeabi_dsub>
 801297c:	4632      	mov	r2, r6
 801297e:	463b      	mov	r3, r7
 8012980:	f7ed fe42 	bl	8000608 <__aeabi_dmul>
 8012984:	a328      	add	r3, pc, #160	; (adr r3, 8012a28 <__ieee754_asin+0x330>)
 8012986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298a:	f7ed fc87 	bl	800029c <__adddf3>
 801298e:	4632      	mov	r2, r6
 8012990:	463b      	mov	r3, r7
 8012992:	f7ed fe39 	bl	8000608 <__aeabi_dmul>
 8012996:	a326      	add	r3, pc, #152	; (adr r3, 8012a30 <__ieee754_asin+0x338>)
 8012998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801299c:	f7ed fc7c 	bl	8000298 <__aeabi_dsub>
 80129a0:	4632      	mov	r2, r6
 80129a2:	463b      	mov	r3, r7
 80129a4:	f7ed fe30 	bl	8000608 <__aeabi_dmul>
 80129a8:	4b25      	ldr	r3, [pc, #148]	; (8012a40 <__ieee754_asin+0x348>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	f7ed fc76 	bl	800029c <__adddf3>
 80129b0:	4602      	mov	r2, r0
 80129b2:	460b      	mov	r3, r1
 80129b4:	4640      	mov	r0, r8
 80129b6:	4649      	mov	r1, r9
 80129b8:	f7ed ff50 	bl	800085c <__aeabi_ddiv>
 80129bc:	4622      	mov	r2, r4
 80129be:	462b      	mov	r3, r5
 80129c0:	f7ed fe22 	bl	8000608 <__aeabi_dmul>
 80129c4:	4602      	mov	r2, r0
 80129c6:	460b      	mov	r3, r1
 80129c8:	4620      	mov	r0, r4
 80129ca:	4629      	mov	r1, r5
 80129cc:	e6bf      	b.n	801274e <__ieee754_asin+0x56>
 80129ce:	bf00      	nop
 80129d0:	54442d18 	.word	0x54442d18
 80129d4:	3ff921fb 	.word	0x3ff921fb
 80129d8:	33145c07 	.word	0x33145c07
 80129dc:	3c91a626 	.word	0x3c91a626
 80129e0:	8800759c 	.word	0x8800759c
 80129e4:	7e37e43c 	.word	0x7e37e43c
 80129e8:	0dfdf709 	.word	0x0dfdf709
 80129ec:	3f023de1 	.word	0x3f023de1
 80129f0:	7501b288 	.word	0x7501b288
 80129f4:	3f49efe0 	.word	0x3f49efe0
 80129f8:	b5688f3b 	.word	0xb5688f3b
 80129fc:	3fa48228 	.word	0x3fa48228
 8012a00:	0e884455 	.word	0x0e884455
 8012a04:	3fc9c155 	.word	0x3fc9c155
 8012a08:	03eb6f7d 	.word	0x03eb6f7d
 8012a0c:	3fd4d612 	.word	0x3fd4d612
 8012a10:	55555555 	.word	0x55555555
 8012a14:	3fc55555 	.word	0x3fc55555
 8012a18:	b12e9282 	.word	0xb12e9282
 8012a1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012a20:	1b8d0159 	.word	0x1b8d0159
 8012a24:	3fe6066c 	.word	0x3fe6066c
 8012a28:	9c598ac8 	.word	0x9c598ac8
 8012a2c:	40002ae5 	.word	0x40002ae5
 8012a30:	1c8a2d4b 	.word	0x1c8a2d4b
 8012a34:	40033a27 	.word	0x40033a27
 8012a38:	3fefffff 	.word	0x3fefffff
 8012a3c:	3fdfffff 	.word	0x3fdfffff
 8012a40:	3ff00000 	.word	0x3ff00000
 8012a44:	3fe00000 	.word	0x3fe00000
 8012a48:	3fef3332 	.word	0x3fef3332
 8012a4c:	ee10 2a10 	vmov	r2, s0
 8012a50:	ee10 0a10 	vmov	r0, s0
 8012a54:	465b      	mov	r3, fp
 8012a56:	4659      	mov	r1, fp
 8012a58:	f7ed fc20 	bl	800029c <__adddf3>
 8012a5c:	4632      	mov	r2, r6
 8012a5e:	463b      	mov	r3, r7
 8012a60:	ec41 0b19 	vmov	d9, r0, r1
 8012a64:	ec51 0b18 	vmov	r0, r1, d8
 8012a68:	f7ed fef8 	bl	800085c <__aeabi_ddiv>
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	ec51 0b19 	vmov	r0, r1, d9
 8012a74:	f7ed fdc8 	bl	8000608 <__aeabi_dmul>
 8012a78:	f04f 0800 	mov.w	r8, #0
 8012a7c:	4606      	mov	r6, r0
 8012a7e:	460f      	mov	r7, r1
 8012a80:	4642      	mov	r2, r8
 8012a82:	465b      	mov	r3, fp
 8012a84:	4640      	mov	r0, r8
 8012a86:	4659      	mov	r1, fp
 8012a88:	f7ed fdbe 	bl	8000608 <__aeabi_dmul>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	460b      	mov	r3, r1
 8012a90:	4620      	mov	r0, r4
 8012a92:	4629      	mov	r1, r5
 8012a94:	f7ed fc00 	bl	8000298 <__aeabi_dsub>
 8012a98:	4642      	mov	r2, r8
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	460d      	mov	r5, r1
 8012a9e:	465b      	mov	r3, fp
 8012aa0:	4650      	mov	r0, sl
 8012aa2:	4659      	mov	r1, fp
 8012aa4:	f7ed fbfa 	bl	800029c <__adddf3>
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	460b      	mov	r3, r1
 8012aac:	4620      	mov	r0, r4
 8012aae:	4629      	mov	r1, r5
 8012ab0:	f7ed fed4 	bl	800085c <__aeabi_ddiv>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	f7ed fbf0 	bl	800029c <__adddf3>
 8012abc:	4602      	mov	r2, r0
 8012abe:	460b      	mov	r3, r1
 8012ac0:	a113      	add	r1, pc, #76	; (adr r1, 8012b10 <__ieee754_asin+0x418>)
 8012ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ac6:	f7ed fbe7 	bl	8000298 <__aeabi_dsub>
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	4630      	mov	r0, r6
 8012ad0:	4639      	mov	r1, r7
 8012ad2:	f7ed fbe1 	bl	8000298 <__aeabi_dsub>
 8012ad6:	4642      	mov	r2, r8
 8012ad8:	4604      	mov	r4, r0
 8012ada:	460d      	mov	r5, r1
 8012adc:	465b      	mov	r3, fp
 8012ade:	4640      	mov	r0, r8
 8012ae0:	4659      	mov	r1, fp
 8012ae2:	f7ed fbdb 	bl	800029c <__adddf3>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	460b      	mov	r3, r1
 8012aea:	a10b      	add	r1, pc, #44	; (adr r1, 8012b18 <__ieee754_asin+0x420>)
 8012aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012af0:	f7ed fbd2 	bl	8000298 <__aeabi_dsub>
 8012af4:	4602      	mov	r2, r0
 8012af6:	460b      	mov	r3, r1
 8012af8:	4620      	mov	r0, r4
 8012afa:	4629      	mov	r1, r5
 8012afc:	f7ed fbcc 	bl	8000298 <__aeabi_dsub>
 8012b00:	4602      	mov	r2, r0
 8012b02:	460b      	mov	r3, r1
 8012b04:	a104      	add	r1, pc, #16	; (adr r1, 8012b18 <__ieee754_asin+0x420>)
 8012b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b0a:	e6df      	b.n	80128cc <__ieee754_asin+0x1d4>
 8012b0c:	f3af 8000 	nop.w
 8012b10:	33145c07 	.word	0x33145c07
 8012b14:	3c91a626 	.word	0x3c91a626
 8012b18:	54442d18 	.word	0x54442d18
 8012b1c:	3fe921fb 	.word	0x3fe921fb

08012b20 <__ieee754_exp>:
 8012b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b24:	ec55 4b10 	vmov	r4, r5, d0
 8012b28:	49b5      	ldr	r1, [pc, #724]	; (8012e00 <__ieee754_exp+0x2e0>)
 8012b2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012b2e:	428b      	cmp	r3, r1
 8012b30:	ed2d 8b04 	vpush	{d8-d9}
 8012b34:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8012b38:	d93d      	bls.n	8012bb6 <__ieee754_exp+0x96>
 8012b3a:	49b2      	ldr	r1, [pc, #712]	; (8012e04 <__ieee754_exp+0x2e4>)
 8012b3c:	428b      	cmp	r3, r1
 8012b3e:	d918      	bls.n	8012b72 <__ieee754_exp+0x52>
 8012b40:	ee10 3a10 	vmov	r3, s0
 8012b44:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	d009      	beq.n	8012b60 <__ieee754_exp+0x40>
 8012b4c:	ee10 2a10 	vmov	r2, s0
 8012b50:	462b      	mov	r3, r5
 8012b52:	4620      	mov	r0, r4
 8012b54:	4629      	mov	r1, r5
 8012b56:	f7ed fba1 	bl	800029c <__adddf3>
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	460d      	mov	r5, r1
 8012b5e:	e002      	b.n	8012b66 <__ieee754_exp+0x46>
 8012b60:	b10e      	cbz	r6, 8012b66 <__ieee754_exp+0x46>
 8012b62:	2400      	movs	r4, #0
 8012b64:	2500      	movs	r5, #0
 8012b66:	ecbd 8b04 	vpop	{d8-d9}
 8012b6a:	ec45 4b10 	vmov	d0, r4, r5
 8012b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b72:	a38d      	add	r3, pc, #564	; (adr r3, 8012da8 <__ieee754_exp+0x288>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	ee10 0a10 	vmov	r0, s0
 8012b7c:	4629      	mov	r1, r5
 8012b7e:	f7ed ffd3 	bl	8000b28 <__aeabi_dcmpgt>
 8012b82:	4607      	mov	r7, r0
 8012b84:	b130      	cbz	r0, 8012b94 <__ieee754_exp+0x74>
 8012b86:	ecbd 8b04 	vpop	{d8-d9}
 8012b8a:	2000      	movs	r0, #0
 8012b8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b90:	f001 be37 	b.w	8014802 <__math_oflow>
 8012b94:	a386      	add	r3, pc, #536	; (adr r3, 8012db0 <__ieee754_exp+0x290>)
 8012b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	4629      	mov	r1, r5
 8012b9e:	f7ed ffa5 	bl	8000aec <__aeabi_dcmplt>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	f000 808b 	beq.w	8012cbe <__ieee754_exp+0x19e>
 8012ba8:	ecbd 8b04 	vpop	{d8-d9}
 8012bac:	4638      	mov	r0, r7
 8012bae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb2:	f001 be1d 	b.w	80147f0 <__math_uflow>
 8012bb6:	4a94      	ldr	r2, [pc, #592]	; (8012e08 <__ieee754_exp+0x2e8>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	f240 80ac 	bls.w	8012d16 <__ieee754_exp+0x1f6>
 8012bbe:	4a93      	ldr	r2, [pc, #588]	; (8012e0c <__ieee754_exp+0x2ec>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d87c      	bhi.n	8012cbe <__ieee754_exp+0x19e>
 8012bc4:	4b92      	ldr	r3, [pc, #584]	; (8012e10 <__ieee754_exp+0x2f0>)
 8012bc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bce:	ee10 0a10 	vmov	r0, s0
 8012bd2:	4629      	mov	r1, r5
 8012bd4:	f7ed fb60 	bl	8000298 <__aeabi_dsub>
 8012bd8:	4b8e      	ldr	r3, [pc, #568]	; (8012e14 <__ieee754_exp+0x2f4>)
 8012bda:	00f7      	lsls	r7, r6, #3
 8012bdc:	443b      	add	r3, r7
 8012bde:	ed93 7b00 	vldr	d7, [r3]
 8012be2:	f1c6 0a01 	rsb	sl, r6, #1
 8012be6:	4680      	mov	r8, r0
 8012be8:	4689      	mov	r9, r1
 8012bea:	ebaa 0a06 	sub.w	sl, sl, r6
 8012bee:	eeb0 8a47 	vmov.f32	s16, s14
 8012bf2:	eef0 8a67 	vmov.f32	s17, s15
 8012bf6:	ec53 2b18 	vmov	r2, r3, d8
 8012bfa:	4640      	mov	r0, r8
 8012bfc:	4649      	mov	r1, r9
 8012bfe:	f7ed fb4b 	bl	8000298 <__aeabi_dsub>
 8012c02:	4604      	mov	r4, r0
 8012c04:	460d      	mov	r5, r1
 8012c06:	4622      	mov	r2, r4
 8012c08:	462b      	mov	r3, r5
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	4629      	mov	r1, r5
 8012c0e:	f7ed fcfb 	bl	8000608 <__aeabi_dmul>
 8012c12:	a369      	add	r3, pc, #420	; (adr r3, 8012db8 <__ieee754_exp+0x298>)
 8012c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c18:	4606      	mov	r6, r0
 8012c1a:	460f      	mov	r7, r1
 8012c1c:	f7ed fcf4 	bl	8000608 <__aeabi_dmul>
 8012c20:	a367      	add	r3, pc, #412	; (adr r3, 8012dc0 <__ieee754_exp+0x2a0>)
 8012c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c26:	f7ed fb37 	bl	8000298 <__aeabi_dsub>
 8012c2a:	4632      	mov	r2, r6
 8012c2c:	463b      	mov	r3, r7
 8012c2e:	f7ed fceb 	bl	8000608 <__aeabi_dmul>
 8012c32:	a365      	add	r3, pc, #404	; (adr r3, 8012dc8 <__ieee754_exp+0x2a8>)
 8012c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c38:	f7ed fb30 	bl	800029c <__adddf3>
 8012c3c:	4632      	mov	r2, r6
 8012c3e:	463b      	mov	r3, r7
 8012c40:	f7ed fce2 	bl	8000608 <__aeabi_dmul>
 8012c44:	a362      	add	r3, pc, #392	; (adr r3, 8012dd0 <__ieee754_exp+0x2b0>)
 8012c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c4a:	f7ed fb25 	bl	8000298 <__aeabi_dsub>
 8012c4e:	4632      	mov	r2, r6
 8012c50:	463b      	mov	r3, r7
 8012c52:	f7ed fcd9 	bl	8000608 <__aeabi_dmul>
 8012c56:	a360      	add	r3, pc, #384	; (adr r3, 8012dd8 <__ieee754_exp+0x2b8>)
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	f7ed fb1e 	bl	800029c <__adddf3>
 8012c60:	4632      	mov	r2, r6
 8012c62:	463b      	mov	r3, r7
 8012c64:	f7ed fcd0 	bl	8000608 <__aeabi_dmul>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	4629      	mov	r1, r5
 8012c70:	f7ed fb12 	bl	8000298 <__aeabi_dsub>
 8012c74:	4602      	mov	r2, r0
 8012c76:	460b      	mov	r3, r1
 8012c78:	4606      	mov	r6, r0
 8012c7a:	460f      	mov	r7, r1
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	4629      	mov	r1, r5
 8012c80:	f7ed fcc2 	bl	8000608 <__aeabi_dmul>
 8012c84:	ec41 0b19 	vmov	d9, r0, r1
 8012c88:	f1ba 0f00 	cmp.w	sl, #0
 8012c8c:	d15d      	bne.n	8012d4a <__ieee754_exp+0x22a>
 8012c8e:	2200      	movs	r2, #0
 8012c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c94:	4630      	mov	r0, r6
 8012c96:	4639      	mov	r1, r7
 8012c98:	f7ed fafe 	bl	8000298 <__aeabi_dsub>
 8012c9c:	4602      	mov	r2, r0
 8012c9e:	460b      	mov	r3, r1
 8012ca0:	ec51 0b19 	vmov	r0, r1, d9
 8012ca4:	f7ed fdda 	bl	800085c <__aeabi_ddiv>
 8012ca8:	4622      	mov	r2, r4
 8012caa:	462b      	mov	r3, r5
 8012cac:	f7ed faf4 	bl	8000298 <__aeabi_dsub>
 8012cb0:	4602      	mov	r2, r0
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	4958      	ldr	r1, [pc, #352]	; (8012e18 <__ieee754_exp+0x2f8>)
 8012cb8:	f7ed faee 	bl	8000298 <__aeabi_dsub>
 8012cbc:	e74d      	b.n	8012b5a <__ieee754_exp+0x3a>
 8012cbe:	4857      	ldr	r0, [pc, #348]	; (8012e1c <__ieee754_exp+0x2fc>)
 8012cc0:	a347      	add	r3, pc, #284	; (adr r3, 8012de0 <__ieee754_exp+0x2c0>)
 8012cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8012cca:	4629      	mov	r1, r5
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f7ed fc9b 	bl	8000608 <__aeabi_dmul>
 8012cd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012cd6:	f7ed fae1 	bl	800029c <__adddf3>
 8012cda:	f7ed ff45 	bl	8000b68 <__aeabi_d2iz>
 8012cde:	4682      	mov	sl, r0
 8012ce0:	f7ed fc28 	bl	8000534 <__aeabi_i2d>
 8012ce4:	a340      	add	r3, pc, #256	; (adr r3, 8012de8 <__ieee754_exp+0x2c8>)
 8012ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cea:	4606      	mov	r6, r0
 8012cec:	460f      	mov	r7, r1
 8012cee:	f7ed fc8b 	bl	8000608 <__aeabi_dmul>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	4629      	mov	r1, r5
 8012cfa:	f7ed facd 	bl	8000298 <__aeabi_dsub>
 8012cfe:	a33c      	add	r3, pc, #240	; (adr r3, 8012df0 <__ieee754_exp+0x2d0>)
 8012d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d04:	4680      	mov	r8, r0
 8012d06:	4689      	mov	r9, r1
 8012d08:	4630      	mov	r0, r6
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	f7ed fc7c 	bl	8000608 <__aeabi_dmul>
 8012d10:	ec41 0b18 	vmov	d8, r0, r1
 8012d14:	e76f      	b.n	8012bf6 <__ieee754_exp+0xd6>
 8012d16:	4a42      	ldr	r2, [pc, #264]	; (8012e20 <__ieee754_exp+0x300>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d811      	bhi.n	8012d40 <__ieee754_exp+0x220>
 8012d1c:	a336      	add	r3, pc, #216	; (adr r3, 8012df8 <__ieee754_exp+0x2d8>)
 8012d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d22:	ee10 0a10 	vmov	r0, s0
 8012d26:	4629      	mov	r1, r5
 8012d28:	f7ed fab8 	bl	800029c <__adddf3>
 8012d2c:	4b3a      	ldr	r3, [pc, #232]	; (8012e18 <__ieee754_exp+0x2f8>)
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f7ed fefa 	bl	8000b28 <__aeabi_dcmpgt>
 8012d34:	b138      	cbz	r0, 8012d46 <__ieee754_exp+0x226>
 8012d36:	4b38      	ldr	r3, [pc, #224]	; (8012e18 <__ieee754_exp+0x2f8>)
 8012d38:	2200      	movs	r2, #0
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	4629      	mov	r1, r5
 8012d3e:	e70a      	b.n	8012b56 <__ieee754_exp+0x36>
 8012d40:	f04f 0a00 	mov.w	sl, #0
 8012d44:	e75f      	b.n	8012c06 <__ieee754_exp+0xe6>
 8012d46:	4682      	mov	sl, r0
 8012d48:	e75d      	b.n	8012c06 <__ieee754_exp+0xe6>
 8012d4a:	4632      	mov	r2, r6
 8012d4c:	463b      	mov	r3, r7
 8012d4e:	2000      	movs	r0, #0
 8012d50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8012d54:	f7ed faa0 	bl	8000298 <__aeabi_dsub>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	ec51 0b19 	vmov	r0, r1, d9
 8012d60:	f7ed fd7c 	bl	800085c <__aeabi_ddiv>
 8012d64:	4602      	mov	r2, r0
 8012d66:	460b      	mov	r3, r1
 8012d68:	ec51 0b18 	vmov	r0, r1, d8
 8012d6c:	f7ed fa94 	bl	8000298 <__aeabi_dsub>
 8012d70:	4642      	mov	r2, r8
 8012d72:	464b      	mov	r3, r9
 8012d74:	f7ed fa90 	bl	8000298 <__aeabi_dsub>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	4926      	ldr	r1, [pc, #152]	; (8012e18 <__ieee754_exp+0x2f8>)
 8012d80:	f7ed fa8a 	bl	8000298 <__aeabi_dsub>
 8012d84:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8012d88:	4592      	cmp	sl, r2
 8012d8a:	db02      	blt.n	8012d92 <__ieee754_exp+0x272>
 8012d8c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012d90:	e6e3      	b.n	8012b5a <__ieee754_exp+0x3a>
 8012d92:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8012d96:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8012da0:	f7ed fc32 	bl	8000608 <__aeabi_dmul>
 8012da4:	e6d9      	b.n	8012b5a <__ieee754_exp+0x3a>
 8012da6:	bf00      	nop
 8012da8:	fefa39ef 	.word	0xfefa39ef
 8012dac:	40862e42 	.word	0x40862e42
 8012db0:	d52d3051 	.word	0xd52d3051
 8012db4:	c0874910 	.word	0xc0874910
 8012db8:	72bea4d0 	.word	0x72bea4d0
 8012dbc:	3e663769 	.word	0x3e663769
 8012dc0:	c5d26bf1 	.word	0xc5d26bf1
 8012dc4:	3ebbbd41 	.word	0x3ebbbd41
 8012dc8:	af25de2c 	.word	0xaf25de2c
 8012dcc:	3f11566a 	.word	0x3f11566a
 8012dd0:	16bebd93 	.word	0x16bebd93
 8012dd4:	3f66c16c 	.word	0x3f66c16c
 8012dd8:	5555553e 	.word	0x5555553e
 8012ddc:	3fc55555 	.word	0x3fc55555
 8012de0:	652b82fe 	.word	0x652b82fe
 8012de4:	3ff71547 	.word	0x3ff71547
 8012de8:	fee00000 	.word	0xfee00000
 8012dec:	3fe62e42 	.word	0x3fe62e42
 8012df0:	35793c76 	.word	0x35793c76
 8012df4:	3dea39ef 	.word	0x3dea39ef
 8012df8:	8800759c 	.word	0x8800759c
 8012dfc:	7e37e43c 	.word	0x7e37e43c
 8012e00:	40862e41 	.word	0x40862e41
 8012e04:	7fefffff 	.word	0x7fefffff
 8012e08:	3fd62e42 	.word	0x3fd62e42
 8012e0c:	3ff0a2b1 	.word	0x3ff0a2b1
 8012e10:	08015d68 	.word	0x08015d68
 8012e14:	08015d78 	.word	0x08015d78
 8012e18:	3ff00000 	.word	0x3ff00000
 8012e1c:	08015d58 	.word	0x08015d58
 8012e20:	3defffff 	.word	0x3defffff
 8012e24:	00000000 	.word	0x00000000

08012e28 <__ieee754_pow>:
 8012e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	ed2d 8b06 	vpush	{d8-d10}
 8012e30:	b089      	sub	sp, #36	; 0x24
 8012e32:	ed8d 1b00 	vstr	d1, [sp]
 8012e36:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012e3a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012e3e:	ea58 0102 	orrs.w	r1, r8, r2
 8012e42:	ec57 6b10 	vmov	r6, r7, d0
 8012e46:	d115      	bne.n	8012e74 <__ieee754_pow+0x4c>
 8012e48:	19b3      	adds	r3, r6, r6
 8012e4a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012e4e:	4152      	adcs	r2, r2
 8012e50:	4299      	cmp	r1, r3
 8012e52:	4b89      	ldr	r3, [pc, #548]	; (8013078 <__ieee754_pow+0x250>)
 8012e54:	4193      	sbcs	r3, r2
 8012e56:	f080 84d2 	bcs.w	80137fe <__ieee754_pow+0x9d6>
 8012e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e5e:	4630      	mov	r0, r6
 8012e60:	4639      	mov	r1, r7
 8012e62:	f7ed fa1b 	bl	800029c <__adddf3>
 8012e66:	ec41 0b10 	vmov	d0, r0, r1
 8012e6a:	b009      	add	sp, #36	; 0x24
 8012e6c:	ecbd 8b06 	vpop	{d8-d10}
 8012e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e74:	4b81      	ldr	r3, [pc, #516]	; (801307c <__ieee754_pow+0x254>)
 8012e76:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012e7a:	429c      	cmp	r4, r3
 8012e7c:	ee10 aa10 	vmov	sl, s0
 8012e80:	463d      	mov	r5, r7
 8012e82:	dc06      	bgt.n	8012e92 <__ieee754_pow+0x6a>
 8012e84:	d101      	bne.n	8012e8a <__ieee754_pow+0x62>
 8012e86:	2e00      	cmp	r6, #0
 8012e88:	d1e7      	bne.n	8012e5a <__ieee754_pow+0x32>
 8012e8a:	4598      	cmp	r8, r3
 8012e8c:	dc01      	bgt.n	8012e92 <__ieee754_pow+0x6a>
 8012e8e:	d10f      	bne.n	8012eb0 <__ieee754_pow+0x88>
 8012e90:	b172      	cbz	r2, 8012eb0 <__ieee754_pow+0x88>
 8012e92:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8012e96:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012e9a:	ea55 050a 	orrs.w	r5, r5, sl
 8012e9e:	d1dc      	bne.n	8012e5a <__ieee754_pow+0x32>
 8012ea0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ea4:	18db      	adds	r3, r3, r3
 8012ea6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012eaa:	4152      	adcs	r2, r2
 8012eac:	429d      	cmp	r5, r3
 8012eae:	e7d0      	b.n	8012e52 <__ieee754_pow+0x2a>
 8012eb0:	2d00      	cmp	r5, #0
 8012eb2:	da3b      	bge.n	8012f2c <__ieee754_pow+0x104>
 8012eb4:	4b72      	ldr	r3, [pc, #456]	; (8013080 <__ieee754_pow+0x258>)
 8012eb6:	4598      	cmp	r8, r3
 8012eb8:	dc51      	bgt.n	8012f5e <__ieee754_pow+0x136>
 8012eba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012ebe:	4598      	cmp	r8, r3
 8012ec0:	f340 84ac 	ble.w	801381c <__ieee754_pow+0x9f4>
 8012ec4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012ec8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012ecc:	2b14      	cmp	r3, #20
 8012ece:	dd0f      	ble.n	8012ef0 <__ieee754_pow+0xc8>
 8012ed0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012ed4:	fa22 f103 	lsr.w	r1, r2, r3
 8012ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8012edc:	4293      	cmp	r3, r2
 8012ede:	f040 849d 	bne.w	801381c <__ieee754_pow+0x9f4>
 8012ee2:	f001 0101 	and.w	r1, r1, #1
 8012ee6:	f1c1 0302 	rsb	r3, r1, #2
 8012eea:	9304      	str	r3, [sp, #16]
 8012eec:	b182      	cbz	r2, 8012f10 <__ieee754_pow+0xe8>
 8012eee:	e05f      	b.n	8012fb0 <__ieee754_pow+0x188>
 8012ef0:	2a00      	cmp	r2, #0
 8012ef2:	d15b      	bne.n	8012fac <__ieee754_pow+0x184>
 8012ef4:	f1c3 0314 	rsb	r3, r3, #20
 8012ef8:	fa48 f103 	asr.w	r1, r8, r3
 8012efc:	fa01 f303 	lsl.w	r3, r1, r3
 8012f00:	4543      	cmp	r3, r8
 8012f02:	f040 8488 	bne.w	8013816 <__ieee754_pow+0x9ee>
 8012f06:	f001 0101 	and.w	r1, r1, #1
 8012f0a:	f1c1 0302 	rsb	r3, r1, #2
 8012f0e:	9304      	str	r3, [sp, #16]
 8012f10:	4b5c      	ldr	r3, [pc, #368]	; (8013084 <__ieee754_pow+0x25c>)
 8012f12:	4598      	cmp	r8, r3
 8012f14:	d132      	bne.n	8012f7c <__ieee754_pow+0x154>
 8012f16:	f1b9 0f00 	cmp.w	r9, #0
 8012f1a:	f280 8478 	bge.w	801380e <__ieee754_pow+0x9e6>
 8012f1e:	4959      	ldr	r1, [pc, #356]	; (8013084 <__ieee754_pow+0x25c>)
 8012f20:	4632      	mov	r2, r6
 8012f22:	463b      	mov	r3, r7
 8012f24:	2000      	movs	r0, #0
 8012f26:	f7ed fc99 	bl	800085c <__aeabi_ddiv>
 8012f2a:	e79c      	b.n	8012e66 <__ieee754_pow+0x3e>
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	9304      	str	r3, [sp, #16]
 8012f30:	2a00      	cmp	r2, #0
 8012f32:	d13d      	bne.n	8012fb0 <__ieee754_pow+0x188>
 8012f34:	4b51      	ldr	r3, [pc, #324]	; (801307c <__ieee754_pow+0x254>)
 8012f36:	4598      	cmp	r8, r3
 8012f38:	d1ea      	bne.n	8012f10 <__ieee754_pow+0xe8>
 8012f3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012f3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012f42:	ea53 030a 	orrs.w	r3, r3, sl
 8012f46:	f000 845a 	beq.w	80137fe <__ieee754_pow+0x9d6>
 8012f4a:	4b4f      	ldr	r3, [pc, #316]	; (8013088 <__ieee754_pow+0x260>)
 8012f4c:	429c      	cmp	r4, r3
 8012f4e:	dd08      	ble.n	8012f62 <__ieee754_pow+0x13a>
 8012f50:	f1b9 0f00 	cmp.w	r9, #0
 8012f54:	f2c0 8457 	blt.w	8013806 <__ieee754_pow+0x9de>
 8012f58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f5c:	e783      	b.n	8012e66 <__ieee754_pow+0x3e>
 8012f5e:	2302      	movs	r3, #2
 8012f60:	e7e5      	b.n	8012f2e <__ieee754_pow+0x106>
 8012f62:	f1b9 0f00 	cmp.w	r9, #0
 8012f66:	f04f 0000 	mov.w	r0, #0
 8012f6a:	f04f 0100 	mov.w	r1, #0
 8012f6e:	f6bf af7a 	bge.w	8012e66 <__ieee754_pow+0x3e>
 8012f72:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012f76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012f7a:	e774      	b.n	8012e66 <__ieee754_pow+0x3e>
 8012f7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012f80:	d106      	bne.n	8012f90 <__ieee754_pow+0x168>
 8012f82:	4632      	mov	r2, r6
 8012f84:	463b      	mov	r3, r7
 8012f86:	4630      	mov	r0, r6
 8012f88:	4639      	mov	r1, r7
 8012f8a:	f7ed fb3d 	bl	8000608 <__aeabi_dmul>
 8012f8e:	e76a      	b.n	8012e66 <__ieee754_pow+0x3e>
 8012f90:	4b3e      	ldr	r3, [pc, #248]	; (801308c <__ieee754_pow+0x264>)
 8012f92:	4599      	cmp	r9, r3
 8012f94:	d10c      	bne.n	8012fb0 <__ieee754_pow+0x188>
 8012f96:	2d00      	cmp	r5, #0
 8012f98:	db0a      	blt.n	8012fb0 <__ieee754_pow+0x188>
 8012f9a:	ec47 6b10 	vmov	d0, r6, r7
 8012f9e:	b009      	add	sp, #36	; 0x24
 8012fa0:	ecbd 8b06 	vpop	{d8-d10}
 8012fa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa8:	f000 be7a 	b.w	8013ca0 <__ieee754_sqrt>
 8012fac:	2300      	movs	r3, #0
 8012fae:	9304      	str	r3, [sp, #16]
 8012fb0:	ec47 6b10 	vmov	d0, r6, r7
 8012fb4:	f001 fc2e 	bl	8014814 <fabs>
 8012fb8:	ec51 0b10 	vmov	r0, r1, d0
 8012fbc:	f1ba 0f00 	cmp.w	sl, #0
 8012fc0:	d129      	bne.n	8013016 <__ieee754_pow+0x1ee>
 8012fc2:	b124      	cbz	r4, 8012fce <__ieee754_pow+0x1a6>
 8012fc4:	4b2f      	ldr	r3, [pc, #188]	; (8013084 <__ieee754_pow+0x25c>)
 8012fc6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d123      	bne.n	8013016 <__ieee754_pow+0x1ee>
 8012fce:	f1b9 0f00 	cmp.w	r9, #0
 8012fd2:	da05      	bge.n	8012fe0 <__ieee754_pow+0x1b8>
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	2000      	movs	r0, #0
 8012fda:	492a      	ldr	r1, [pc, #168]	; (8013084 <__ieee754_pow+0x25c>)
 8012fdc:	f7ed fc3e 	bl	800085c <__aeabi_ddiv>
 8012fe0:	2d00      	cmp	r5, #0
 8012fe2:	f6bf af40 	bge.w	8012e66 <__ieee754_pow+0x3e>
 8012fe6:	9b04      	ldr	r3, [sp, #16]
 8012fe8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012fec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012ff0:	4323      	orrs	r3, r4
 8012ff2:	d108      	bne.n	8013006 <__ieee754_pow+0x1de>
 8012ff4:	4602      	mov	r2, r0
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	4610      	mov	r0, r2
 8012ffa:	4619      	mov	r1, r3
 8012ffc:	f7ed f94c 	bl	8000298 <__aeabi_dsub>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	e78f      	b.n	8012f26 <__ieee754_pow+0xfe>
 8013006:	9b04      	ldr	r3, [sp, #16]
 8013008:	2b01      	cmp	r3, #1
 801300a:	f47f af2c 	bne.w	8012e66 <__ieee754_pow+0x3e>
 801300e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013012:	4619      	mov	r1, r3
 8013014:	e727      	b.n	8012e66 <__ieee754_pow+0x3e>
 8013016:	0feb      	lsrs	r3, r5, #31
 8013018:	3b01      	subs	r3, #1
 801301a:	9306      	str	r3, [sp, #24]
 801301c:	9a06      	ldr	r2, [sp, #24]
 801301e:	9b04      	ldr	r3, [sp, #16]
 8013020:	4313      	orrs	r3, r2
 8013022:	d102      	bne.n	801302a <__ieee754_pow+0x202>
 8013024:	4632      	mov	r2, r6
 8013026:	463b      	mov	r3, r7
 8013028:	e7e6      	b.n	8012ff8 <__ieee754_pow+0x1d0>
 801302a:	4b19      	ldr	r3, [pc, #100]	; (8013090 <__ieee754_pow+0x268>)
 801302c:	4598      	cmp	r8, r3
 801302e:	f340 80fb 	ble.w	8013228 <__ieee754_pow+0x400>
 8013032:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013036:	4598      	cmp	r8, r3
 8013038:	4b13      	ldr	r3, [pc, #76]	; (8013088 <__ieee754_pow+0x260>)
 801303a:	dd0c      	ble.n	8013056 <__ieee754_pow+0x22e>
 801303c:	429c      	cmp	r4, r3
 801303e:	dc0f      	bgt.n	8013060 <__ieee754_pow+0x238>
 8013040:	f1b9 0f00 	cmp.w	r9, #0
 8013044:	da0f      	bge.n	8013066 <__ieee754_pow+0x23e>
 8013046:	2000      	movs	r0, #0
 8013048:	b009      	add	sp, #36	; 0x24
 801304a:	ecbd 8b06 	vpop	{d8-d10}
 801304e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013052:	f001 bbd6 	b.w	8014802 <__math_oflow>
 8013056:	429c      	cmp	r4, r3
 8013058:	dbf2      	blt.n	8013040 <__ieee754_pow+0x218>
 801305a:	4b0a      	ldr	r3, [pc, #40]	; (8013084 <__ieee754_pow+0x25c>)
 801305c:	429c      	cmp	r4, r3
 801305e:	dd19      	ble.n	8013094 <__ieee754_pow+0x26c>
 8013060:	f1b9 0f00 	cmp.w	r9, #0
 8013064:	dcef      	bgt.n	8013046 <__ieee754_pow+0x21e>
 8013066:	2000      	movs	r0, #0
 8013068:	b009      	add	sp, #36	; 0x24
 801306a:	ecbd 8b06 	vpop	{d8-d10}
 801306e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013072:	f001 bbbd 	b.w	80147f0 <__math_uflow>
 8013076:	bf00      	nop
 8013078:	fff00000 	.word	0xfff00000
 801307c:	7ff00000 	.word	0x7ff00000
 8013080:	433fffff 	.word	0x433fffff
 8013084:	3ff00000 	.word	0x3ff00000
 8013088:	3fefffff 	.word	0x3fefffff
 801308c:	3fe00000 	.word	0x3fe00000
 8013090:	41e00000 	.word	0x41e00000
 8013094:	4b60      	ldr	r3, [pc, #384]	; (8013218 <__ieee754_pow+0x3f0>)
 8013096:	2200      	movs	r2, #0
 8013098:	f7ed f8fe 	bl	8000298 <__aeabi_dsub>
 801309c:	a354      	add	r3, pc, #336	; (adr r3, 80131f0 <__ieee754_pow+0x3c8>)
 801309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130a2:	4604      	mov	r4, r0
 80130a4:	460d      	mov	r5, r1
 80130a6:	f7ed faaf 	bl	8000608 <__aeabi_dmul>
 80130aa:	a353      	add	r3, pc, #332	; (adr r3, 80131f8 <__ieee754_pow+0x3d0>)
 80130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b0:	4606      	mov	r6, r0
 80130b2:	460f      	mov	r7, r1
 80130b4:	4620      	mov	r0, r4
 80130b6:	4629      	mov	r1, r5
 80130b8:	f7ed faa6 	bl	8000608 <__aeabi_dmul>
 80130bc:	4b57      	ldr	r3, [pc, #348]	; (801321c <__ieee754_pow+0x3f4>)
 80130be:	4682      	mov	sl, r0
 80130c0:	468b      	mov	fp, r1
 80130c2:	2200      	movs	r2, #0
 80130c4:	4620      	mov	r0, r4
 80130c6:	4629      	mov	r1, r5
 80130c8:	f7ed fa9e 	bl	8000608 <__aeabi_dmul>
 80130cc:	4602      	mov	r2, r0
 80130ce:	460b      	mov	r3, r1
 80130d0:	a14b      	add	r1, pc, #300	; (adr r1, 8013200 <__ieee754_pow+0x3d8>)
 80130d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130d6:	f7ed f8df 	bl	8000298 <__aeabi_dsub>
 80130da:	4622      	mov	r2, r4
 80130dc:	462b      	mov	r3, r5
 80130de:	f7ed fa93 	bl	8000608 <__aeabi_dmul>
 80130e2:	4602      	mov	r2, r0
 80130e4:	460b      	mov	r3, r1
 80130e6:	2000      	movs	r0, #0
 80130e8:	494d      	ldr	r1, [pc, #308]	; (8013220 <__ieee754_pow+0x3f8>)
 80130ea:	f7ed f8d5 	bl	8000298 <__aeabi_dsub>
 80130ee:	4622      	mov	r2, r4
 80130f0:	4680      	mov	r8, r0
 80130f2:	4689      	mov	r9, r1
 80130f4:	462b      	mov	r3, r5
 80130f6:	4620      	mov	r0, r4
 80130f8:	4629      	mov	r1, r5
 80130fa:	f7ed fa85 	bl	8000608 <__aeabi_dmul>
 80130fe:	4602      	mov	r2, r0
 8013100:	460b      	mov	r3, r1
 8013102:	4640      	mov	r0, r8
 8013104:	4649      	mov	r1, r9
 8013106:	f7ed fa7f 	bl	8000608 <__aeabi_dmul>
 801310a:	a33f      	add	r3, pc, #252	; (adr r3, 8013208 <__ieee754_pow+0x3e0>)
 801310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013110:	f7ed fa7a 	bl	8000608 <__aeabi_dmul>
 8013114:	4602      	mov	r2, r0
 8013116:	460b      	mov	r3, r1
 8013118:	4650      	mov	r0, sl
 801311a:	4659      	mov	r1, fp
 801311c:	f7ed f8bc 	bl	8000298 <__aeabi_dsub>
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	4680      	mov	r8, r0
 8013126:	4689      	mov	r9, r1
 8013128:	4630      	mov	r0, r6
 801312a:	4639      	mov	r1, r7
 801312c:	f7ed f8b6 	bl	800029c <__adddf3>
 8013130:	2000      	movs	r0, #0
 8013132:	4632      	mov	r2, r6
 8013134:	463b      	mov	r3, r7
 8013136:	4604      	mov	r4, r0
 8013138:	460d      	mov	r5, r1
 801313a:	f7ed f8ad 	bl	8000298 <__aeabi_dsub>
 801313e:	4602      	mov	r2, r0
 8013140:	460b      	mov	r3, r1
 8013142:	4640      	mov	r0, r8
 8013144:	4649      	mov	r1, r9
 8013146:	f7ed f8a7 	bl	8000298 <__aeabi_dsub>
 801314a:	9b04      	ldr	r3, [sp, #16]
 801314c:	9a06      	ldr	r2, [sp, #24]
 801314e:	3b01      	subs	r3, #1
 8013150:	4313      	orrs	r3, r2
 8013152:	4682      	mov	sl, r0
 8013154:	468b      	mov	fp, r1
 8013156:	f040 81e7 	bne.w	8013528 <__ieee754_pow+0x700>
 801315a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8013210 <__ieee754_pow+0x3e8>
 801315e:	eeb0 8a47 	vmov.f32	s16, s14
 8013162:	eef0 8a67 	vmov.f32	s17, s15
 8013166:	e9dd 6700 	ldrd	r6, r7, [sp]
 801316a:	2600      	movs	r6, #0
 801316c:	4632      	mov	r2, r6
 801316e:	463b      	mov	r3, r7
 8013170:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013174:	f7ed f890 	bl	8000298 <__aeabi_dsub>
 8013178:	4622      	mov	r2, r4
 801317a:	462b      	mov	r3, r5
 801317c:	f7ed fa44 	bl	8000608 <__aeabi_dmul>
 8013180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013184:	4680      	mov	r8, r0
 8013186:	4689      	mov	r9, r1
 8013188:	4650      	mov	r0, sl
 801318a:	4659      	mov	r1, fp
 801318c:	f7ed fa3c 	bl	8000608 <__aeabi_dmul>
 8013190:	4602      	mov	r2, r0
 8013192:	460b      	mov	r3, r1
 8013194:	4640      	mov	r0, r8
 8013196:	4649      	mov	r1, r9
 8013198:	f7ed f880 	bl	800029c <__adddf3>
 801319c:	4632      	mov	r2, r6
 801319e:	463b      	mov	r3, r7
 80131a0:	4680      	mov	r8, r0
 80131a2:	4689      	mov	r9, r1
 80131a4:	4620      	mov	r0, r4
 80131a6:	4629      	mov	r1, r5
 80131a8:	f7ed fa2e 	bl	8000608 <__aeabi_dmul>
 80131ac:	460b      	mov	r3, r1
 80131ae:	4604      	mov	r4, r0
 80131b0:	460d      	mov	r5, r1
 80131b2:	4602      	mov	r2, r0
 80131b4:	4649      	mov	r1, r9
 80131b6:	4640      	mov	r0, r8
 80131b8:	f7ed f870 	bl	800029c <__adddf3>
 80131bc:	4b19      	ldr	r3, [pc, #100]	; (8013224 <__ieee754_pow+0x3fc>)
 80131be:	4299      	cmp	r1, r3
 80131c0:	ec45 4b19 	vmov	d9, r4, r5
 80131c4:	4606      	mov	r6, r0
 80131c6:	460f      	mov	r7, r1
 80131c8:	468b      	mov	fp, r1
 80131ca:	f340 82f1 	ble.w	80137b0 <__ieee754_pow+0x988>
 80131ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80131d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80131d6:	4303      	orrs	r3, r0
 80131d8:	f000 81e4 	beq.w	80135a4 <__ieee754_pow+0x77c>
 80131dc:	ec51 0b18 	vmov	r0, r1, d8
 80131e0:	2200      	movs	r2, #0
 80131e2:	2300      	movs	r3, #0
 80131e4:	f7ed fc82 	bl	8000aec <__aeabi_dcmplt>
 80131e8:	3800      	subs	r0, #0
 80131ea:	bf18      	it	ne
 80131ec:	2001      	movne	r0, #1
 80131ee:	e72b      	b.n	8013048 <__ieee754_pow+0x220>
 80131f0:	60000000 	.word	0x60000000
 80131f4:	3ff71547 	.word	0x3ff71547
 80131f8:	f85ddf44 	.word	0xf85ddf44
 80131fc:	3e54ae0b 	.word	0x3e54ae0b
 8013200:	55555555 	.word	0x55555555
 8013204:	3fd55555 	.word	0x3fd55555
 8013208:	652b82fe 	.word	0x652b82fe
 801320c:	3ff71547 	.word	0x3ff71547
 8013210:	00000000 	.word	0x00000000
 8013214:	bff00000 	.word	0xbff00000
 8013218:	3ff00000 	.word	0x3ff00000
 801321c:	3fd00000 	.word	0x3fd00000
 8013220:	3fe00000 	.word	0x3fe00000
 8013224:	408fffff 	.word	0x408fffff
 8013228:	4bd5      	ldr	r3, [pc, #852]	; (8013580 <__ieee754_pow+0x758>)
 801322a:	402b      	ands	r3, r5
 801322c:	2200      	movs	r2, #0
 801322e:	b92b      	cbnz	r3, 801323c <__ieee754_pow+0x414>
 8013230:	4bd4      	ldr	r3, [pc, #848]	; (8013584 <__ieee754_pow+0x75c>)
 8013232:	f7ed f9e9 	bl	8000608 <__aeabi_dmul>
 8013236:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801323a:	460c      	mov	r4, r1
 801323c:	1523      	asrs	r3, r4, #20
 801323e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013242:	4413      	add	r3, r2
 8013244:	9305      	str	r3, [sp, #20]
 8013246:	4bd0      	ldr	r3, [pc, #832]	; (8013588 <__ieee754_pow+0x760>)
 8013248:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801324c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013250:	429c      	cmp	r4, r3
 8013252:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013256:	dd08      	ble.n	801326a <__ieee754_pow+0x442>
 8013258:	4bcc      	ldr	r3, [pc, #816]	; (801358c <__ieee754_pow+0x764>)
 801325a:	429c      	cmp	r4, r3
 801325c:	f340 8162 	ble.w	8013524 <__ieee754_pow+0x6fc>
 8013260:	9b05      	ldr	r3, [sp, #20]
 8013262:	3301      	adds	r3, #1
 8013264:	9305      	str	r3, [sp, #20]
 8013266:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801326a:	2400      	movs	r4, #0
 801326c:	00e3      	lsls	r3, r4, #3
 801326e:	9307      	str	r3, [sp, #28]
 8013270:	4bc7      	ldr	r3, [pc, #796]	; (8013590 <__ieee754_pow+0x768>)
 8013272:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013276:	ed93 7b00 	vldr	d7, [r3]
 801327a:	4629      	mov	r1, r5
 801327c:	ec53 2b17 	vmov	r2, r3, d7
 8013280:	eeb0 9a47 	vmov.f32	s18, s14
 8013284:	eef0 9a67 	vmov.f32	s19, s15
 8013288:	4682      	mov	sl, r0
 801328a:	f7ed f805 	bl	8000298 <__aeabi_dsub>
 801328e:	4652      	mov	r2, sl
 8013290:	4606      	mov	r6, r0
 8013292:	460f      	mov	r7, r1
 8013294:	462b      	mov	r3, r5
 8013296:	ec51 0b19 	vmov	r0, r1, d9
 801329a:	f7ec ffff 	bl	800029c <__adddf3>
 801329e:	4602      	mov	r2, r0
 80132a0:	460b      	mov	r3, r1
 80132a2:	2000      	movs	r0, #0
 80132a4:	49bb      	ldr	r1, [pc, #748]	; (8013594 <__ieee754_pow+0x76c>)
 80132a6:	f7ed fad9 	bl	800085c <__aeabi_ddiv>
 80132aa:	ec41 0b1a 	vmov	d10, r0, r1
 80132ae:	4602      	mov	r2, r0
 80132b0:	460b      	mov	r3, r1
 80132b2:	4630      	mov	r0, r6
 80132b4:	4639      	mov	r1, r7
 80132b6:	f7ed f9a7 	bl	8000608 <__aeabi_dmul>
 80132ba:	2300      	movs	r3, #0
 80132bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132c0:	9302      	str	r3, [sp, #8]
 80132c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80132c6:	46ab      	mov	fp, r5
 80132c8:	106d      	asrs	r5, r5, #1
 80132ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80132ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80132d2:	ec41 0b18 	vmov	d8, r0, r1
 80132d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80132da:	2200      	movs	r2, #0
 80132dc:	4640      	mov	r0, r8
 80132de:	4649      	mov	r1, r9
 80132e0:	4614      	mov	r4, r2
 80132e2:	461d      	mov	r5, r3
 80132e4:	f7ed f990 	bl	8000608 <__aeabi_dmul>
 80132e8:	4602      	mov	r2, r0
 80132ea:	460b      	mov	r3, r1
 80132ec:	4630      	mov	r0, r6
 80132ee:	4639      	mov	r1, r7
 80132f0:	f7ec ffd2 	bl	8000298 <__aeabi_dsub>
 80132f4:	ec53 2b19 	vmov	r2, r3, d9
 80132f8:	4606      	mov	r6, r0
 80132fa:	460f      	mov	r7, r1
 80132fc:	4620      	mov	r0, r4
 80132fe:	4629      	mov	r1, r5
 8013300:	f7ec ffca 	bl	8000298 <__aeabi_dsub>
 8013304:	4602      	mov	r2, r0
 8013306:	460b      	mov	r3, r1
 8013308:	4650      	mov	r0, sl
 801330a:	4659      	mov	r1, fp
 801330c:	f7ec ffc4 	bl	8000298 <__aeabi_dsub>
 8013310:	4642      	mov	r2, r8
 8013312:	464b      	mov	r3, r9
 8013314:	f7ed f978 	bl	8000608 <__aeabi_dmul>
 8013318:	4602      	mov	r2, r0
 801331a:	460b      	mov	r3, r1
 801331c:	4630      	mov	r0, r6
 801331e:	4639      	mov	r1, r7
 8013320:	f7ec ffba 	bl	8000298 <__aeabi_dsub>
 8013324:	ec53 2b1a 	vmov	r2, r3, d10
 8013328:	f7ed f96e 	bl	8000608 <__aeabi_dmul>
 801332c:	ec53 2b18 	vmov	r2, r3, d8
 8013330:	ec41 0b19 	vmov	d9, r0, r1
 8013334:	ec51 0b18 	vmov	r0, r1, d8
 8013338:	f7ed f966 	bl	8000608 <__aeabi_dmul>
 801333c:	a37c      	add	r3, pc, #496	; (adr r3, 8013530 <__ieee754_pow+0x708>)
 801333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013342:	4604      	mov	r4, r0
 8013344:	460d      	mov	r5, r1
 8013346:	f7ed f95f 	bl	8000608 <__aeabi_dmul>
 801334a:	a37b      	add	r3, pc, #492	; (adr r3, 8013538 <__ieee754_pow+0x710>)
 801334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013350:	f7ec ffa4 	bl	800029c <__adddf3>
 8013354:	4622      	mov	r2, r4
 8013356:	462b      	mov	r3, r5
 8013358:	f7ed f956 	bl	8000608 <__aeabi_dmul>
 801335c:	a378      	add	r3, pc, #480	; (adr r3, 8013540 <__ieee754_pow+0x718>)
 801335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013362:	f7ec ff9b 	bl	800029c <__adddf3>
 8013366:	4622      	mov	r2, r4
 8013368:	462b      	mov	r3, r5
 801336a:	f7ed f94d 	bl	8000608 <__aeabi_dmul>
 801336e:	a376      	add	r3, pc, #472	; (adr r3, 8013548 <__ieee754_pow+0x720>)
 8013370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013374:	f7ec ff92 	bl	800029c <__adddf3>
 8013378:	4622      	mov	r2, r4
 801337a:	462b      	mov	r3, r5
 801337c:	f7ed f944 	bl	8000608 <__aeabi_dmul>
 8013380:	a373      	add	r3, pc, #460	; (adr r3, 8013550 <__ieee754_pow+0x728>)
 8013382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013386:	f7ec ff89 	bl	800029c <__adddf3>
 801338a:	4622      	mov	r2, r4
 801338c:	462b      	mov	r3, r5
 801338e:	f7ed f93b 	bl	8000608 <__aeabi_dmul>
 8013392:	a371      	add	r3, pc, #452	; (adr r3, 8013558 <__ieee754_pow+0x730>)
 8013394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013398:	f7ec ff80 	bl	800029c <__adddf3>
 801339c:	4622      	mov	r2, r4
 801339e:	4606      	mov	r6, r0
 80133a0:	460f      	mov	r7, r1
 80133a2:	462b      	mov	r3, r5
 80133a4:	4620      	mov	r0, r4
 80133a6:	4629      	mov	r1, r5
 80133a8:	f7ed f92e 	bl	8000608 <__aeabi_dmul>
 80133ac:	4602      	mov	r2, r0
 80133ae:	460b      	mov	r3, r1
 80133b0:	4630      	mov	r0, r6
 80133b2:	4639      	mov	r1, r7
 80133b4:	f7ed f928 	bl	8000608 <__aeabi_dmul>
 80133b8:	4642      	mov	r2, r8
 80133ba:	4604      	mov	r4, r0
 80133bc:	460d      	mov	r5, r1
 80133be:	464b      	mov	r3, r9
 80133c0:	ec51 0b18 	vmov	r0, r1, d8
 80133c4:	f7ec ff6a 	bl	800029c <__adddf3>
 80133c8:	ec53 2b19 	vmov	r2, r3, d9
 80133cc:	f7ed f91c 	bl	8000608 <__aeabi_dmul>
 80133d0:	4622      	mov	r2, r4
 80133d2:	462b      	mov	r3, r5
 80133d4:	f7ec ff62 	bl	800029c <__adddf3>
 80133d8:	4642      	mov	r2, r8
 80133da:	4682      	mov	sl, r0
 80133dc:	468b      	mov	fp, r1
 80133de:	464b      	mov	r3, r9
 80133e0:	4640      	mov	r0, r8
 80133e2:	4649      	mov	r1, r9
 80133e4:	f7ed f910 	bl	8000608 <__aeabi_dmul>
 80133e8:	4b6b      	ldr	r3, [pc, #428]	; (8013598 <__ieee754_pow+0x770>)
 80133ea:	2200      	movs	r2, #0
 80133ec:	4606      	mov	r6, r0
 80133ee:	460f      	mov	r7, r1
 80133f0:	f7ec ff54 	bl	800029c <__adddf3>
 80133f4:	4652      	mov	r2, sl
 80133f6:	465b      	mov	r3, fp
 80133f8:	f7ec ff50 	bl	800029c <__adddf3>
 80133fc:	2000      	movs	r0, #0
 80133fe:	4604      	mov	r4, r0
 8013400:	460d      	mov	r5, r1
 8013402:	4602      	mov	r2, r0
 8013404:	460b      	mov	r3, r1
 8013406:	4640      	mov	r0, r8
 8013408:	4649      	mov	r1, r9
 801340a:	f7ed f8fd 	bl	8000608 <__aeabi_dmul>
 801340e:	4b62      	ldr	r3, [pc, #392]	; (8013598 <__ieee754_pow+0x770>)
 8013410:	4680      	mov	r8, r0
 8013412:	4689      	mov	r9, r1
 8013414:	2200      	movs	r2, #0
 8013416:	4620      	mov	r0, r4
 8013418:	4629      	mov	r1, r5
 801341a:	f7ec ff3d 	bl	8000298 <__aeabi_dsub>
 801341e:	4632      	mov	r2, r6
 8013420:	463b      	mov	r3, r7
 8013422:	f7ec ff39 	bl	8000298 <__aeabi_dsub>
 8013426:	4602      	mov	r2, r0
 8013428:	460b      	mov	r3, r1
 801342a:	4650      	mov	r0, sl
 801342c:	4659      	mov	r1, fp
 801342e:	f7ec ff33 	bl	8000298 <__aeabi_dsub>
 8013432:	ec53 2b18 	vmov	r2, r3, d8
 8013436:	f7ed f8e7 	bl	8000608 <__aeabi_dmul>
 801343a:	4622      	mov	r2, r4
 801343c:	4606      	mov	r6, r0
 801343e:	460f      	mov	r7, r1
 8013440:	462b      	mov	r3, r5
 8013442:	ec51 0b19 	vmov	r0, r1, d9
 8013446:	f7ed f8df 	bl	8000608 <__aeabi_dmul>
 801344a:	4602      	mov	r2, r0
 801344c:	460b      	mov	r3, r1
 801344e:	4630      	mov	r0, r6
 8013450:	4639      	mov	r1, r7
 8013452:	f7ec ff23 	bl	800029c <__adddf3>
 8013456:	4606      	mov	r6, r0
 8013458:	460f      	mov	r7, r1
 801345a:	4602      	mov	r2, r0
 801345c:	460b      	mov	r3, r1
 801345e:	4640      	mov	r0, r8
 8013460:	4649      	mov	r1, r9
 8013462:	f7ec ff1b 	bl	800029c <__adddf3>
 8013466:	a33e      	add	r3, pc, #248	; (adr r3, 8013560 <__ieee754_pow+0x738>)
 8013468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346c:	2000      	movs	r0, #0
 801346e:	4604      	mov	r4, r0
 8013470:	460d      	mov	r5, r1
 8013472:	f7ed f8c9 	bl	8000608 <__aeabi_dmul>
 8013476:	4642      	mov	r2, r8
 8013478:	ec41 0b18 	vmov	d8, r0, r1
 801347c:	464b      	mov	r3, r9
 801347e:	4620      	mov	r0, r4
 8013480:	4629      	mov	r1, r5
 8013482:	f7ec ff09 	bl	8000298 <__aeabi_dsub>
 8013486:	4602      	mov	r2, r0
 8013488:	460b      	mov	r3, r1
 801348a:	4630      	mov	r0, r6
 801348c:	4639      	mov	r1, r7
 801348e:	f7ec ff03 	bl	8000298 <__aeabi_dsub>
 8013492:	a335      	add	r3, pc, #212	; (adr r3, 8013568 <__ieee754_pow+0x740>)
 8013494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013498:	f7ed f8b6 	bl	8000608 <__aeabi_dmul>
 801349c:	a334      	add	r3, pc, #208	; (adr r3, 8013570 <__ieee754_pow+0x748>)
 801349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a2:	4606      	mov	r6, r0
 80134a4:	460f      	mov	r7, r1
 80134a6:	4620      	mov	r0, r4
 80134a8:	4629      	mov	r1, r5
 80134aa:	f7ed f8ad 	bl	8000608 <__aeabi_dmul>
 80134ae:	4602      	mov	r2, r0
 80134b0:	460b      	mov	r3, r1
 80134b2:	4630      	mov	r0, r6
 80134b4:	4639      	mov	r1, r7
 80134b6:	f7ec fef1 	bl	800029c <__adddf3>
 80134ba:	9a07      	ldr	r2, [sp, #28]
 80134bc:	4b37      	ldr	r3, [pc, #220]	; (801359c <__ieee754_pow+0x774>)
 80134be:	4413      	add	r3, r2
 80134c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c4:	f7ec feea 	bl	800029c <__adddf3>
 80134c8:	4682      	mov	sl, r0
 80134ca:	9805      	ldr	r0, [sp, #20]
 80134cc:	468b      	mov	fp, r1
 80134ce:	f7ed f831 	bl	8000534 <__aeabi_i2d>
 80134d2:	9a07      	ldr	r2, [sp, #28]
 80134d4:	4b32      	ldr	r3, [pc, #200]	; (80135a0 <__ieee754_pow+0x778>)
 80134d6:	4413      	add	r3, r2
 80134d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80134dc:	4606      	mov	r6, r0
 80134de:	460f      	mov	r7, r1
 80134e0:	4652      	mov	r2, sl
 80134e2:	465b      	mov	r3, fp
 80134e4:	ec51 0b18 	vmov	r0, r1, d8
 80134e8:	f7ec fed8 	bl	800029c <__adddf3>
 80134ec:	4642      	mov	r2, r8
 80134ee:	464b      	mov	r3, r9
 80134f0:	f7ec fed4 	bl	800029c <__adddf3>
 80134f4:	4632      	mov	r2, r6
 80134f6:	463b      	mov	r3, r7
 80134f8:	f7ec fed0 	bl	800029c <__adddf3>
 80134fc:	2000      	movs	r0, #0
 80134fe:	4632      	mov	r2, r6
 8013500:	463b      	mov	r3, r7
 8013502:	4604      	mov	r4, r0
 8013504:	460d      	mov	r5, r1
 8013506:	f7ec fec7 	bl	8000298 <__aeabi_dsub>
 801350a:	4642      	mov	r2, r8
 801350c:	464b      	mov	r3, r9
 801350e:	f7ec fec3 	bl	8000298 <__aeabi_dsub>
 8013512:	ec53 2b18 	vmov	r2, r3, d8
 8013516:	f7ec febf 	bl	8000298 <__aeabi_dsub>
 801351a:	4602      	mov	r2, r0
 801351c:	460b      	mov	r3, r1
 801351e:	4650      	mov	r0, sl
 8013520:	4659      	mov	r1, fp
 8013522:	e610      	b.n	8013146 <__ieee754_pow+0x31e>
 8013524:	2401      	movs	r4, #1
 8013526:	e6a1      	b.n	801326c <__ieee754_pow+0x444>
 8013528:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8013578 <__ieee754_pow+0x750>
 801352c:	e617      	b.n	801315e <__ieee754_pow+0x336>
 801352e:	bf00      	nop
 8013530:	4a454eef 	.word	0x4a454eef
 8013534:	3fca7e28 	.word	0x3fca7e28
 8013538:	93c9db65 	.word	0x93c9db65
 801353c:	3fcd864a 	.word	0x3fcd864a
 8013540:	a91d4101 	.word	0xa91d4101
 8013544:	3fd17460 	.word	0x3fd17460
 8013548:	518f264d 	.word	0x518f264d
 801354c:	3fd55555 	.word	0x3fd55555
 8013550:	db6fabff 	.word	0xdb6fabff
 8013554:	3fdb6db6 	.word	0x3fdb6db6
 8013558:	33333303 	.word	0x33333303
 801355c:	3fe33333 	.word	0x3fe33333
 8013560:	e0000000 	.word	0xe0000000
 8013564:	3feec709 	.word	0x3feec709
 8013568:	dc3a03fd 	.word	0xdc3a03fd
 801356c:	3feec709 	.word	0x3feec709
 8013570:	145b01f5 	.word	0x145b01f5
 8013574:	be3e2fe0 	.word	0xbe3e2fe0
 8013578:	00000000 	.word	0x00000000
 801357c:	3ff00000 	.word	0x3ff00000
 8013580:	7ff00000 	.word	0x7ff00000
 8013584:	43400000 	.word	0x43400000
 8013588:	0003988e 	.word	0x0003988e
 801358c:	000bb679 	.word	0x000bb679
 8013590:	08015d88 	.word	0x08015d88
 8013594:	3ff00000 	.word	0x3ff00000
 8013598:	40080000 	.word	0x40080000
 801359c:	08015da8 	.word	0x08015da8
 80135a0:	08015d98 	.word	0x08015d98
 80135a4:	a3b5      	add	r3, pc, #724	; (adr r3, 801387c <__ieee754_pow+0xa54>)
 80135a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135aa:	4640      	mov	r0, r8
 80135ac:	4649      	mov	r1, r9
 80135ae:	f7ec fe75 	bl	800029c <__adddf3>
 80135b2:	4622      	mov	r2, r4
 80135b4:	ec41 0b1a 	vmov	d10, r0, r1
 80135b8:	462b      	mov	r3, r5
 80135ba:	4630      	mov	r0, r6
 80135bc:	4639      	mov	r1, r7
 80135be:	f7ec fe6b 	bl	8000298 <__aeabi_dsub>
 80135c2:	4602      	mov	r2, r0
 80135c4:	460b      	mov	r3, r1
 80135c6:	ec51 0b1a 	vmov	r0, r1, d10
 80135ca:	f7ed faad 	bl	8000b28 <__aeabi_dcmpgt>
 80135ce:	2800      	cmp	r0, #0
 80135d0:	f47f ae04 	bne.w	80131dc <__ieee754_pow+0x3b4>
 80135d4:	4aa4      	ldr	r2, [pc, #656]	; (8013868 <__ieee754_pow+0xa40>)
 80135d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80135da:	4293      	cmp	r3, r2
 80135dc:	f340 8108 	ble.w	80137f0 <__ieee754_pow+0x9c8>
 80135e0:	151b      	asrs	r3, r3, #20
 80135e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80135e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80135ea:	fa4a f303 	asr.w	r3, sl, r3
 80135ee:	445b      	add	r3, fp
 80135f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80135f4:	4e9d      	ldr	r6, [pc, #628]	; (801386c <__ieee754_pow+0xa44>)
 80135f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80135fa:	4116      	asrs	r6, r2
 80135fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013600:	2000      	movs	r0, #0
 8013602:	ea23 0106 	bic.w	r1, r3, r6
 8013606:	f1c2 0214 	rsb	r2, r2, #20
 801360a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801360e:	fa4a fa02 	asr.w	sl, sl, r2
 8013612:	f1bb 0f00 	cmp.w	fp, #0
 8013616:	4602      	mov	r2, r0
 8013618:	460b      	mov	r3, r1
 801361a:	4620      	mov	r0, r4
 801361c:	4629      	mov	r1, r5
 801361e:	bfb8      	it	lt
 8013620:	f1ca 0a00 	rsblt	sl, sl, #0
 8013624:	f7ec fe38 	bl	8000298 <__aeabi_dsub>
 8013628:	ec41 0b19 	vmov	d9, r0, r1
 801362c:	4642      	mov	r2, r8
 801362e:	464b      	mov	r3, r9
 8013630:	ec51 0b19 	vmov	r0, r1, d9
 8013634:	f7ec fe32 	bl	800029c <__adddf3>
 8013638:	a37b      	add	r3, pc, #492	; (adr r3, 8013828 <__ieee754_pow+0xa00>)
 801363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363e:	2000      	movs	r0, #0
 8013640:	4604      	mov	r4, r0
 8013642:	460d      	mov	r5, r1
 8013644:	f7ec ffe0 	bl	8000608 <__aeabi_dmul>
 8013648:	ec53 2b19 	vmov	r2, r3, d9
 801364c:	4606      	mov	r6, r0
 801364e:	460f      	mov	r7, r1
 8013650:	4620      	mov	r0, r4
 8013652:	4629      	mov	r1, r5
 8013654:	f7ec fe20 	bl	8000298 <__aeabi_dsub>
 8013658:	4602      	mov	r2, r0
 801365a:	460b      	mov	r3, r1
 801365c:	4640      	mov	r0, r8
 801365e:	4649      	mov	r1, r9
 8013660:	f7ec fe1a 	bl	8000298 <__aeabi_dsub>
 8013664:	a372      	add	r3, pc, #456	; (adr r3, 8013830 <__ieee754_pow+0xa08>)
 8013666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366a:	f7ec ffcd 	bl	8000608 <__aeabi_dmul>
 801366e:	a372      	add	r3, pc, #456	; (adr r3, 8013838 <__ieee754_pow+0xa10>)
 8013670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013674:	4680      	mov	r8, r0
 8013676:	4689      	mov	r9, r1
 8013678:	4620      	mov	r0, r4
 801367a:	4629      	mov	r1, r5
 801367c:	f7ec ffc4 	bl	8000608 <__aeabi_dmul>
 8013680:	4602      	mov	r2, r0
 8013682:	460b      	mov	r3, r1
 8013684:	4640      	mov	r0, r8
 8013686:	4649      	mov	r1, r9
 8013688:	f7ec fe08 	bl	800029c <__adddf3>
 801368c:	4604      	mov	r4, r0
 801368e:	460d      	mov	r5, r1
 8013690:	4602      	mov	r2, r0
 8013692:	460b      	mov	r3, r1
 8013694:	4630      	mov	r0, r6
 8013696:	4639      	mov	r1, r7
 8013698:	f7ec fe00 	bl	800029c <__adddf3>
 801369c:	4632      	mov	r2, r6
 801369e:	463b      	mov	r3, r7
 80136a0:	4680      	mov	r8, r0
 80136a2:	4689      	mov	r9, r1
 80136a4:	f7ec fdf8 	bl	8000298 <__aeabi_dsub>
 80136a8:	4602      	mov	r2, r0
 80136aa:	460b      	mov	r3, r1
 80136ac:	4620      	mov	r0, r4
 80136ae:	4629      	mov	r1, r5
 80136b0:	f7ec fdf2 	bl	8000298 <__aeabi_dsub>
 80136b4:	4642      	mov	r2, r8
 80136b6:	4606      	mov	r6, r0
 80136b8:	460f      	mov	r7, r1
 80136ba:	464b      	mov	r3, r9
 80136bc:	4640      	mov	r0, r8
 80136be:	4649      	mov	r1, r9
 80136c0:	f7ec ffa2 	bl	8000608 <__aeabi_dmul>
 80136c4:	a35e      	add	r3, pc, #376	; (adr r3, 8013840 <__ieee754_pow+0xa18>)
 80136c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ca:	4604      	mov	r4, r0
 80136cc:	460d      	mov	r5, r1
 80136ce:	f7ec ff9b 	bl	8000608 <__aeabi_dmul>
 80136d2:	a35d      	add	r3, pc, #372	; (adr r3, 8013848 <__ieee754_pow+0xa20>)
 80136d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d8:	f7ec fdde 	bl	8000298 <__aeabi_dsub>
 80136dc:	4622      	mov	r2, r4
 80136de:	462b      	mov	r3, r5
 80136e0:	f7ec ff92 	bl	8000608 <__aeabi_dmul>
 80136e4:	a35a      	add	r3, pc, #360	; (adr r3, 8013850 <__ieee754_pow+0xa28>)
 80136e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ea:	f7ec fdd7 	bl	800029c <__adddf3>
 80136ee:	4622      	mov	r2, r4
 80136f0:	462b      	mov	r3, r5
 80136f2:	f7ec ff89 	bl	8000608 <__aeabi_dmul>
 80136f6:	a358      	add	r3, pc, #352	; (adr r3, 8013858 <__ieee754_pow+0xa30>)
 80136f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136fc:	f7ec fdcc 	bl	8000298 <__aeabi_dsub>
 8013700:	4622      	mov	r2, r4
 8013702:	462b      	mov	r3, r5
 8013704:	f7ec ff80 	bl	8000608 <__aeabi_dmul>
 8013708:	a355      	add	r3, pc, #340	; (adr r3, 8013860 <__ieee754_pow+0xa38>)
 801370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370e:	f7ec fdc5 	bl	800029c <__adddf3>
 8013712:	4622      	mov	r2, r4
 8013714:	462b      	mov	r3, r5
 8013716:	f7ec ff77 	bl	8000608 <__aeabi_dmul>
 801371a:	4602      	mov	r2, r0
 801371c:	460b      	mov	r3, r1
 801371e:	4640      	mov	r0, r8
 8013720:	4649      	mov	r1, r9
 8013722:	f7ec fdb9 	bl	8000298 <__aeabi_dsub>
 8013726:	4604      	mov	r4, r0
 8013728:	460d      	mov	r5, r1
 801372a:	4602      	mov	r2, r0
 801372c:	460b      	mov	r3, r1
 801372e:	4640      	mov	r0, r8
 8013730:	4649      	mov	r1, r9
 8013732:	f7ec ff69 	bl	8000608 <__aeabi_dmul>
 8013736:	2200      	movs	r2, #0
 8013738:	ec41 0b19 	vmov	d9, r0, r1
 801373c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013740:	4620      	mov	r0, r4
 8013742:	4629      	mov	r1, r5
 8013744:	f7ec fda8 	bl	8000298 <__aeabi_dsub>
 8013748:	4602      	mov	r2, r0
 801374a:	460b      	mov	r3, r1
 801374c:	ec51 0b19 	vmov	r0, r1, d9
 8013750:	f7ed f884 	bl	800085c <__aeabi_ddiv>
 8013754:	4632      	mov	r2, r6
 8013756:	4604      	mov	r4, r0
 8013758:	460d      	mov	r5, r1
 801375a:	463b      	mov	r3, r7
 801375c:	4640      	mov	r0, r8
 801375e:	4649      	mov	r1, r9
 8013760:	f7ec ff52 	bl	8000608 <__aeabi_dmul>
 8013764:	4632      	mov	r2, r6
 8013766:	463b      	mov	r3, r7
 8013768:	f7ec fd98 	bl	800029c <__adddf3>
 801376c:	4602      	mov	r2, r0
 801376e:	460b      	mov	r3, r1
 8013770:	4620      	mov	r0, r4
 8013772:	4629      	mov	r1, r5
 8013774:	f7ec fd90 	bl	8000298 <__aeabi_dsub>
 8013778:	4642      	mov	r2, r8
 801377a:	464b      	mov	r3, r9
 801377c:	f7ec fd8c 	bl	8000298 <__aeabi_dsub>
 8013780:	460b      	mov	r3, r1
 8013782:	4602      	mov	r2, r0
 8013784:	493a      	ldr	r1, [pc, #232]	; (8013870 <__ieee754_pow+0xa48>)
 8013786:	2000      	movs	r0, #0
 8013788:	f7ec fd86 	bl	8000298 <__aeabi_dsub>
 801378c:	ec41 0b10 	vmov	d0, r0, r1
 8013790:	ee10 3a90 	vmov	r3, s1
 8013794:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801379c:	da2b      	bge.n	80137f6 <__ieee754_pow+0x9ce>
 801379e:	4650      	mov	r0, sl
 80137a0:	f001 f8ce 	bl	8014940 <scalbn>
 80137a4:	ec51 0b10 	vmov	r0, r1, d0
 80137a8:	ec53 2b18 	vmov	r2, r3, d8
 80137ac:	f7ff bbed 	b.w	8012f8a <__ieee754_pow+0x162>
 80137b0:	4b30      	ldr	r3, [pc, #192]	; (8013874 <__ieee754_pow+0xa4c>)
 80137b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80137b6:	429e      	cmp	r6, r3
 80137b8:	f77f af0c 	ble.w	80135d4 <__ieee754_pow+0x7ac>
 80137bc:	4b2e      	ldr	r3, [pc, #184]	; (8013878 <__ieee754_pow+0xa50>)
 80137be:	440b      	add	r3, r1
 80137c0:	4303      	orrs	r3, r0
 80137c2:	d009      	beq.n	80137d8 <__ieee754_pow+0x9b0>
 80137c4:	ec51 0b18 	vmov	r0, r1, d8
 80137c8:	2200      	movs	r2, #0
 80137ca:	2300      	movs	r3, #0
 80137cc:	f7ed f98e 	bl	8000aec <__aeabi_dcmplt>
 80137d0:	3800      	subs	r0, #0
 80137d2:	bf18      	it	ne
 80137d4:	2001      	movne	r0, #1
 80137d6:	e447      	b.n	8013068 <__ieee754_pow+0x240>
 80137d8:	4622      	mov	r2, r4
 80137da:	462b      	mov	r3, r5
 80137dc:	f7ec fd5c 	bl	8000298 <__aeabi_dsub>
 80137e0:	4642      	mov	r2, r8
 80137e2:	464b      	mov	r3, r9
 80137e4:	f7ed f996 	bl	8000b14 <__aeabi_dcmpge>
 80137e8:	2800      	cmp	r0, #0
 80137ea:	f43f aef3 	beq.w	80135d4 <__ieee754_pow+0x7ac>
 80137ee:	e7e9      	b.n	80137c4 <__ieee754_pow+0x99c>
 80137f0:	f04f 0a00 	mov.w	sl, #0
 80137f4:	e71a      	b.n	801362c <__ieee754_pow+0x804>
 80137f6:	ec51 0b10 	vmov	r0, r1, d0
 80137fa:	4619      	mov	r1, r3
 80137fc:	e7d4      	b.n	80137a8 <__ieee754_pow+0x980>
 80137fe:	491c      	ldr	r1, [pc, #112]	; (8013870 <__ieee754_pow+0xa48>)
 8013800:	2000      	movs	r0, #0
 8013802:	f7ff bb30 	b.w	8012e66 <__ieee754_pow+0x3e>
 8013806:	2000      	movs	r0, #0
 8013808:	2100      	movs	r1, #0
 801380a:	f7ff bb2c 	b.w	8012e66 <__ieee754_pow+0x3e>
 801380e:	4630      	mov	r0, r6
 8013810:	4639      	mov	r1, r7
 8013812:	f7ff bb28 	b.w	8012e66 <__ieee754_pow+0x3e>
 8013816:	9204      	str	r2, [sp, #16]
 8013818:	f7ff bb7a 	b.w	8012f10 <__ieee754_pow+0xe8>
 801381c:	2300      	movs	r3, #0
 801381e:	f7ff bb64 	b.w	8012eea <__ieee754_pow+0xc2>
 8013822:	bf00      	nop
 8013824:	f3af 8000 	nop.w
 8013828:	00000000 	.word	0x00000000
 801382c:	3fe62e43 	.word	0x3fe62e43
 8013830:	fefa39ef 	.word	0xfefa39ef
 8013834:	3fe62e42 	.word	0x3fe62e42
 8013838:	0ca86c39 	.word	0x0ca86c39
 801383c:	be205c61 	.word	0xbe205c61
 8013840:	72bea4d0 	.word	0x72bea4d0
 8013844:	3e663769 	.word	0x3e663769
 8013848:	c5d26bf1 	.word	0xc5d26bf1
 801384c:	3ebbbd41 	.word	0x3ebbbd41
 8013850:	af25de2c 	.word	0xaf25de2c
 8013854:	3f11566a 	.word	0x3f11566a
 8013858:	16bebd93 	.word	0x16bebd93
 801385c:	3f66c16c 	.word	0x3f66c16c
 8013860:	5555553e 	.word	0x5555553e
 8013864:	3fc55555 	.word	0x3fc55555
 8013868:	3fe00000 	.word	0x3fe00000
 801386c:	000fffff 	.word	0x000fffff
 8013870:	3ff00000 	.word	0x3ff00000
 8013874:	4090cbff 	.word	0x4090cbff
 8013878:	3f6f3400 	.word	0x3f6f3400
 801387c:	652b82fe 	.word	0x652b82fe
 8013880:	3c971547 	.word	0x3c971547
 8013884:	00000000 	.word	0x00000000

08013888 <__ieee754_rem_pio2>:
 8013888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801388c:	ed2d 8b02 	vpush	{d8}
 8013890:	ec55 4b10 	vmov	r4, r5, d0
 8013894:	4bca      	ldr	r3, [pc, #808]	; (8013bc0 <__ieee754_rem_pio2+0x338>)
 8013896:	b08b      	sub	sp, #44	; 0x2c
 8013898:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801389c:	4598      	cmp	r8, r3
 801389e:	4682      	mov	sl, r0
 80138a0:	9502      	str	r5, [sp, #8]
 80138a2:	dc08      	bgt.n	80138b6 <__ieee754_rem_pio2+0x2e>
 80138a4:	2200      	movs	r2, #0
 80138a6:	2300      	movs	r3, #0
 80138a8:	ed80 0b00 	vstr	d0, [r0]
 80138ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80138b0:	f04f 0b00 	mov.w	fp, #0
 80138b4:	e028      	b.n	8013908 <__ieee754_rem_pio2+0x80>
 80138b6:	4bc3      	ldr	r3, [pc, #780]	; (8013bc4 <__ieee754_rem_pio2+0x33c>)
 80138b8:	4598      	cmp	r8, r3
 80138ba:	dc78      	bgt.n	80139ae <__ieee754_rem_pio2+0x126>
 80138bc:	9b02      	ldr	r3, [sp, #8]
 80138be:	4ec2      	ldr	r6, [pc, #776]	; (8013bc8 <__ieee754_rem_pio2+0x340>)
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	ee10 0a10 	vmov	r0, s0
 80138c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8013b88 <__ieee754_rem_pio2+0x300>)
 80138c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138cc:	4629      	mov	r1, r5
 80138ce:	dd39      	ble.n	8013944 <__ieee754_rem_pio2+0xbc>
 80138d0:	f7ec fce2 	bl	8000298 <__aeabi_dsub>
 80138d4:	45b0      	cmp	r8, r6
 80138d6:	4604      	mov	r4, r0
 80138d8:	460d      	mov	r5, r1
 80138da:	d01b      	beq.n	8013914 <__ieee754_rem_pio2+0x8c>
 80138dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8013b90 <__ieee754_rem_pio2+0x308>)
 80138de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e2:	f7ec fcd9 	bl	8000298 <__aeabi_dsub>
 80138e6:	4602      	mov	r2, r0
 80138e8:	460b      	mov	r3, r1
 80138ea:	e9ca 2300 	strd	r2, r3, [sl]
 80138ee:	4620      	mov	r0, r4
 80138f0:	4629      	mov	r1, r5
 80138f2:	f7ec fcd1 	bl	8000298 <__aeabi_dsub>
 80138f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8013b90 <__ieee754_rem_pio2+0x308>)
 80138f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fc:	f7ec fccc 	bl	8000298 <__aeabi_dsub>
 8013900:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013904:	f04f 0b01 	mov.w	fp, #1
 8013908:	4658      	mov	r0, fp
 801390a:	b00b      	add	sp, #44	; 0x2c
 801390c:	ecbd 8b02 	vpop	{d8}
 8013910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013914:	a3a0      	add	r3, pc, #640	; (adr r3, 8013b98 <__ieee754_rem_pio2+0x310>)
 8013916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391a:	f7ec fcbd 	bl	8000298 <__aeabi_dsub>
 801391e:	a3a0      	add	r3, pc, #640	; (adr r3, 8013ba0 <__ieee754_rem_pio2+0x318>)
 8013920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013924:	4604      	mov	r4, r0
 8013926:	460d      	mov	r5, r1
 8013928:	f7ec fcb6 	bl	8000298 <__aeabi_dsub>
 801392c:	4602      	mov	r2, r0
 801392e:	460b      	mov	r3, r1
 8013930:	e9ca 2300 	strd	r2, r3, [sl]
 8013934:	4620      	mov	r0, r4
 8013936:	4629      	mov	r1, r5
 8013938:	f7ec fcae 	bl	8000298 <__aeabi_dsub>
 801393c:	a398      	add	r3, pc, #608	; (adr r3, 8013ba0 <__ieee754_rem_pio2+0x318>)
 801393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013942:	e7db      	b.n	80138fc <__ieee754_rem_pio2+0x74>
 8013944:	f7ec fcaa 	bl	800029c <__adddf3>
 8013948:	45b0      	cmp	r8, r6
 801394a:	4604      	mov	r4, r0
 801394c:	460d      	mov	r5, r1
 801394e:	d016      	beq.n	801397e <__ieee754_rem_pio2+0xf6>
 8013950:	a38f      	add	r3, pc, #572	; (adr r3, 8013b90 <__ieee754_rem_pio2+0x308>)
 8013952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013956:	f7ec fca1 	bl	800029c <__adddf3>
 801395a:	4602      	mov	r2, r0
 801395c:	460b      	mov	r3, r1
 801395e:	e9ca 2300 	strd	r2, r3, [sl]
 8013962:	4620      	mov	r0, r4
 8013964:	4629      	mov	r1, r5
 8013966:	f7ec fc97 	bl	8000298 <__aeabi_dsub>
 801396a:	a389      	add	r3, pc, #548	; (adr r3, 8013b90 <__ieee754_rem_pio2+0x308>)
 801396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013970:	f7ec fc94 	bl	800029c <__adddf3>
 8013974:	f04f 3bff 	mov.w	fp, #4294967295
 8013978:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801397c:	e7c4      	b.n	8013908 <__ieee754_rem_pio2+0x80>
 801397e:	a386      	add	r3, pc, #536	; (adr r3, 8013b98 <__ieee754_rem_pio2+0x310>)
 8013980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013984:	f7ec fc8a 	bl	800029c <__adddf3>
 8013988:	a385      	add	r3, pc, #532	; (adr r3, 8013ba0 <__ieee754_rem_pio2+0x318>)
 801398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801398e:	4604      	mov	r4, r0
 8013990:	460d      	mov	r5, r1
 8013992:	f7ec fc83 	bl	800029c <__adddf3>
 8013996:	4602      	mov	r2, r0
 8013998:	460b      	mov	r3, r1
 801399a:	e9ca 2300 	strd	r2, r3, [sl]
 801399e:	4620      	mov	r0, r4
 80139a0:	4629      	mov	r1, r5
 80139a2:	f7ec fc79 	bl	8000298 <__aeabi_dsub>
 80139a6:	a37e      	add	r3, pc, #504	; (adr r3, 8013ba0 <__ieee754_rem_pio2+0x318>)
 80139a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ac:	e7e0      	b.n	8013970 <__ieee754_rem_pio2+0xe8>
 80139ae:	4b87      	ldr	r3, [pc, #540]	; (8013bcc <__ieee754_rem_pio2+0x344>)
 80139b0:	4598      	cmp	r8, r3
 80139b2:	f300 80d9 	bgt.w	8013b68 <__ieee754_rem_pio2+0x2e0>
 80139b6:	f000 ff2d 	bl	8014814 <fabs>
 80139ba:	ec55 4b10 	vmov	r4, r5, d0
 80139be:	ee10 0a10 	vmov	r0, s0
 80139c2:	a379      	add	r3, pc, #484	; (adr r3, 8013ba8 <__ieee754_rem_pio2+0x320>)
 80139c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c8:	4629      	mov	r1, r5
 80139ca:	f7ec fe1d 	bl	8000608 <__aeabi_dmul>
 80139ce:	4b80      	ldr	r3, [pc, #512]	; (8013bd0 <__ieee754_rem_pio2+0x348>)
 80139d0:	2200      	movs	r2, #0
 80139d2:	f7ec fc63 	bl	800029c <__adddf3>
 80139d6:	f7ed f8c7 	bl	8000b68 <__aeabi_d2iz>
 80139da:	4683      	mov	fp, r0
 80139dc:	f7ec fdaa 	bl	8000534 <__aeabi_i2d>
 80139e0:	4602      	mov	r2, r0
 80139e2:	460b      	mov	r3, r1
 80139e4:	ec43 2b18 	vmov	d8, r2, r3
 80139e8:	a367      	add	r3, pc, #412	; (adr r3, 8013b88 <__ieee754_rem_pio2+0x300>)
 80139ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ee:	f7ec fe0b 	bl	8000608 <__aeabi_dmul>
 80139f2:	4602      	mov	r2, r0
 80139f4:	460b      	mov	r3, r1
 80139f6:	4620      	mov	r0, r4
 80139f8:	4629      	mov	r1, r5
 80139fa:	f7ec fc4d 	bl	8000298 <__aeabi_dsub>
 80139fe:	a364      	add	r3, pc, #400	; (adr r3, 8013b90 <__ieee754_rem_pio2+0x308>)
 8013a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a04:	4606      	mov	r6, r0
 8013a06:	460f      	mov	r7, r1
 8013a08:	ec51 0b18 	vmov	r0, r1, d8
 8013a0c:	f7ec fdfc 	bl	8000608 <__aeabi_dmul>
 8013a10:	f1bb 0f1f 	cmp.w	fp, #31
 8013a14:	4604      	mov	r4, r0
 8013a16:	460d      	mov	r5, r1
 8013a18:	dc0d      	bgt.n	8013a36 <__ieee754_rem_pio2+0x1ae>
 8013a1a:	4b6e      	ldr	r3, [pc, #440]	; (8013bd4 <__ieee754_rem_pio2+0x34c>)
 8013a1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a24:	4543      	cmp	r3, r8
 8013a26:	d006      	beq.n	8013a36 <__ieee754_rem_pio2+0x1ae>
 8013a28:	4622      	mov	r2, r4
 8013a2a:	462b      	mov	r3, r5
 8013a2c:	4630      	mov	r0, r6
 8013a2e:	4639      	mov	r1, r7
 8013a30:	f7ec fc32 	bl	8000298 <__aeabi_dsub>
 8013a34:	e00f      	b.n	8013a56 <__ieee754_rem_pio2+0x1ce>
 8013a36:	462b      	mov	r3, r5
 8013a38:	4622      	mov	r2, r4
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	4639      	mov	r1, r7
 8013a3e:	f7ec fc2b 	bl	8000298 <__aeabi_dsub>
 8013a42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013a46:	9303      	str	r3, [sp, #12]
 8013a48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013a4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8013a50:	f1b8 0f10 	cmp.w	r8, #16
 8013a54:	dc02      	bgt.n	8013a5c <__ieee754_rem_pio2+0x1d4>
 8013a56:	e9ca 0100 	strd	r0, r1, [sl]
 8013a5a:	e039      	b.n	8013ad0 <__ieee754_rem_pio2+0x248>
 8013a5c:	a34e      	add	r3, pc, #312	; (adr r3, 8013b98 <__ieee754_rem_pio2+0x310>)
 8013a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a62:	ec51 0b18 	vmov	r0, r1, d8
 8013a66:	f7ec fdcf 	bl	8000608 <__aeabi_dmul>
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	460d      	mov	r5, r1
 8013a6e:	4602      	mov	r2, r0
 8013a70:	460b      	mov	r3, r1
 8013a72:	4630      	mov	r0, r6
 8013a74:	4639      	mov	r1, r7
 8013a76:	f7ec fc0f 	bl	8000298 <__aeabi_dsub>
 8013a7a:	4602      	mov	r2, r0
 8013a7c:	460b      	mov	r3, r1
 8013a7e:	4680      	mov	r8, r0
 8013a80:	4689      	mov	r9, r1
 8013a82:	4630      	mov	r0, r6
 8013a84:	4639      	mov	r1, r7
 8013a86:	f7ec fc07 	bl	8000298 <__aeabi_dsub>
 8013a8a:	4622      	mov	r2, r4
 8013a8c:	462b      	mov	r3, r5
 8013a8e:	f7ec fc03 	bl	8000298 <__aeabi_dsub>
 8013a92:	a343      	add	r3, pc, #268	; (adr r3, 8013ba0 <__ieee754_rem_pio2+0x318>)
 8013a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a98:	4604      	mov	r4, r0
 8013a9a:	460d      	mov	r5, r1
 8013a9c:	ec51 0b18 	vmov	r0, r1, d8
 8013aa0:	f7ec fdb2 	bl	8000608 <__aeabi_dmul>
 8013aa4:	4622      	mov	r2, r4
 8013aa6:	462b      	mov	r3, r5
 8013aa8:	f7ec fbf6 	bl	8000298 <__aeabi_dsub>
 8013aac:	4602      	mov	r2, r0
 8013aae:	460b      	mov	r3, r1
 8013ab0:	4604      	mov	r4, r0
 8013ab2:	460d      	mov	r5, r1
 8013ab4:	4640      	mov	r0, r8
 8013ab6:	4649      	mov	r1, r9
 8013ab8:	f7ec fbee 	bl	8000298 <__aeabi_dsub>
 8013abc:	9a03      	ldr	r2, [sp, #12]
 8013abe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013ac2:	1ad3      	subs	r3, r2, r3
 8013ac4:	2b31      	cmp	r3, #49	; 0x31
 8013ac6:	dc24      	bgt.n	8013b12 <__ieee754_rem_pio2+0x28a>
 8013ac8:	e9ca 0100 	strd	r0, r1, [sl]
 8013acc:	4646      	mov	r6, r8
 8013ace:	464f      	mov	r7, r9
 8013ad0:	e9da 8900 	ldrd	r8, r9, [sl]
 8013ad4:	4630      	mov	r0, r6
 8013ad6:	4642      	mov	r2, r8
 8013ad8:	464b      	mov	r3, r9
 8013ada:	4639      	mov	r1, r7
 8013adc:	f7ec fbdc 	bl	8000298 <__aeabi_dsub>
 8013ae0:	462b      	mov	r3, r5
 8013ae2:	4622      	mov	r2, r4
 8013ae4:	f7ec fbd8 	bl	8000298 <__aeabi_dsub>
 8013ae8:	9b02      	ldr	r3, [sp, #8]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013af0:	f6bf af0a 	bge.w	8013908 <__ieee754_rem_pio2+0x80>
 8013af4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013af8:	f8ca 3004 	str.w	r3, [sl, #4]
 8013afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b00:	f8ca 8000 	str.w	r8, [sl]
 8013b04:	f8ca 0008 	str.w	r0, [sl, #8]
 8013b08:	f8ca 300c 	str.w	r3, [sl, #12]
 8013b0c:	f1cb 0b00 	rsb	fp, fp, #0
 8013b10:	e6fa      	b.n	8013908 <__ieee754_rem_pio2+0x80>
 8013b12:	a327      	add	r3, pc, #156	; (adr r3, 8013bb0 <__ieee754_rem_pio2+0x328>)
 8013b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b18:	ec51 0b18 	vmov	r0, r1, d8
 8013b1c:	f7ec fd74 	bl	8000608 <__aeabi_dmul>
 8013b20:	4604      	mov	r4, r0
 8013b22:	460d      	mov	r5, r1
 8013b24:	4602      	mov	r2, r0
 8013b26:	460b      	mov	r3, r1
 8013b28:	4640      	mov	r0, r8
 8013b2a:	4649      	mov	r1, r9
 8013b2c:	f7ec fbb4 	bl	8000298 <__aeabi_dsub>
 8013b30:	4602      	mov	r2, r0
 8013b32:	460b      	mov	r3, r1
 8013b34:	4606      	mov	r6, r0
 8013b36:	460f      	mov	r7, r1
 8013b38:	4640      	mov	r0, r8
 8013b3a:	4649      	mov	r1, r9
 8013b3c:	f7ec fbac 	bl	8000298 <__aeabi_dsub>
 8013b40:	4622      	mov	r2, r4
 8013b42:	462b      	mov	r3, r5
 8013b44:	f7ec fba8 	bl	8000298 <__aeabi_dsub>
 8013b48:	a31b      	add	r3, pc, #108	; (adr r3, 8013bb8 <__ieee754_rem_pio2+0x330>)
 8013b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4e:	4604      	mov	r4, r0
 8013b50:	460d      	mov	r5, r1
 8013b52:	ec51 0b18 	vmov	r0, r1, d8
 8013b56:	f7ec fd57 	bl	8000608 <__aeabi_dmul>
 8013b5a:	4622      	mov	r2, r4
 8013b5c:	462b      	mov	r3, r5
 8013b5e:	f7ec fb9b 	bl	8000298 <__aeabi_dsub>
 8013b62:	4604      	mov	r4, r0
 8013b64:	460d      	mov	r5, r1
 8013b66:	e75f      	b.n	8013a28 <__ieee754_rem_pio2+0x1a0>
 8013b68:	4b1b      	ldr	r3, [pc, #108]	; (8013bd8 <__ieee754_rem_pio2+0x350>)
 8013b6a:	4598      	cmp	r8, r3
 8013b6c:	dd36      	ble.n	8013bdc <__ieee754_rem_pio2+0x354>
 8013b6e:	ee10 2a10 	vmov	r2, s0
 8013b72:	462b      	mov	r3, r5
 8013b74:	4620      	mov	r0, r4
 8013b76:	4629      	mov	r1, r5
 8013b78:	f7ec fb8e 	bl	8000298 <__aeabi_dsub>
 8013b7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013b80:	e9ca 0100 	strd	r0, r1, [sl]
 8013b84:	e694      	b.n	80138b0 <__ieee754_rem_pio2+0x28>
 8013b86:	bf00      	nop
 8013b88:	54400000 	.word	0x54400000
 8013b8c:	3ff921fb 	.word	0x3ff921fb
 8013b90:	1a626331 	.word	0x1a626331
 8013b94:	3dd0b461 	.word	0x3dd0b461
 8013b98:	1a600000 	.word	0x1a600000
 8013b9c:	3dd0b461 	.word	0x3dd0b461
 8013ba0:	2e037073 	.word	0x2e037073
 8013ba4:	3ba3198a 	.word	0x3ba3198a
 8013ba8:	6dc9c883 	.word	0x6dc9c883
 8013bac:	3fe45f30 	.word	0x3fe45f30
 8013bb0:	2e000000 	.word	0x2e000000
 8013bb4:	3ba3198a 	.word	0x3ba3198a
 8013bb8:	252049c1 	.word	0x252049c1
 8013bbc:	397b839a 	.word	0x397b839a
 8013bc0:	3fe921fb 	.word	0x3fe921fb
 8013bc4:	4002d97b 	.word	0x4002d97b
 8013bc8:	3ff921fb 	.word	0x3ff921fb
 8013bcc:	413921fb 	.word	0x413921fb
 8013bd0:	3fe00000 	.word	0x3fe00000
 8013bd4:	08015db8 	.word	0x08015db8
 8013bd8:	7fefffff 	.word	0x7fefffff
 8013bdc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8013be0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8013be4:	ee10 0a10 	vmov	r0, s0
 8013be8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8013bec:	ee10 6a10 	vmov	r6, s0
 8013bf0:	460f      	mov	r7, r1
 8013bf2:	f7ec ffb9 	bl	8000b68 <__aeabi_d2iz>
 8013bf6:	f7ec fc9d 	bl	8000534 <__aeabi_i2d>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	4630      	mov	r0, r6
 8013c00:	4639      	mov	r1, r7
 8013c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013c06:	f7ec fb47 	bl	8000298 <__aeabi_dsub>
 8013c0a:	4b23      	ldr	r3, [pc, #140]	; (8013c98 <__ieee754_rem_pio2+0x410>)
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	f7ec fcfb 	bl	8000608 <__aeabi_dmul>
 8013c12:	460f      	mov	r7, r1
 8013c14:	4606      	mov	r6, r0
 8013c16:	f7ec ffa7 	bl	8000b68 <__aeabi_d2iz>
 8013c1a:	f7ec fc8b 	bl	8000534 <__aeabi_i2d>
 8013c1e:	4602      	mov	r2, r0
 8013c20:	460b      	mov	r3, r1
 8013c22:	4630      	mov	r0, r6
 8013c24:	4639      	mov	r1, r7
 8013c26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013c2a:	f7ec fb35 	bl	8000298 <__aeabi_dsub>
 8013c2e:	4b1a      	ldr	r3, [pc, #104]	; (8013c98 <__ieee754_rem_pio2+0x410>)
 8013c30:	2200      	movs	r2, #0
 8013c32:	f7ec fce9 	bl	8000608 <__aeabi_dmul>
 8013c36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013c3a:	ad04      	add	r5, sp, #16
 8013c3c:	f04f 0803 	mov.w	r8, #3
 8013c40:	46a9      	mov	r9, r5
 8013c42:	2600      	movs	r6, #0
 8013c44:	2700      	movs	r7, #0
 8013c46:	4632      	mov	r2, r6
 8013c48:	463b      	mov	r3, r7
 8013c4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8013c4e:	46c3      	mov	fp, r8
 8013c50:	3d08      	subs	r5, #8
 8013c52:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c56:	f7ec ff3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	d1f3      	bne.n	8013c46 <__ieee754_rem_pio2+0x3be>
 8013c5e:	4b0f      	ldr	r3, [pc, #60]	; (8013c9c <__ieee754_rem_pio2+0x414>)
 8013c60:	9301      	str	r3, [sp, #4]
 8013c62:	2302      	movs	r3, #2
 8013c64:	9300      	str	r3, [sp, #0]
 8013c66:	4622      	mov	r2, r4
 8013c68:	465b      	mov	r3, fp
 8013c6a:	4651      	mov	r1, sl
 8013c6c:	4648      	mov	r0, r9
 8013c6e:	f000 f993 	bl	8013f98 <__kernel_rem_pio2>
 8013c72:	9b02      	ldr	r3, [sp, #8]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	4683      	mov	fp, r0
 8013c78:	f6bf ae46 	bge.w	8013908 <__ieee754_rem_pio2+0x80>
 8013c7c:	e9da 2100 	ldrd	r2, r1, [sl]
 8013c80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c84:	e9ca 2300 	strd	r2, r3, [sl]
 8013c88:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8013c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013c90:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013c94:	e73a      	b.n	8013b0c <__ieee754_rem_pio2+0x284>
 8013c96:	bf00      	nop
 8013c98:	41700000 	.word	0x41700000
 8013c9c:	08015e38 	.word	0x08015e38

08013ca0 <__ieee754_sqrt>:
 8013ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca4:	ec55 4b10 	vmov	r4, r5, d0
 8013ca8:	4e55      	ldr	r6, [pc, #340]	; (8013e00 <__ieee754_sqrt+0x160>)
 8013caa:	43ae      	bics	r6, r5
 8013cac:	ee10 0a10 	vmov	r0, s0
 8013cb0:	ee10 3a10 	vmov	r3, s0
 8013cb4:	462a      	mov	r2, r5
 8013cb6:	4629      	mov	r1, r5
 8013cb8:	d110      	bne.n	8013cdc <__ieee754_sqrt+0x3c>
 8013cba:	ee10 2a10 	vmov	r2, s0
 8013cbe:	462b      	mov	r3, r5
 8013cc0:	f7ec fca2 	bl	8000608 <__aeabi_dmul>
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	460b      	mov	r3, r1
 8013cc8:	4620      	mov	r0, r4
 8013cca:	4629      	mov	r1, r5
 8013ccc:	f7ec fae6 	bl	800029c <__adddf3>
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	460d      	mov	r5, r1
 8013cd4:	ec45 4b10 	vmov	d0, r4, r5
 8013cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cdc:	2d00      	cmp	r5, #0
 8013cde:	dc10      	bgt.n	8013d02 <__ieee754_sqrt+0x62>
 8013ce0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013ce4:	4330      	orrs	r0, r6
 8013ce6:	d0f5      	beq.n	8013cd4 <__ieee754_sqrt+0x34>
 8013ce8:	b15d      	cbz	r5, 8013d02 <__ieee754_sqrt+0x62>
 8013cea:	ee10 2a10 	vmov	r2, s0
 8013cee:	462b      	mov	r3, r5
 8013cf0:	ee10 0a10 	vmov	r0, s0
 8013cf4:	f7ec fad0 	bl	8000298 <__aeabi_dsub>
 8013cf8:	4602      	mov	r2, r0
 8013cfa:	460b      	mov	r3, r1
 8013cfc:	f7ec fdae 	bl	800085c <__aeabi_ddiv>
 8013d00:	e7e6      	b.n	8013cd0 <__ieee754_sqrt+0x30>
 8013d02:	1512      	asrs	r2, r2, #20
 8013d04:	d074      	beq.n	8013df0 <__ieee754_sqrt+0x150>
 8013d06:	07d4      	lsls	r4, r2, #31
 8013d08:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013d0c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013d10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013d14:	bf5e      	ittt	pl
 8013d16:	0fda      	lsrpl	r2, r3, #31
 8013d18:	005b      	lslpl	r3, r3, #1
 8013d1a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013d1e:	2400      	movs	r4, #0
 8013d20:	0fda      	lsrs	r2, r3, #31
 8013d22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013d26:	107f      	asrs	r7, r7, #1
 8013d28:	005b      	lsls	r3, r3, #1
 8013d2a:	2516      	movs	r5, #22
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013d32:	1886      	adds	r6, r0, r2
 8013d34:	428e      	cmp	r6, r1
 8013d36:	bfde      	ittt	le
 8013d38:	1b89      	suble	r1, r1, r6
 8013d3a:	18b0      	addle	r0, r6, r2
 8013d3c:	18a4      	addle	r4, r4, r2
 8013d3e:	0049      	lsls	r1, r1, #1
 8013d40:	3d01      	subs	r5, #1
 8013d42:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013d46:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013d4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013d4e:	d1f0      	bne.n	8013d32 <__ieee754_sqrt+0x92>
 8013d50:	462a      	mov	r2, r5
 8013d52:	f04f 0e20 	mov.w	lr, #32
 8013d56:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013d5a:	4281      	cmp	r1, r0
 8013d5c:	eb06 0c05 	add.w	ip, r6, r5
 8013d60:	dc02      	bgt.n	8013d68 <__ieee754_sqrt+0xc8>
 8013d62:	d113      	bne.n	8013d8c <__ieee754_sqrt+0xec>
 8013d64:	459c      	cmp	ip, r3
 8013d66:	d811      	bhi.n	8013d8c <__ieee754_sqrt+0xec>
 8013d68:	f1bc 0f00 	cmp.w	ip, #0
 8013d6c:	eb0c 0506 	add.w	r5, ip, r6
 8013d70:	da43      	bge.n	8013dfa <__ieee754_sqrt+0x15a>
 8013d72:	2d00      	cmp	r5, #0
 8013d74:	db41      	blt.n	8013dfa <__ieee754_sqrt+0x15a>
 8013d76:	f100 0801 	add.w	r8, r0, #1
 8013d7a:	1a09      	subs	r1, r1, r0
 8013d7c:	459c      	cmp	ip, r3
 8013d7e:	bf88      	it	hi
 8013d80:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013d84:	eba3 030c 	sub.w	r3, r3, ip
 8013d88:	4432      	add	r2, r6
 8013d8a:	4640      	mov	r0, r8
 8013d8c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013d90:	f1be 0e01 	subs.w	lr, lr, #1
 8013d94:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013d98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013d9c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013da0:	d1db      	bne.n	8013d5a <__ieee754_sqrt+0xba>
 8013da2:	430b      	orrs	r3, r1
 8013da4:	d006      	beq.n	8013db4 <__ieee754_sqrt+0x114>
 8013da6:	1c50      	adds	r0, r2, #1
 8013da8:	bf13      	iteet	ne
 8013daa:	3201      	addne	r2, #1
 8013dac:	3401      	addeq	r4, #1
 8013dae:	4672      	moveq	r2, lr
 8013db0:	f022 0201 	bicne.w	r2, r2, #1
 8013db4:	1063      	asrs	r3, r4, #1
 8013db6:	0852      	lsrs	r2, r2, #1
 8013db8:	07e1      	lsls	r1, r4, #31
 8013dba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013dbe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013dc2:	bf48      	it	mi
 8013dc4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013dc8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013dcc:	4614      	mov	r4, r2
 8013dce:	e781      	b.n	8013cd4 <__ieee754_sqrt+0x34>
 8013dd0:	0ad9      	lsrs	r1, r3, #11
 8013dd2:	3815      	subs	r0, #21
 8013dd4:	055b      	lsls	r3, r3, #21
 8013dd6:	2900      	cmp	r1, #0
 8013dd8:	d0fa      	beq.n	8013dd0 <__ieee754_sqrt+0x130>
 8013dda:	02cd      	lsls	r5, r1, #11
 8013ddc:	d50a      	bpl.n	8013df4 <__ieee754_sqrt+0x154>
 8013dde:	f1c2 0420 	rsb	r4, r2, #32
 8013de2:	fa23 f404 	lsr.w	r4, r3, r4
 8013de6:	1e55      	subs	r5, r2, #1
 8013de8:	4093      	lsls	r3, r2
 8013dea:	4321      	orrs	r1, r4
 8013dec:	1b42      	subs	r2, r0, r5
 8013dee:	e78a      	b.n	8013d06 <__ieee754_sqrt+0x66>
 8013df0:	4610      	mov	r0, r2
 8013df2:	e7f0      	b.n	8013dd6 <__ieee754_sqrt+0x136>
 8013df4:	0049      	lsls	r1, r1, #1
 8013df6:	3201      	adds	r2, #1
 8013df8:	e7ef      	b.n	8013dda <__ieee754_sqrt+0x13a>
 8013dfa:	4680      	mov	r8, r0
 8013dfc:	e7bd      	b.n	8013d7a <__ieee754_sqrt+0xda>
 8013dfe:	bf00      	nop
 8013e00:	7ff00000 	.word	0x7ff00000
 8013e04:	00000000 	.word	0x00000000

08013e08 <__kernel_cos>:
 8013e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e0c:	ec57 6b10 	vmov	r6, r7, d0
 8013e10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013e14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013e18:	ed8d 1b00 	vstr	d1, [sp]
 8013e1c:	da07      	bge.n	8013e2e <__kernel_cos+0x26>
 8013e1e:	ee10 0a10 	vmov	r0, s0
 8013e22:	4639      	mov	r1, r7
 8013e24:	f7ec fea0 	bl	8000b68 <__aeabi_d2iz>
 8013e28:	2800      	cmp	r0, #0
 8013e2a:	f000 8088 	beq.w	8013f3e <__kernel_cos+0x136>
 8013e2e:	4632      	mov	r2, r6
 8013e30:	463b      	mov	r3, r7
 8013e32:	4630      	mov	r0, r6
 8013e34:	4639      	mov	r1, r7
 8013e36:	f7ec fbe7 	bl	8000608 <__aeabi_dmul>
 8013e3a:	4b51      	ldr	r3, [pc, #324]	; (8013f80 <__kernel_cos+0x178>)
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	4604      	mov	r4, r0
 8013e40:	460d      	mov	r5, r1
 8013e42:	f7ec fbe1 	bl	8000608 <__aeabi_dmul>
 8013e46:	a340      	add	r3, pc, #256	; (adr r3, 8013f48 <__kernel_cos+0x140>)
 8013e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e4c:	4682      	mov	sl, r0
 8013e4e:	468b      	mov	fp, r1
 8013e50:	4620      	mov	r0, r4
 8013e52:	4629      	mov	r1, r5
 8013e54:	f7ec fbd8 	bl	8000608 <__aeabi_dmul>
 8013e58:	a33d      	add	r3, pc, #244	; (adr r3, 8013f50 <__kernel_cos+0x148>)
 8013e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e5e:	f7ec fa1d 	bl	800029c <__adddf3>
 8013e62:	4622      	mov	r2, r4
 8013e64:	462b      	mov	r3, r5
 8013e66:	f7ec fbcf 	bl	8000608 <__aeabi_dmul>
 8013e6a:	a33b      	add	r3, pc, #236	; (adr r3, 8013f58 <__kernel_cos+0x150>)
 8013e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e70:	f7ec fa12 	bl	8000298 <__aeabi_dsub>
 8013e74:	4622      	mov	r2, r4
 8013e76:	462b      	mov	r3, r5
 8013e78:	f7ec fbc6 	bl	8000608 <__aeabi_dmul>
 8013e7c:	a338      	add	r3, pc, #224	; (adr r3, 8013f60 <__kernel_cos+0x158>)
 8013e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e82:	f7ec fa0b 	bl	800029c <__adddf3>
 8013e86:	4622      	mov	r2, r4
 8013e88:	462b      	mov	r3, r5
 8013e8a:	f7ec fbbd 	bl	8000608 <__aeabi_dmul>
 8013e8e:	a336      	add	r3, pc, #216	; (adr r3, 8013f68 <__kernel_cos+0x160>)
 8013e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e94:	f7ec fa00 	bl	8000298 <__aeabi_dsub>
 8013e98:	4622      	mov	r2, r4
 8013e9a:	462b      	mov	r3, r5
 8013e9c:	f7ec fbb4 	bl	8000608 <__aeabi_dmul>
 8013ea0:	a333      	add	r3, pc, #204	; (adr r3, 8013f70 <__kernel_cos+0x168>)
 8013ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ea6:	f7ec f9f9 	bl	800029c <__adddf3>
 8013eaa:	4622      	mov	r2, r4
 8013eac:	462b      	mov	r3, r5
 8013eae:	f7ec fbab 	bl	8000608 <__aeabi_dmul>
 8013eb2:	4622      	mov	r2, r4
 8013eb4:	462b      	mov	r3, r5
 8013eb6:	f7ec fba7 	bl	8000608 <__aeabi_dmul>
 8013eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	460d      	mov	r5, r1
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	4639      	mov	r1, r7
 8013ec6:	f7ec fb9f 	bl	8000608 <__aeabi_dmul>
 8013eca:	460b      	mov	r3, r1
 8013ecc:	4602      	mov	r2, r0
 8013ece:	4629      	mov	r1, r5
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	f7ec f9e1 	bl	8000298 <__aeabi_dsub>
 8013ed6:	4b2b      	ldr	r3, [pc, #172]	; (8013f84 <__kernel_cos+0x17c>)
 8013ed8:	4598      	cmp	r8, r3
 8013eda:	4606      	mov	r6, r0
 8013edc:	460f      	mov	r7, r1
 8013ede:	dc10      	bgt.n	8013f02 <__kernel_cos+0xfa>
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	460b      	mov	r3, r1
 8013ee4:	4650      	mov	r0, sl
 8013ee6:	4659      	mov	r1, fp
 8013ee8:	f7ec f9d6 	bl	8000298 <__aeabi_dsub>
 8013eec:	460b      	mov	r3, r1
 8013eee:	4926      	ldr	r1, [pc, #152]	; (8013f88 <__kernel_cos+0x180>)
 8013ef0:	4602      	mov	r2, r0
 8013ef2:	2000      	movs	r0, #0
 8013ef4:	f7ec f9d0 	bl	8000298 <__aeabi_dsub>
 8013ef8:	ec41 0b10 	vmov	d0, r0, r1
 8013efc:	b003      	add	sp, #12
 8013efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f02:	4b22      	ldr	r3, [pc, #136]	; (8013f8c <__kernel_cos+0x184>)
 8013f04:	4920      	ldr	r1, [pc, #128]	; (8013f88 <__kernel_cos+0x180>)
 8013f06:	4598      	cmp	r8, r3
 8013f08:	bfcc      	ite	gt
 8013f0a:	4d21      	ldrgt	r5, [pc, #132]	; (8013f90 <__kernel_cos+0x188>)
 8013f0c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013f10:	2400      	movs	r4, #0
 8013f12:	4622      	mov	r2, r4
 8013f14:	462b      	mov	r3, r5
 8013f16:	2000      	movs	r0, #0
 8013f18:	f7ec f9be 	bl	8000298 <__aeabi_dsub>
 8013f1c:	4622      	mov	r2, r4
 8013f1e:	4680      	mov	r8, r0
 8013f20:	4689      	mov	r9, r1
 8013f22:	462b      	mov	r3, r5
 8013f24:	4650      	mov	r0, sl
 8013f26:	4659      	mov	r1, fp
 8013f28:	f7ec f9b6 	bl	8000298 <__aeabi_dsub>
 8013f2c:	4632      	mov	r2, r6
 8013f2e:	463b      	mov	r3, r7
 8013f30:	f7ec f9b2 	bl	8000298 <__aeabi_dsub>
 8013f34:	4602      	mov	r2, r0
 8013f36:	460b      	mov	r3, r1
 8013f38:	4640      	mov	r0, r8
 8013f3a:	4649      	mov	r1, r9
 8013f3c:	e7da      	b.n	8013ef4 <__kernel_cos+0xec>
 8013f3e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013f78 <__kernel_cos+0x170>
 8013f42:	e7db      	b.n	8013efc <__kernel_cos+0xf4>
 8013f44:	f3af 8000 	nop.w
 8013f48:	be8838d4 	.word	0xbe8838d4
 8013f4c:	bda8fae9 	.word	0xbda8fae9
 8013f50:	bdb4b1c4 	.word	0xbdb4b1c4
 8013f54:	3e21ee9e 	.word	0x3e21ee9e
 8013f58:	809c52ad 	.word	0x809c52ad
 8013f5c:	3e927e4f 	.word	0x3e927e4f
 8013f60:	19cb1590 	.word	0x19cb1590
 8013f64:	3efa01a0 	.word	0x3efa01a0
 8013f68:	16c15177 	.word	0x16c15177
 8013f6c:	3f56c16c 	.word	0x3f56c16c
 8013f70:	5555554c 	.word	0x5555554c
 8013f74:	3fa55555 	.word	0x3fa55555
 8013f78:	00000000 	.word	0x00000000
 8013f7c:	3ff00000 	.word	0x3ff00000
 8013f80:	3fe00000 	.word	0x3fe00000
 8013f84:	3fd33332 	.word	0x3fd33332
 8013f88:	3ff00000 	.word	0x3ff00000
 8013f8c:	3fe90000 	.word	0x3fe90000
 8013f90:	3fd20000 	.word	0x3fd20000
 8013f94:	00000000 	.word	0x00000000

08013f98 <__kernel_rem_pio2>:
 8013f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9c:	ed2d 8b02 	vpush	{d8}
 8013fa0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013fa4:	f112 0f14 	cmn.w	r2, #20
 8013fa8:	9308      	str	r3, [sp, #32]
 8013faa:	9101      	str	r1, [sp, #4]
 8013fac:	4bc4      	ldr	r3, [pc, #784]	; (80142c0 <__kernel_rem_pio2+0x328>)
 8013fae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013fb0:	900b      	str	r0, [sp, #44]	; 0x2c
 8013fb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013fb6:	9302      	str	r3, [sp, #8]
 8013fb8:	9b08      	ldr	r3, [sp, #32]
 8013fba:	f103 33ff 	add.w	r3, r3, #4294967295
 8013fbe:	bfa8      	it	ge
 8013fc0:	1ed4      	subge	r4, r2, #3
 8013fc2:	9306      	str	r3, [sp, #24]
 8013fc4:	bfb2      	itee	lt
 8013fc6:	2400      	movlt	r4, #0
 8013fc8:	2318      	movge	r3, #24
 8013fca:	fb94 f4f3 	sdivge	r4, r4, r3
 8013fce:	f06f 0317 	mvn.w	r3, #23
 8013fd2:	fb04 3303 	mla	r3, r4, r3, r3
 8013fd6:	eb03 0a02 	add.w	sl, r3, r2
 8013fda:	9b02      	ldr	r3, [sp, #8]
 8013fdc:	9a06      	ldr	r2, [sp, #24]
 8013fde:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80142b0 <__kernel_rem_pio2+0x318>
 8013fe2:	eb03 0802 	add.w	r8, r3, r2
 8013fe6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013fe8:	1aa7      	subs	r7, r4, r2
 8013fea:	ae22      	add	r6, sp, #136	; 0x88
 8013fec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013ff0:	2500      	movs	r5, #0
 8013ff2:	4545      	cmp	r5, r8
 8013ff4:	dd13      	ble.n	801401e <__kernel_rem_pio2+0x86>
 8013ff6:	9b08      	ldr	r3, [sp, #32]
 8013ff8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80142b0 <__kernel_rem_pio2+0x318>
 8013ffc:	aa22      	add	r2, sp, #136	; 0x88
 8013ffe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014002:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014006:	f04f 0800 	mov.w	r8, #0
 801400a:	9b02      	ldr	r3, [sp, #8]
 801400c:	4598      	cmp	r8, r3
 801400e:	dc2f      	bgt.n	8014070 <__kernel_rem_pio2+0xd8>
 8014010:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014014:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8014018:	462f      	mov	r7, r5
 801401a:	2600      	movs	r6, #0
 801401c:	e01b      	b.n	8014056 <__kernel_rem_pio2+0xbe>
 801401e:	42ef      	cmn	r7, r5
 8014020:	d407      	bmi.n	8014032 <__kernel_rem_pio2+0x9a>
 8014022:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014026:	f7ec fa85 	bl	8000534 <__aeabi_i2d>
 801402a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801402e:	3501      	adds	r5, #1
 8014030:	e7df      	b.n	8013ff2 <__kernel_rem_pio2+0x5a>
 8014032:	ec51 0b18 	vmov	r0, r1, d8
 8014036:	e7f8      	b.n	801402a <__kernel_rem_pio2+0x92>
 8014038:	e9d7 2300 	ldrd	r2, r3, [r7]
 801403c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014040:	f7ec fae2 	bl	8000608 <__aeabi_dmul>
 8014044:	4602      	mov	r2, r0
 8014046:	460b      	mov	r3, r1
 8014048:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801404c:	f7ec f926 	bl	800029c <__adddf3>
 8014050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014054:	3601      	adds	r6, #1
 8014056:	9b06      	ldr	r3, [sp, #24]
 8014058:	429e      	cmp	r6, r3
 801405a:	f1a7 0708 	sub.w	r7, r7, #8
 801405e:	ddeb      	ble.n	8014038 <__kernel_rem_pio2+0xa0>
 8014060:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014064:	f108 0801 	add.w	r8, r8, #1
 8014068:	ecab 7b02 	vstmia	fp!, {d7}
 801406c:	3508      	adds	r5, #8
 801406e:	e7cc      	b.n	801400a <__kernel_rem_pio2+0x72>
 8014070:	9b02      	ldr	r3, [sp, #8]
 8014072:	aa0e      	add	r2, sp, #56	; 0x38
 8014074:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014078:	930d      	str	r3, [sp, #52]	; 0x34
 801407a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801407c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014080:	9c02      	ldr	r4, [sp, #8]
 8014082:	930c      	str	r3, [sp, #48]	; 0x30
 8014084:	00e3      	lsls	r3, r4, #3
 8014086:	930a      	str	r3, [sp, #40]	; 0x28
 8014088:	ab9a      	add	r3, sp, #616	; 0x268
 801408a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801408e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8014092:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8014096:	ab72      	add	r3, sp, #456	; 0x1c8
 8014098:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801409c:	46c3      	mov	fp, r8
 801409e:	46a1      	mov	r9, r4
 80140a0:	f1b9 0f00 	cmp.w	r9, #0
 80140a4:	f1a5 0508 	sub.w	r5, r5, #8
 80140a8:	dc77      	bgt.n	801419a <__kernel_rem_pio2+0x202>
 80140aa:	ec47 6b10 	vmov	d0, r6, r7
 80140ae:	4650      	mov	r0, sl
 80140b0:	f000 fc46 	bl	8014940 <scalbn>
 80140b4:	ec57 6b10 	vmov	r6, r7, d0
 80140b8:	2200      	movs	r2, #0
 80140ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80140be:	ee10 0a10 	vmov	r0, s0
 80140c2:	4639      	mov	r1, r7
 80140c4:	f7ec faa0 	bl	8000608 <__aeabi_dmul>
 80140c8:	ec41 0b10 	vmov	d0, r0, r1
 80140cc:	f000 fbb8 	bl	8014840 <floor>
 80140d0:	4b7c      	ldr	r3, [pc, #496]	; (80142c4 <__kernel_rem_pio2+0x32c>)
 80140d2:	ec51 0b10 	vmov	r0, r1, d0
 80140d6:	2200      	movs	r2, #0
 80140d8:	f7ec fa96 	bl	8000608 <__aeabi_dmul>
 80140dc:	4602      	mov	r2, r0
 80140de:	460b      	mov	r3, r1
 80140e0:	4630      	mov	r0, r6
 80140e2:	4639      	mov	r1, r7
 80140e4:	f7ec f8d8 	bl	8000298 <__aeabi_dsub>
 80140e8:	460f      	mov	r7, r1
 80140ea:	4606      	mov	r6, r0
 80140ec:	f7ec fd3c 	bl	8000b68 <__aeabi_d2iz>
 80140f0:	9004      	str	r0, [sp, #16]
 80140f2:	f7ec fa1f 	bl	8000534 <__aeabi_i2d>
 80140f6:	4602      	mov	r2, r0
 80140f8:	460b      	mov	r3, r1
 80140fa:	4630      	mov	r0, r6
 80140fc:	4639      	mov	r1, r7
 80140fe:	f7ec f8cb 	bl	8000298 <__aeabi_dsub>
 8014102:	f1ba 0f00 	cmp.w	sl, #0
 8014106:	4606      	mov	r6, r0
 8014108:	460f      	mov	r7, r1
 801410a:	dd6d      	ble.n	80141e8 <__kernel_rem_pio2+0x250>
 801410c:	1e62      	subs	r2, r4, #1
 801410e:	ab0e      	add	r3, sp, #56	; 0x38
 8014110:	9d04      	ldr	r5, [sp, #16]
 8014112:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014116:	f1ca 0118 	rsb	r1, sl, #24
 801411a:	fa40 f301 	asr.w	r3, r0, r1
 801411e:	441d      	add	r5, r3
 8014120:	408b      	lsls	r3, r1
 8014122:	1ac0      	subs	r0, r0, r3
 8014124:	ab0e      	add	r3, sp, #56	; 0x38
 8014126:	9504      	str	r5, [sp, #16]
 8014128:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801412c:	f1ca 0317 	rsb	r3, sl, #23
 8014130:	fa40 fb03 	asr.w	fp, r0, r3
 8014134:	f1bb 0f00 	cmp.w	fp, #0
 8014138:	dd65      	ble.n	8014206 <__kernel_rem_pio2+0x26e>
 801413a:	9b04      	ldr	r3, [sp, #16]
 801413c:	2200      	movs	r2, #0
 801413e:	3301      	adds	r3, #1
 8014140:	9304      	str	r3, [sp, #16]
 8014142:	4615      	mov	r5, r2
 8014144:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014148:	4294      	cmp	r4, r2
 801414a:	f300 809c 	bgt.w	8014286 <__kernel_rem_pio2+0x2ee>
 801414e:	f1ba 0f00 	cmp.w	sl, #0
 8014152:	dd07      	ble.n	8014164 <__kernel_rem_pio2+0x1cc>
 8014154:	f1ba 0f01 	cmp.w	sl, #1
 8014158:	f000 80c0 	beq.w	80142dc <__kernel_rem_pio2+0x344>
 801415c:	f1ba 0f02 	cmp.w	sl, #2
 8014160:	f000 80c6 	beq.w	80142f0 <__kernel_rem_pio2+0x358>
 8014164:	f1bb 0f02 	cmp.w	fp, #2
 8014168:	d14d      	bne.n	8014206 <__kernel_rem_pio2+0x26e>
 801416a:	4632      	mov	r2, r6
 801416c:	463b      	mov	r3, r7
 801416e:	4956      	ldr	r1, [pc, #344]	; (80142c8 <__kernel_rem_pio2+0x330>)
 8014170:	2000      	movs	r0, #0
 8014172:	f7ec f891 	bl	8000298 <__aeabi_dsub>
 8014176:	4606      	mov	r6, r0
 8014178:	460f      	mov	r7, r1
 801417a:	2d00      	cmp	r5, #0
 801417c:	d043      	beq.n	8014206 <__kernel_rem_pio2+0x26e>
 801417e:	4650      	mov	r0, sl
 8014180:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80142b8 <__kernel_rem_pio2+0x320>
 8014184:	f000 fbdc 	bl	8014940 <scalbn>
 8014188:	4630      	mov	r0, r6
 801418a:	4639      	mov	r1, r7
 801418c:	ec53 2b10 	vmov	r2, r3, d0
 8014190:	f7ec f882 	bl	8000298 <__aeabi_dsub>
 8014194:	4606      	mov	r6, r0
 8014196:	460f      	mov	r7, r1
 8014198:	e035      	b.n	8014206 <__kernel_rem_pio2+0x26e>
 801419a:	4b4c      	ldr	r3, [pc, #304]	; (80142cc <__kernel_rem_pio2+0x334>)
 801419c:	2200      	movs	r2, #0
 801419e:	4630      	mov	r0, r6
 80141a0:	4639      	mov	r1, r7
 80141a2:	f7ec fa31 	bl	8000608 <__aeabi_dmul>
 80141a6:	f7ec fcdf 	bl	8000b68 <__aeabi_d2iz>
 80141aa:	f7ec f9c3 	bl	8000534 <__aeabi_i2d>
 80141ae:	4602      	mov	r2, r0
 80141b0:	460b      	mov	r3, r1
 80141b2:	ec43 2b18 	vmov	d8, r2, r3
 80141b6:	4b46      	ldr	r3, [pc, #280]	; (80142d0 <__kernel_rem_pio2+0x338>)
 80141b8:	2200      	movs	r2, #0
 80141ba:	f7ec fa25 	bl	8000608 <__aeabi_dmul>
 80141be:	4602      	mov	r2, r0
 80141c0:	460b      	mov	r3, r1
 80141c2:	4630      	mov	r0, r6
 80141c4:	4639      	mov	r1, r7
 80141c6:	f7ec f867 	bl	8000298 <__aeabi_dsub>
 80141ca:	f7ec fccd 	bl	8000b68 <__aeabi_d2iz>
 80141ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80141d2:	f84b 0b04 	str.w	r0, [fp], #4
 80141d6:	ec51 0b18 	vmov	r0, r1, d8
 80141da:	f7ec f85f 	bl	800029c <__adddf3>
 80141de:	f109 39ff 	add.w	r9, r9, #4294967295
 80141e2:	4606      	mov	r6, r0
 80141e4:	460f      	mov	r7, r1
 80141e6:	e75b      	b.n	80140a0 <__kernel_rem_pio2+0x108>
 80141e8:	d106      	bne.n	80141f8 <__kernel_rem_pio2+0x260>
 80141ea:	1e63      	subs	r3, r4, #1
 80141ec:	aa0e      	add	r2, sp, #56	; 0x38
 80141ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80141f2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80141f6:	e79d      	b.n	8014134 <__kernel_rem_pio2+0x19c>
 80141f8:	4b36      	ldr	r3, [pc, #216]	; (80142d4 <__kernel_rem_pio2+0x33c>)
 80141fa:	2200      	movs	r2, #0
 80141fc:	f7ec fc8a 	bl	8000b14 <__aeabi_dcmpge>
 8014200:	2800      	cmp	r0, #0
 8014202:	d13d      	bne.n	8014280 <__kernel_rem_pio2+0x2e8>
 8014204:	4683      	mov	fp, r0
 8014206:	2200      	movs	r2, #0
 8014208:	2300      	movs	r3, #0
 801420a:	4630      	mov	r0, r6
 801420c:	4639      	mov	r1, r7
 801420e:	f7ec fc63 	bl	8000ad8 <__aeabi_dcmpeq>
 8014212:	2800      	cmp	r0, #0
 8014214:	f000 80c0 	beq.w	8014398 <__kernel_rem_pio2+0x400>
 8014218:	1e65      	subs	r5, r4, #1
 801421a:	462b      	mov	r3, r5
 801421c:	2200      	movs	r2, #0
 801421e:	9902      	ldr	r1, [sp, #8]
 8014220:	428b      	cmp	r3, r1
 8014222:	da6c      	bge.n	80142fe <__kernel_rem_pio2+0x366>
 8014224:	2a00      	cmp	r2, #0
 8014226:	f000 8089 	beq.w	801433c <__kernel_rem_pio2+0x3a4>
 801422a:	ab0e      	add	r3, sp, #56	; 0x38
 801422c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014230:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014234:	2b00      	cmp	r3, #0
 8014236:	f000 80ad 	beq.w	8014394 <__kernel_rem_pio2+0x3fc>
 801423a:	4650      	mov	r0, sl
 801423c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80142b8 <__kernel_rem_pio2+0x320>
 8014240:	f000 fb7e 	bl	8014940 <scalbn>
 8014244:	ab9a      	add	r3, sp, #616	; 0x268
 8014246:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801424a:	ec57 6b10 	vmov	r6, r7, d0
 801424e:	00ec      	lsls	r4, r5, #3
 8014250:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8014254:	46aa      	mov	sl, r5
 8014256:	f1ba 0f00 	cmp.w	sl, #0
 801425a:	f280 80d6 	bge.w	801440a <__kernel_rem_pio2+0x472>
 801425e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80142b0 <__kernel_rem_pio2+0x318>
 8014262:	462e      	mov	r6, r5
 8014264:	2e00      	cmp	r6, #0
 8014266:	f2c0 8104 	blt.w	8014472 <__kernel_rem_pio2+0x4da>
 801426a:	ab72      	add	r3, sp, #456	; 0x1c8
 801426c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8014270:	f8df a064 	ldr.w	sl, [pc, #100]	; 80142d8 <__kernel_rem_pio2+0x340>
 8014274:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8014278:	f04f 0800 	mov.w	r8, #0
 801427c:	1baf      	subs	r7, r5, r6
 801427e:	e0ea      	b.n	8014456 <__kernel_rem_pio2+0x4be>
 8014280:	f04f 0b02 	mov.w	fp, #2
 8014284:	e759      	b.n	801413a <__kernel_rem_pio2+0x1a2>
 8014286:	f8d8 3000 	ldr.w	r3, [r8]
 801428a:	b955      	cbnz	r5, 80142a2 <__kernel_rem_pio2+0x30a>
 801428c:	b123      	cbz	r3, 8014298 <__kernel_rem_pio2+0x300>
 801428e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014292:	f8c8 3000 	str.w	r3, [r8]
 8014296:	2301      	movs	r3, #1
 8014298:	3201      	adds	r2, #1
 801429a:	f108 0804 	add.w	r8, r8, #4
 801429e:	461d      	mov	r5, r3
 80142a0:	e752      	b.n	8014148 <__kernel_rem_pio2+0x1b0>
 80142a2:	1acb      	subs	r3, r1, r3
 80142a4:	f8c8 3000 	str.w	r3, [r8]
 80142a8:	462b      	mov	r3, r5
 80142aa:	e7f5      	b.n	8014298 <__kernel_rem_pio2+0x300>
 80142ac:	f3af 8000 	nop.w
	...
 80142bc:	3ff00000 	.word	0x3ff00000
 80142c0:	08015f80 	.word	0x08015f80
 80142c4:	40200000 	.word	0x40200000
 80142c8:	3ff00000 	.word	0x3ff00000
 80142cc:	3e700000 	.word	0x3e700000
 80142d0:	41700000 	.word	0x41700000
 80142d4:	3fe00000 	.word	0x3fe00000
 80142d8:	08015f40 	.word	0x08015f40
 80142dc:	1e62      	subs	r2, r4, #1
 80142de:	ab0e      	add	r3, sp, #56	; 0x38
 80142e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80142e8:	a90e      	add	r1, sp, #56	; 0x38
 80142ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80142ee:	e739      	b.n	8014164 <__kernel_rem_pio2+0x1cc>
 80142f0:	1e62      	subs	r2, r4, #1
 80142f2:	ab0e      	add	r3, sp, #56	; 0x38
 80142f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80142fc:	e7f4      	b.n	80142e8 <__kernel_rem_pio2+0x350>
 80142fe:	a90e      	add	r1, sp, #56	; 0x38
 8014300:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014304:	3b01      	subs	r3, #1
 8014306:	430a      	orrs	r2, r1
 8014308:	e789      	b.n	801421e <__kernel_rem_pio2+0x286>
 801430a:	3301      	adds	r3, #1
 801430c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014310:	2900      	cmp	r1, #0
 8014312:	d0fa      	beq.n	801430a <__kernel_rem_pio2+0x372>
 8014314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014316:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801431a:	446a      	add	r2, sp
 801431c:	3a98      	subs	r2, #152	; 0x98
 801431e:	920a      	str	r2, [sp, #40]	; 0x28
 8014320:	9a08      	ldr	r2, [sp, #32]
 8014322:	18e3      	adds	r3, r4, r3
 8014324:	18a5      	adds	r5, r4, r2
 8014326:	aa22      	add	r2, sp, #136	; 0x88
 8014328:	f104 0801 	add.w	r8, r4, #1
 801432c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8014330:	9304      	str	r3, [sp, #16]
 8014332:	9b04      	ldr	r3, [sp, #16]
 8014334:	4543      	cmp	r3, r8
 8014336:	da04      	bge.n	8014342 <__kernel_rem_pio2+0x3aa>
 8014338:	461c      	mov	r4, r3
 801433a:	e6a3      	b.n	8014084 <__kernel_rem_pio2+0xec>
 801433c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801433e:	2301      	movs	r3, #1
 8014340:	e7e4      	b.n	801430c <__kernel_rem_pio2+0x374>
 8014342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014344:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014348:	f7ec f8f4 	bl	8000534 <__aeabi_i2d>
 801434c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8014350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014352:	46ab      	mov	fp, r5
 8014354:	461c      	mov	r4, r3
 8014356:	f04f 0900 	mov.w	r9, #0
 801435a:	2600      	movs	r6, #0
 801435c:	2700      	movs	r7, #0
 801435e:	9b06      	ldr	r3, [sp, #24]
 8014360:	4599      	cmp	r9, r3
 8014362:	dd06      	ble.n	8014372 <__kernel_rem_pio2+0x3da>
 8014364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014366:	e8e3 6702 	strd	r6, r7, [r3], #8
 801436a:	f108 0801 	add.w	r8, r8, #1
 801436e:	930a      	str	r3, [sp, #40]	; 0x28
 8014370:	e7df      	b.n	8014332 <__kernel_rem_pio2+0x39a>
 8014372:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014376:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801437a:	f7ec f945 	bl	8000608 <__aeabi_dmul>
 801437e:	4602      	mov	r2, r0
 8014380:	460b      	mov	r3, r1
 8014382:	4630      	mov	r0, r6
 8014384:	4639      	mov	r1, r7
 8014386:	f7eb ff89 	bl	800029c <__adddf3>
 801438a:	f109 0901 	add.w	r9, r9, #1
 801438e:	4606      	mov	r6, r0
 8014390:	460f      	mov	r7, r1
 8014392:	e7e4      	b.n	801435e <__kernel_rem_pio2+0x3c6>
 8014394:	3d01      	subs	r5, #1
 8014396:	e748      	b.n	801422a <__kernel_rem_pio2+0x292>
 8014398:	ec47 6b10 	vmov	d0, r6, r7
 801439c:	f1ca 0000 	rsb	r0, sl, #0
 80143a0:	f000 face 	bl	8014940 <scalbn>
 80143a4:	ec57 6b10 	vmov	r6, r7, d0
 80143a8:	4ba0      	ldr	r3, [pc, #640]	; (801462c <__kernel_rem_pio2+0x694>)
 80143aa:	ee10 0a10 	vmov	r0, s0
 80143ae:	2200      	movs	r2, #0
 80143b0:	4639      	mov	r1, r7
 80143b2:	f7ec fbaf 	bl	8000b14 <__aeabi_dcmpge>
 80143b6:	b1f8      	cbz	r0, 80143f8 <__kernel_rem_pio2+0x460>
 80143b8:	4b9d      	ldr	r3, [pc, #628]	; (8014630 <__kernel_rem_pio2+0x698>)
 80143ba:	2200      	movs	r2, #0
 80143bc:	4630      	mov	r0, r6
 80143be:	4639      	mov	r1, r7
 80143c0:	f7ec f922 	bl	8000608 <__aeabi_dmul>
 80143c4:	f7ec fbd0 	bl	8000b68 <__aeabi_d2iz>
 80143c8:	4680      	mov	r8, r0
 80143ca:	f7ec f8b3 	bl	8000534 <__aeabi_i2d>
 80143ce:	4b97      	ldr	r3, [pc, #604]	; (801462c <__kernel_rem_pio2+0x694>)
 80143d0:	2200      	movs	r2, #0
 80143d2:	f7ec f919 	bl	8000608 <__aeabi_dmul>
 80143d6:	460b      	mov	r3, r1
 80143d8:	4602      	mov	r2, r0
 80143da:	4639      	mov	r1, r7
 80143dc:	4630      	mov	r0, r6
 80143de:	f7eb ff5b 	bl	8000298 <__aeabi_dsub>
 80143e2:	f7ec fbc1 	bl	8000b68 <__aeabi_d2iz>
 80143e6:	1c65      	adds	r5, r4, #1
 80143e8:	ab0e      	add	r3, sp, #56	; 0x38
 80143ea:	f10a 0a18 	add.w	sl, sl, #24
 80143ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80143f2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80143f6:	e720      	b.n	801423a <__kernel_rem_pio2+0x2a2>
 80143f8:	4630      	mov	r0, r6
 80143fa:	4639      	mov	r1, r7
 80143fc:	f7ec fbb4 	bl	8000b68 <__aeabi_d2iz>
 8014400:	ab0e      	add	r3, sp, #56	; 0x38
 8014402:	4625      	mov	r5, r4
 8014404:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014408:	e717      	b.n	801423a <__kernel_rem_pio2+0x2a2>
 801440a:	ab0e      	add	r3, sp, #56	; 0x38
 801440c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8014410:	f7ec f890 	bl	8000534 <__aeabi_i2d>
 8014414:	4632      	mov	r2, r6
 8014416:	463b      	mov	r3, r7
 8014418:	f7ec f8f6 	bl	8000608 <__aeabi_dmul>
 801441c:	4b84      	ldr	r3, [pc, #528]	; (8014630 <__kernel_rem_pio2+0x698>)
 801441e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8014422:	2200      	movs	r2, #0
 8014424:	4630      	mov	r0, r6
 8014426:	4639      	mov	r1, r7
 8014428:	f7ec f8ee 	bl	8000608 <__aeabi_dmul>
 801442c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014430:	4606      	mov	r6, r0
 8014432:	460f      	mov	r7, r1
 8014434:	e70f      	b.n	8014256 <__kernel_rem_pio2+0x2be>
 8014436:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801443a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801443e:	f7ec f8e3 	bl	8000608 <__aeabi_dmul>
 8014442:	4602      	mov	r2, r0
 8014444:	460b      	mov	r3, r1
 8014446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801444a:	f7eb ff27 	bl	800029c <__adddf3>
 801444e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014452:	f108 0801 	add.w	r8, r8, #1
 8014456:	9b02      	ldr	r3, [sp, #8]
 8014458:	4598      	cmp	r8, r3
 801445a:	dc01      	bgt.n	8014460 <__kernel_rem_pio2+0x4c8>
 801445c:	45b8      	cmp	r8, r7
 801445e:	ddea      	ble.n	8014436 <__kernel_rem_pio2+0x49e>
 8014460:	ed9d 7b06 	vldr	d7, [sp, #24]
 8014464:	ab4a      	add	r3, sp, #296	; 0x128
 8014466:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801446a:	ed87 7b00 	vstr	d7, [r7]
 801446e:	3e01      	subs	r6, #1
 8014470:	e6f8      	b.n	8014264 <__kernel_rem_pio2+0x2cc>
 8014472:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014474:	2b02      	cmp	r3, #2
 8014476:	dc0b      	bgt.n	8014490 <__kernel_rem_pio2+0x4f8>
 8014478:	2b00      	cmp	r3, #0
 801447a:	dc35      	bgt.n	80144e8 <__kernel_rem_pio2+0x550>
 801447c:	d059      	beq.n	8014532 <__kernel_rem_pio2+0x59a>
 801447e:	9b04      	ldr	r3, [sp, #16]
 8014480:	f003 0007 	and.w	r0, r3, #7
 8014484:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014488:	ecbd 8b02 	vpop	{d8}
 801448c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014490:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014492:	2b03      	cmp	r3, #3
 8014494:	d1f3      	bne.n	801447e <__kernel_rem_pio2+0x4e6>
 8014496:	ab4a      	add	r3, sp, #296	; 0x128
 8014498:	4423      	add	r3, r4
 801449a:	9306      	str	r3, [sp, #24]
 801449c:	461c      	mov	r4, r3
 801449e:	469a      	mov	sl, r3
 80144a0:	9502      	str	r5, [sp, #8]
 80144a2:	9b02      	ldr	r3, [sp, #8]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	f1aa 0a08 	sub.w	sl, sl, #8
 80144aa:	dc6b      	bgt.n	8014584 <__kernel_rem_pio2+0x5ec>
 80144ac:	46aa      	mov	sl, r5
 80144ae:	f1ba 0f01 	cmp.w	sl, #1
 80144b2:	f1a4 0408 	sub.w	r4, r4, #8
 80144b6:	f300 8085 	bgt.w	80145c4 <__kernel_rem_pio2+0x62c>
 80144ba:	9c06      	ldr	r4, [sp, #24]
 80144bc:	2000      	movs	r0, #0
 80144be:	3408      	adds	r4, #8
 80144c0:	2100      	movs	r1, #0
 80144c2:	2d01      	cmp	r5, #1
 80144c4:	f300 809d 	bgt.w	8014602 <__kernel_rem_pio2+0x66a>
 80144c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80144cc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80144d0:	f1bb 0f00 	cmp.w	fp, #0
 80144d4:	f040 809b 	bne.w	801460e <__kernel_rem_pio2+0x676>
 80144d8:	9b01      	ldr	r3, [sp, #4]
 80144da:	e9c3 5600 	strd	r5, r6, [r3]
 80144de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80144e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80144e6:	e7ca      	b.n	801447e <__kernel_rem_pio2+0x4e6>
 80144e8:	3408      	adds	r4, #8
 80144ea:	ab4a      	add	r3, sp, #296	; 0x128
 80144ec:	441c      	add	r4, r3
 80144ee:	462e      	mov	r6, r5
 80144f0:	2000      	movs	r0, #0
 80144f2:	2100      	movs	r1, #0
 80144f4:	2e00      	cmp	r6, #0
 80144f6:	da36      	bge.n	8014566 <__kernel_rem_pio2+0x5ce>
 80144f8:	f1bb 0f00 	cmp.w	fp, #0
 80144fc:	d039      	beq.n	8014572 <__kernel_rem_pio2+0x5da>
 80144fe:	4602      	mov	r2, r0
 8014500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014504:	9c01      	ldr	r4, [sp, #4]
 8014506:	e9c4 2300 	strd	r2, r3, [r4]
 801450a:	4602      	mov	r2, r0
 801450c:	460b      	mov	r3, r1
 801450e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014512:	f7eb fec1 	bl	8000298 <__aeabi_dsub>
 8014516:	ae4c      	add	r6, sp, #304	; 0x130
 8014518:	2401      	movs	r4, #1
 801451a:	42a5      	cmp	r5, r4
 801451c:	da2c      	bge.n	8014578 <__kernel_rem_pio2+0x5e0>
 801451e:	f1bb 0f00 	cmp.w	fp, #0
 8014522:	d002      	beq.n	801452a <__kernel_rem_pio2+0x592>
 8014524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014528:	4619      	mov	r1, r3
 801452a:	9b01      	ldr	r3, [sp, #4]
 801452c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014530:	e7a5      	b.n	801447e <__kernel_rem_pio2+0x4e6>
 8014532:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8014536:	eb0d 0403 	add.w	r4, sp, r3
 801453a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801453e:	2000      	movs	r0, #0
 8014540:	2100      	movs	r1, #0
 8014542:	2d00      	cmp	r5, #0
 8014544:	da09      	bge.n	801455a <__kernel_rem_pio2+0x5c2>
 8014546:	f1bb 0f00 	cmp.w	fp, #0
 801454a:	d002      	beq.n	8014552 <__kernel_rem_pio2+0x5ba>
 801454c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014550:	4619      	mov	r1, r3
 8014552:	9b01      	ldr	r3, [sp, #4]
 8014554:	e9c3 0100 	strd	r0, r1, [r3]
 8014558:	e791      	b.n	801447e <__kernel_rem_pio2+0x4e6>
 801455a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801455e:	f7eb fe9d 	bl	800029c <__adddf3>
 8014562:	3d01      	subs	r5, #1
 8014564:	e7ed      	b.n	8014542 <__kernel_rem_pio2+0x5aa>
 8014566:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801456a:	f7eb fe97 	bl	800029c <__adddf3>
 801456e:	3e01      	subs	r6, #1
 8014570:	e7c0      	b.n	80144f4 <__kernel_rem_pio2+0x55c>
 8014572:	4602      	mov	r2, r0
 8014574:	460b      	mov	r3, r1
 8014576:	e7c5      	b.n	8014504 <__kernel_rem_pio2+0x56c>
 8014578:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801457c:	f7eb fe8e 	bl	800029c <__adddf3>
 8014580:	3401      	adds	r4, #1
 8014582:	e7ca      	b.n	801451a <__kernel_rem_pio2+0x582>
 8014584:	e9da 8900 	ldrd	r8, r9, [sl]
 8014588:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801458c:	9b02      	ldr	r3, [sp, #8]
 801458e:	3b01      	subs	r3, #1
 8014590:	9302      	str	r3, [sp, #8]
 8014592:	4632      	mov	r2, r6
 8014594:	463b      	mov	r3, r7
 8014596:	4640      	mov	r0, r8
 8014598:	4649      	mov	r1, r9
 801459a:	f7eb fe7f 	bl	800029c <__adddf3>
 801459e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80145a2:	4602      	mov	r2, r0
 80145a4:	460b      	mov	r3, r1
 80145a6:	4640      	mov	r0, r8
 80145a8:	4649      	mov	r1, r9
 80145aa:	f7eb fe75 	bl	8000298 <__aeabi_dsub>
 80145ae:	4632      	mov	r2, r6
 80145b0:	463b      	mov	r3, r7
 80145b2:	f7eb fe73 	bl	800029c <__adddf3>
 80145b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80145ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80145be:	ed8a 7b00 	vstr	d7, [sl]
 80145c2:	e76e      	b.n	80144a2 <__kernel_rem_pio2+0x50a>
 80145c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80145c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80145cc:	4640      	mov	r0, r8
 80145ce:	4632      	mov	r2, r6
 80145d0:	463b      	mov	r3, r7
 80145d2:	4649      	mov	r1, r9
 80145d4:	f7eb fe62 	bl	800029c <__adddf3>
 80145d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80145dc:	4602      	mov	r2, r0
 80145de:	460b      	mov	r3, r1
 80145e0:	4640      	mov	r0, r8
 80145e2:	4649      	mov	r1, r9
 80145e4:	f7eb fe58 	bl	8000298 <__aeabi_dsub>
 80145e8:	4632      	mov	r2, r6
 80145ea:	463b      	mov	r3, r7
 80145ec:	f7eb fe56 	bl	800029c <__adddf3>
 80145f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80145f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80145f8:	ed84 7b00 	vstr	d7, [r4]
 80145fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014600:	e755      	b.n	80144ae <__kernel_rem_pio2+0x516>
 8014602:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014606:	f7eb fe49 	bl	800029c <__adddf3>
 801460a:	3d01      	subs	r5, #1
 801460c:	e759      	b.n	80144c2 <__kernel_rem_pio2+0x52a>
 801460e:	9b01      	ldr	r3, [sp, #4]
 8014610:	9a01      	ldr	r2, [sp, #4]
 8014612:	601d      	str	r5, [r3, #0]
 8014614:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8014618:	605c      	str	r4, [r3, #4]
 801461a:	609f      	str	r7, [r3, #8]
 801461c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8014620:	60d3      	str	r3, [r2, #12]
 8014622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014626:	6110      	str	r0, [r2, #16]
 8014628:	6153      	str	r3, [r2, #20]
 801462a:	e728      	b.n	801447e <__kernel_rem_pio2+0x4e6>
 801462c:	41700000 	.word	0x41700000
 8014630:	3e700000 	.word	0x3e700000
 8014634:	00000000 	.word	0x00000000

08014638 <__kernel_sin>:
 8014638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463c:	ed2d 8b04 	vpush	{d8-d9}
 8014640:	eeb0 8a41 	vmov.f32	s16, s2
 8014644:	eef0 8a61 	vmov.f32	s17, s3
 8014648:	ec55 4b10 	vmov	r4, r5, d0
 801464c:	b083      	sub	sp, #12
 801464e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014652:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014656:	9001      	str	r0, [sp, #4]
 8014658:	da06      	bge.n	8014668 <__kernel_sin+0x30>
 801465a:	ee10 0a10 	vmov	r0, s0
 801465e:	4629      	mov	r1, r5
 8014660:	f7ec fa82 	bl	8000b68 <__aeabi_d2iz>
 8014664:	2800      	cmp	r0, #0
 8014666:	d051      	beq.n	801470c <__kernel_sin+0xd4>
 8014668:	4622      	mov	r2, r4
 801466a:	462b      	mov	r3, r5
 801466c:	4620      	mov	r0, r4
 801466e:	4629      	mov	r1, r5
 8014670:	f7eb ffca 	bl	8000608 <__aeabi_dmul>
 8014674:	4682      	mov	sl, r0
 8014676:	468b      	mov	fp, r1
 8014678:	4602      	mov	r2, r0
 801467a:	460b      	mov	r3, r1
 801467c:	4620      	mov	r0, r4
 801467e:	4629      	mov	r1, r5
 8014680:	f7eb ffc2 	bl	8000608 <__aeabi_dmul>
 8014684:	a341      	add	r3, pc, #260	; (adr r3, 801478c <__kernel_sin+0x154>)
 8014686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468a:	4680      	mov	r8, r0
 801468c:	4689      	mov	r9, r1
 801468e:	4650      	mov	r0, sl
 8014690:	4659      	mov	r1, fp
 8014692:	f7eb ffb9 	bl	8000608 <__aeabi_dmul>
 8014696:	a33f      	add	r3, pc, #252	; (adr r3, 8014794 <__kernel_sin+0x15c>)
 8014698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469c:	f7eb fdfc 	bl	8000298 <__aeabi_dsub>
 80146a0:	4652      	mov	r2, sl
 80146a2:	465b      	mov	r3, fp
 80146a4:	f7eb ffb0 	bl	8000608 <__aeabi_dmul>
 80146a8:	a33c      	add	r3, pc, #240	; (adr r3, 801479c <__kernel_sin+0x164>)
 80146aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ae:	f7eb fdf5 	bl	800029c <__adddf3>
 80146b2:	4652      	mov	r2, sl
 80146b4:	465b      	mov	r3, fp
 80146b6:	f7eb ffa7 	bl	8000608 <__aeabi_dmul>
 80146ba:	a33a      	add	r3, pc, #232	; (adr r3, 80147a4 <__kernel_sin+0x16c>)
 80146bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c0:	f7eb fdea 	bl	8000298 <__aeabi_dsub>
 80146c4:	4652      	mov	r2, sl
 80146c6:	465b      	mov	r3, fp
 80146c8:	f7eb ff9e 	bl	8000608 <__aeabi_dmul>
 80146cc:	a337      	add	r3, pc, #220	; (adr r3, 80147ac <__kernel_sin+0x174>)
 80146ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d2:	f7eb fde3 	bl	800029c <__adddf3>
 80146d6:	9b01      	ldr	r3, [sp, #4]
 80146d8:	4606      	mov	r6, r0
 80146da:	460f      	mov	r7, r1
 80146dc:	b9eb      	cbnz	r3, 801471a <__kernel_sin+0xe2>
 80146de:	4602      	mov	r2, r0
 80146e0:	460b      	mov	r3, r1
 80146e2:	4650      	mov	r0, sl
 80146e4:	4659      	mov	r1, fp
 80146e6:	f7eb ff8f 	bl	8000608 <__aeabi_dmul>
 80146ea:	a325      	add	r3, pc, #148	; (adr r3, 8014780 <__kernel_sin+0x148>)
 80146ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f0:	f7eb fdd2 	bl	8000298 <__aeabi_dsub>
 80146f4:	4642      	mov	r2, r8
 80146f6:	464b      	mov	r3, r9
 80146f8:	f7eb ff86 	bl	8000608 <__aeabi_dmul>
 80146fc:	4602      	mov	r2, r0
 80146fe:	460b      	mov	r3, r1
 8014700:	4620      	mov	r0, r4
 8014702:	4629      	mov	r1, r5
 8014704:	f7eb fdca 	bl	800029c <__adddf3>
 8014708:	4604      	mov	r4, r0
 801470a:	460d      	mov	r5, r1
 801470c:	ec45 4b10 	vmov	d0, r4, r5
 8014710:	b003      	add	sp, #12
 8014712:	ecbd 8b04 	vpop	{d8-d9}
 8014716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801471a:	4b1b      	ldr	r3, [pc, #108]	; (8014788 <__kernel_sin+0x150>)
 801471c:	ec51 0b18 	vmov	r0, r1, d8
 8014720:	2200      	movs	r2, #0
 8014722:	f7eb ff71 	bl	8000608 <__aeabi_dmul>
 8014726:	4632      	mov	r2, r6
 8014728:	ec41 0b19 	vmov	d9, r0, r1
 801472c:	463b      	mov	r3, r7
 801472e:	4640      	mov	r0, r8
 8014730:	4649      	mov	r1, r9
 8014732:	f7eb ff69 	bl	8000608 <__aeabi_dmul>
 8014736:	4602      	mov	r2, r0
 8014738:	460b      	mov	r3, r1
 801473a:	ec51 0b19 	vmov	r0, r1, d9
 801473e:	f7eb fdab 	bl	8000298 <__aeabi_dsub>
 8014742:	4652      	mov	r2, sl
 8014744:	465b      	mov	r3, fp
 8014746:	f7eb ff5f 	bl	8000608 <__aeabi_dmul>
 801474a:	ec53 2b18 	vmov	r2, r3, d8
 801474e:	f7eb fda3 	bl	8000298 <__aeabi_dsub>
 8014752:	a30b      	add	r3, pc, #44	; (adr r3, 8014780 <__kernel_sin+0x148>)
 8014754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014758:	4606      	mov	r6, r0
 801475a:	460f      	mov	r7, r1
 801475c:	4640      	mov	r0, r8
 801475e:	4649      	mov	r1, r9
 8014760:	f7eb ff52 	bl	8000608 <__aeabi_dmul>
 8014764:	4602      	mov	r2, r0
 8014766:	460b      	mov	r3, r1
 8014768:	4630      	mov	r0, r6
 801476a:	4639      	mov	r1, r7
 801476c:	f7eb fd96 	bl	800029c <__adddf3>
 8014770:	4602      	mov	r2, r0
 8014772:	460b      	mov	r3, r1
 8014774:	4620      	mov	r0, r4
 8014776:	4629      	mov	r1, r5
 8014778:	f7eb fd8e 	bl	8000298 <__aeabi_dsub>
 801477c:	e7c4      	b.n	8014708 <__kernel_sin+0xd0>
 801477e:	bf00      	nop
 8014780:	55555549 	.word	0x55555549
 8014784:	3fc55555 	.word	0x3fc55555
 8014788:	3fe00000 	.word	0x3fe00000
 801478c:	5acfd57c 	.word	0x5acfd57c
 8014790:	3de5d93a 	.word	0x3de5d93a
 8014794:	8a2b9ceb 	.word	0x8a2b9ceb
 8014798:	3e5ae5e6 	.word	0x3e5ae5e6
 801479c:	57b1fe7d 	.word	0x57b1fe7d
 80147a0:	3ec71de3 	.word	0x3ec71de3
 80147a4:	19c161d5 	.word	0x19c161d5
 80147a8:	3f2a01a0 	.word	0x3f2a01a0
 80147ac:	1110f8a6 	.word	0x1110f8a6
 80147b0:	3f811111 	.word	0x3f811111

080147b4 <with_errno>:
 80147b4:	b570      	push	{r4, r5, r6, lr}
 80147b6:	4604      	mov	r4, r0
 80147b8:	460d      	mov	r5, r1
 80147ba:	4616      	mov	r6, r2
 80147bc:	f7f9 fbc2 	bl	800df44 <__errno>
 80147c0:	4629      	mov	r1, r5
 80147c2:	6006      	str	r6, [r0, #0]
 80147c4:	4620      	mov	r0, r4
 80147c6:	bd70      	pop	{r4, r5, r6, pc}

080147c8 <xflow>:
 80147c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147ca:	4614      	mov	r4, r2
 80147cc:	461d      	mov	r5, r3
 80147ce:	b108      	cbz	r0, 80147d4 <xflow+0xc>
 80147d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80147d4:	e9cd 2300 	strd	r2, r3, [sp]
 80147d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147dc:	4620      	mov	r0, r4
 80147de:	4629      	mov	r1, r5
 80147e0:	f7eb ff12 	bl	8000608 <__aeabi_dmul>
 80147e4:	2222      	movs	r2, #34	; 0x22
 80147e6:	b003      	add	sp, #12
 80147e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80147ec:	f7ff bfe2 	b.w	80147b4 <with_errno>

080147f0 <__math_uflow>:
 80147f0:	b508      	push	{r3, lr}
 80147f2:	2200      	movs	r2, #0
 80147f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80147f8:	f7ff ffe6 	bl	80147c8 <xflow>
 80147fc:	ec41 0b10 	vmov	d0, r0, r1
 8014800:	bd08      	pop	{r3, pc}

08014802 <__math_oflow>:
 8014802:	b508      	push	{r3, lr}
 8014804:	2200      	movs	r2, #0
 8014806:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801480a:	f7ff ffdd 	bl	80147c8 <xflow>
 801480e:	ec41 0b10 	vmov	d0, r0, r1
 8014812:	bd08      	pop	{r3, pc}

08014814 <fabs>:
 8014814:	ec51 0b10 	vmov	r0, r1, d0
 8014818:	ee10 2a10 	vmov	r2, s0
 801481c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014820:	ec43 2b10 	vmov	d0, r2, r3
 8014824:	4770      	bx	lr

08014826 <finite>:
 8014826:	b082      	sub	sp, #8
 8014828:	ed8d 0b00 	vstr	d0, [sp]
 801482c:	9801      	ldr	r0, [sp, #4]
 801482e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014832:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014836:	0fc0      	lsrs	r0, r0, #31
 8014838:	b002      	add	sp, #8
 801483a:	4770      	bx	lr
 801483c:	0000      	movs	r0, r0
	...

08014840 <floor>:
 8014840:	ec51 0b10 	vmov	r0, r1, d0
 8014844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014848:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801484c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014850:	2e13      	cmp	r6, #19
 8014852:	ee10 5a10 	vmov	r5, s0
 8014856:	ee10 8a10 	vmov	r8, s0
 801485a:	460c      	mov	r4, r1
 801485c:	dc32      	bgt.n	80148c4 <floor+0x84>
 801485e:	2e00      	cmp	r6, #0
 8014860:	da14      	bge.n	801488c <floor+0x4c>
 8014862:	a333      	add	r3, pc, #204	; (adr r3, 8014930 <floor+0xf0>)
 8014864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014868:	f7eb fd18 	bl	800029c <__adddf3>
 801486c:	2200      	movs	r2, #0
 801486e:	2300      	movs	r3, #0
 8014870:	f7ec f95a 	bl	8000b28 <__aeabi_dcmpgt>
 8014874:	b138      	cbz	r0, 8014886 <floor+0x46>
 8014876:	2c00      	cmp	r4, #0
 8014878:	da57      	bge.n	801492a <floor+0xea>
 801487a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801487e:	431d      	orrs	r5, r3
 8014880:	d001      	beq.n	8014886 <floor+0x46>
 8014882:	4c2d      	ldr	r4, [pc, #180]	; (8014938 <floor+0xf8>)
 8014884:	2500      	movs	r5, #0
 8014886:	4621      	mov	r1, r4
 8014888:	4628      	mov	r0, r5
 801488a:	e025      	b.n	80148d8 <floor+0x98>
 801488c:	4f2b      	ldr	r7, [pc, #172]	; (801493c <floor+0xfc>)
 801488e:	4137      	asrs	r7, r6
 8014890:	ea01 0307 	and.w	r3, r1, r7
 8014894:	4303      	orrs	r3, r0
 8014896:	d01f      	beq.n	80148d8 <floor+0x98>
 8014898:	a325      	add	r3, pc, #148	; (adr r3, 8014930 <floor+0xf0>)
 801489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489e:	f7eb fcfd 	bl	800029c <__adddf3>
 80148a2:	2200      	movs	r2, #0
 80148a4:	2300      	movs	r3, #0
 80148a6:	f7ec f93f 	bl	8000b28 <__aeabi_dcmpgt>
 80148aa:	2800      	cmp	r0, #0
 80148ac:	d0eb      	beq.n	8014886 <floor+0x46>
 80148ae:	2c00      	cmp	r4, #0
 80148b0:	bfbe      	ittt	lt
 80148b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80148b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80148ba:	19a4      	addlt	r4, r4, r6
 80148bc:	ea24 0407 	bic.w	r4, r4, r7
 80148c0:	2500      	movs	r5, #0
 80148c2:	e7e0      	b.n	8014886 <floor+0x46>
 80148c4:	2e33      	cmp	r6, #51	; 0x33
 80148c6:	dd0b      	ble.n	80148e0 <floor+0xa0>
 80148c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80148cc:	d104      	bne.n	80148d8 <floor+0x98>
 80148ce:	ee10 2a10 	vmov	r2, s0
 80148d2:	460b      	mov	r3, r1
 80148d4:	f7eb fce2 	bl	800029c <__adddf3>
 80148d8:	ec41 0b10 	vmov	d0, r0, r1
 80148dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80148e4:	f04f 33ff 	mov.w	r3, #4294967295
 80148e8:	fa23 f707 	lsr.w	r7, r3, r7
 80148ec:	4207      	tst	r7, r0
 80148ee:	d0f3      	beq.n	80148d8 <floor+0x98>
 80148f0:	a30f      	add	r3, pc, #60	; (adr r3, 8014930 <floor+0xf0>)
 80148f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f6:	f7eb fcd1 	bl	800029c <__adddf3>
 80148fa:	2200      	movs	r2, #0
 80148fc:	2300      	movs	r3, #0
 80148fe:	f7ec f913 	bl	8000b28 <__aeabi_dcmpgt>
 8014902:	2800      	cmp	r0, #0
 8014904:	d0bf      	beq.n	8014886 <floor+0x46>
 8014906:	2c00      	cmp	r4, #0
 8014908:	da02      	bge.n	8014910 <floor+0xd0>
 801490a:	2e14      	cmp	r6, #20
 801490c:	d103      	bne.n	8014916 <floor+0xd6>
 801490e:	3401      	adds	r4, #1
 8014910:	ea25 0507 	bic.w	r5, r5, r7
 8014914:	e7b7      	b.n	8014886 <floor+0x46>
 8014916:	2301      	movs	r3, #1
 8014918:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801491c:	fa03 f606 	lsl.w	r6, r3, r6
 8014920:	4435      	add	r5, r6
 8014922:	4545      	cmp	r5, r8
 8014924:	bf38      	it	cc
 8014926:	18e4      	addcc	r4, r4, r3
 8014928:	e7f2      	b.n	8014910 <floor+0xd0>
 801492a:	2500      	movs	r5, #0
 801492c:	462c      	mov	r4, r5
 801492e:	e7aa      	b.n	8014886 <floor+0x46>
 8014930:	8800759c 	.word	0x8800759c
 8014934:	7e37e43c 	.word	0x7e37e43c
 8014938:	bff00000 	.word	0xbff00000
 801493c:	000fffff 	.word	0x000fffff

08014940 <scalbn>:
 8014940:	b570      	push	{r4, r5, r6, lr}
 8014942:	ec55 4b10 	vmov	r4, r5, d0
 8014946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801494a:	4606      	mov	r6, r0
 801494c:	462b      	mov	r3, r5
 801494e:	b99a      	cbnz	r2, 8014978 <scalbn+0x38>
 8014950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014954:	4323      	orrs	r3, r4
 8014956:	d036      	beq.n	80149c6 <scalbn+0x86>
 8014958:	4b39      	ldr	r3, [pc, #228]	; (8014a40 <scalbn+0x100>)
 801495a:	4629      	mov	r1, r5
 801495c:	ee10 0a10 	vmov	r0, s0
 8014960:	2200      	movs	r2, #0
 8014962:	f7eb fe51 	bl	8000608 <__aeabi_dmul>
 8014966:	4b37      	ldr	r3, [pc, #220]	; (8014a44 <scalbn+0x104>)
 8014968:	429e      	cmp	r6, r3
 801496a:	4604      	mov	r4, r0
 801496c:	460d      	mov	r5, r1
 801496e:	da10      	bge.n	8014992 <scalbn+0x52>
 8014970:	a32b      	add	r3, pc, #172	; (adr r3, 8014a20 <scalbn+0xe0>)
 8014972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014976:	e03a      	b.n	80149ee <scalbn+0xae>
 8014978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801497c:	428a      	cmp	r2, r1
 801497e:	d10c      	bne.n	801499a <scalbn+0x5a>
 8014980:	ee10 2a10 	vmov	r2, s0
 8014984:	4620      	mov	r0, r4
 8014986:	4629      	mov	r1, r5
 8014988:	f7eb fc88 	bl	800029c <__adddf3>
 801498c:	4604      	mov	r4, r0
 801498e:	460d      	mov	r5, r1
 8014990:	e019      	b.n	80149c6 <scalbn+0x86>
 8014992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014996:	460b      	mov	r3, r1
 8014998:	3a36      	subs	r2, #54	; 0x36
 801499a:	4432      	add	r2, r6
 801499c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80149a0:	428a      	cmp	r2, r1
 80149a2:	dd08      	ble.n	80149b6 <scalbn+0x76>
 80149a4:	2d00      	cmp	r5, #0
 80149a6:	a120      	add	r1, pc, #128	; (adr r1, 8014a28 <scalbn+0xe8>)
 80149a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149ac:	da1c      	bge.n	80149e8 <scalbn+0xa8>
 80149ae:	a120      	add	r1, pc, #128	; (adr r1, 8014a30 <scalbn+0xf0>)
 80149b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149b4:	e018      	b.n	80149e8 <scalbn+0xa8>
 80149b6:	2a00      	cmp	r2, #0
 80149b8:	dd08      	ble.n	80149cc <scalbn+0x8c>
 80149ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80149be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149c6:	ec45 4b10 	vmov	d0, r4, r5
 80149ca:	bd70      	pop	{r4, r5, r6, pc}
 80149cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80149d0:	da19      	bge.n	8014a06 <scalbn+0xc6>
 80149d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80149d6:	429e      	cmp	r6, r3
 80149d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80149dc:	dd0a      	ble.n	80149f4 <scalbn+0xb4>
 80149de:	a112      	add	r1, pc, #72	; (adr r1, 8014a28 <scalbn+0xe8>)
 80149e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d1e2      	bne.n	80149ae <scalbn+0x6e>
 80149e8:	a30f      	add	r3, pc, #60	; (adr r3, 8014a28 <scalbn+0xe8>)
 80149ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ee:	f7eb fe0b 	bl	8000608 <__aeabi_dmul>
 80149f2:	e7cb      	b.n	801498c <scalbn+0x4c>
 80149f4:	a10a      	add	r1, pc, #40	; (adr r1, 8014a20 <scalbn+0xe0>)
 80149f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d0b8      	beq.n	8014970 <scalbn+0x30>
 80149fe:	a10e      	add	r1, pc, #56	; (adr r1, 8014a38 <scalbn+0xf8>)
 8014a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014a04:	e7b4      	b.n	8014970 <scalbn+0x30>
 8014a06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a0a:	3236      	adds	r2, #54	; 0x36
 8014a0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014a14:	4620      	mov	r0, r4
 8014a16:	4b0c      	ldr	r3, [pc, #48]	; (8014a48 <scalbn+0x108>)
 8014a18:	2200      	movs	r2, #0
 8014a1a:	e7e8      	b.n	80149ee <scalbn+0xae>
 8014a1c:	f3af 8000 	nop.w
 8014a20:	c2f8f359 	.word	0xc2f8f359
 8014a24:	01a56e1f 	.word	0x01a56e1f
 8014a28:	8800759c 	.word	0x8800759c
 8014a2c:	7e37e43c 	.word	0x7e37e43c
 8014a30:	8800759c 	.word	0x8800759c
 8014a34:	fe37e43c 	.word	0xfe37e43c
 8014a38:	c2f8f359 	.word	0xc2f8f359
 8014a3c:	81a56e1f 	.word	0x81a56e1f
 8014a40:	43500000 	.word	0x43500000
 8014a44:	ffff3cb0 	.word	0xffff3cb0
 8014a48:	3c900000 	.word	0x3c900000

08014a4c <_init>:
 8014a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4e:	bf00      	nop
 8014a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a52:	bc08      	pop	{r3}
 8014a54:	469e      	mov	lr, r3
 8014a56:	4770      	bx	lr

08014a58 <_fini>:
 8014a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a5a:	bf00      	nop
 8014a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a5e:	bc08      	pop	{r3}
 8014a60:	469e      	mov	lr, r3
 8014a62:	4770      	bx	lr
